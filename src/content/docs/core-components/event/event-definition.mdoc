---
title: Create an Event
description: Learn how to define events in Ergosfare.
---

## What is an Event?

Events in Ergosfare represent **notifications that something has happened**.  
An event is **any type that implements `IEvent`** from `Ergosfare.Contracts`.

> ⚡ You don’t need the Event Module to define events. Only include `Ergosfare.Contracts`.  
> ⚡ If an object **implements the `IEvent` interface**, it will be automatically **treated as an event** and can be published via `IEventMediator`.  
> ⚡ However, **events can also be defined as POCO (C#) or POJO (Java) classes**. This allows your domain layer to remain **free of Ergosfare dependencies**.

---

### Key Points

{% prose %}
* Events are used to **notify the system or subscribers** of a state change or important occurrence.
* Unlike commands and queries, events can have multiple handlers.
* Events can be defined as **classes, records, or structs**.
* Events carry all the information needed for subscribers to react.
* Keep events **lightweight** and free of business logic.
* Events are typically **immutable**, but can be mutable if pre-handlers need to enrich them with context.
* Single Responsibility: Each event represents a single, discrete occurrence.
* Events in Ergosfare are **fire-and-forget**; they do not return a result.
{% /prose %}

---

## Event Example

```csharp
using Ergosfare.Contracts;

public record OrderCreatedEvent(Guid OrderId, string CustomerId) : IEvent;
```

### Events are Immutable by Default

Events are **immutable** by design. This ensures that event data remains consistent from creation to handling.
If needed, events can be **mutated via pre-handlers** before reaching their handlers (e.g., to enrich with tenant, user, or environment context).

---

### Mutable vs. Immutable Events

#### Immutable Event

```csharp
using Ergosfare.Contracts;

public record ProductStockUpdatedEvent(string ProductId, int Quantity) : IEvent;
```

#### Mutable Event

```csharp
using Ergosfare.Contracts;

public record ProductStockUpdatedEvent(string productId, int quantity) : IEvent
{
    public string ProductId { get; set; } = productId;
    public int Quantity { get; set; } = quantity;
}
```

#### Notes on Mutable Events

{% prose %}

* Mutable events must be **reference types**.
* Mutation should only occur **before handler execution**, typically within pre-handlers.
* Prefer immutability for easier reasoning, testing, and consistency.
{% /prose %}

---

## Next Steps

{% cardgrid %}
{% linkcard title="Defining Event Handlers" href="./event-handler" /%}
{% linkcard title="Publishing Events via IEventMediator" href="" /%}
{% /cardgrid %}

