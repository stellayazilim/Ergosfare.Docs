---
title: Post-Interceptors
description: Ergosfareâ€™de post-interceptors nasÄ±l Ã§alÄ±ÅŸÄ±r, logging, caching ve response shaping Ã¶rnekleri ile Ã¶ÄŸrenin.
---

## Post-Interceptors Nedir?

Post-interceptors, Ergosfareâ€™de **command, query veya eventâ€™in main handlerâ€™Ä± Ã§alÄ±ÅŸtÄ±ktan sonra Ã§alÄ±ÅŸan Ã¶zel handlerâ€™lardÄ±r**.  
Bu sayede geliÅŸtiriciler, handlerâ€™Ä±n dÃ¶ndÃ¼rdÃ¼ÄŸÃ¼ **result** Ã¼zerinde inceleme, deÄŸiÅŸtirme veya yan etki oluÅŸturma iÅŸlemleri yapabilir.

Bu, **cross-cutting concerns** iÃ§in idealdir; Ã¶rneÄŸin logging, caching veya yan etkiler (side-effects) oluÅŸturmak.

---

## Post-Interceptors NasÄ±l Ã‡alÄ±ÅŸÄ±r?

Bir mesaj handler Ã§alÄ±ÅŸmasÄ±nÄ± tamamladÄ±ÄŸÄ±nda:

{% steps %}
1. - Post-interceptors **deterministik bir sÄ±rayla** Ã§alÄ±ÅŸtÄ±rÄ±lÄ±r:  
    {% prose %}
    - EÄŸer message veya interceptor `WeightAttribute` ile sÃ¼slenmiÅŸse, Ã§alÄ±ÅŸma sÄ±rasÄ± weightâ€™e gÃ¶re belirlenir.  
    - Weight yoksa type ismine gÃ¶re alfabetik sÄ±ralanÄ±r.  
    - âš¡ Gelecek Ergosfare sÃ¼rÃ¼mlerinde sÄ±ralama configurable olabilir.  
    - Her post-interceptor, hem **mesaj**i hem **execution context**i ve **handler result**Ä± alÄ±r.  
    - Post-interceptors:  
        - handlerâ€™Ä±n dÃ¶ndÃ¼rdÃ¼ÄŸÃ¼ sonucu inceleyebilir veya deÄŸiÅŸtirebilir,  
        - caching, notification veya logging gibi side-effect tetikleyebilir,  
        - `ExecutionContext` aracÄ±lÄ±ÄŸÄ±yla **ambient data** paylaÅŸabilir.  
    {% /prose %}
2. Handler veya post-interceptor Ã§alÄ±ÅŸÄ±rken exception oluÅŸursa, **Exception Interceptors** tetiklenir.  
{% /steps %}

---

## Ã–rnek: Logging ve Result DeÄŸiÅŸtirme

```csharp
using Ergosfare.Contracts;
using Ergosfare.Context;
using Microsoft.Extensions.Logging;

public class LoggingPostInterceptor<TCommand, TResult> 
    : ICommandPostInterceptor<TCommand, TResult>
{
    private readonly ILogger<LoggingPostInterceptor<TCommand, TResult>> _logger;

    public LoggingPostInterceptor(ILogger<LoggingPostInterceptor<TCommand, TResult>> logger)
    {
        _logger = logger;
    }

    public Task HandleAsync(TCommand command, TResult result, IExecutionContext context)
    {
        _logger.LogInformation("{Command type} iÅŸlendi: {@command}, Result: {@result}",
            typeof(TCommand).Name, command, result);

        // Opsiyonel: result veya context zenginleÅŸtirilebilir
        context.Set("LastResult", result);

        return Task.CompletedTask;
    }
}
````

Burada post-interceptor, hem request hem de resultâ€™Ä± logluyor ve `ExecutionContext`â€™e kaydediyor.
Sonraki post-interceptor veya exception interceptor buna eriÅŸebilir:

```csharp
var lastResult = context.Get<TResult>("LastResult");
```

---

## Post-Interceptors GerÃ§ek Hayat Ã–rnekleri

{% prose %}

* **Logging / Monitoring** â€” Handler sonuÃ§larÄ±nÄ± veya outcomeâ€™larÄ±nÄ± loglamak.
* **Caching** â€” Tekrarlanan pahalÄ± iÅŸlemleri Ã¶nlemek iÃ§in sonucu saklamak.
* **Notification / Messaging** â€” Handler sonuÃ§larÄ±na gÃ¶re dÄ±ÅŸ event veya bildirim tetiklemek.
* **Result Transformation / Shaping** â€” Clientâ€™a dÃ¶nmeden Ã¶nce handler sonucunu deÄŸiÅŸtirmek veya sÃ¼slemek.
* **ExecutionContext ile ZenginleÅŸtirme** â€” Handler sonucu veya tÃ¼retilmiÅŸ veriyi sonraki interceptor veya pluginâ€™lerle paylaÅŸmak.

{% /prose %}

---

## Post-Interceptors ve DiÄŸer Interceptors

{% prose %}

* **Pre-Interceptors** â€” Handler Ã§alÄ±ÅŸmadan Ã¶nce. KullanÄ±m: validation, logging, authorization, enrichment.
* **Post-Interceptors** â€” Handler baÅŸarÄ±yla Ã§alÄ±ÅŸtÄ±ktan sonra. KullanÄ±m: logging, caching, notification, response shaping.
* **Exception Interceptors** â€” Sadece exception oluÅŸtuÄŸunda. KullanÄ±m: retry, fallback, centralized logging.

{% /prose %}

---

## Post-Interceptor Interfaceâ€™leri

Her modÃ¼lÃ¼n (Command, Query, Event) kendine ait post-interceptor interfaceâ€™leri vardÄ±r.
Bu interfaceâ€™ler, handler sonuÃ§larÄ±nÄ± inceleyebileceÄŸiniz veya iÅŸlem yapabileceÄŸiniz cross-cutting logic iÃ§in kullanÄ±lÄ±r.

### Command Module

{% prose %}

* `ICommandPostInterceptor` â€” TÃ¼m commandâ€™lar, result olmayan (rare).
* `ICommandPostInterceptor<TCommand>` â€” Belirli command tipi, TResult yalnÄ±zca generic ise eriÅŸilebilir.
* `ICommandPostInterceptor<TCommand, TResult>` â€” Belirli command tipi ve sonucuna eriÅŸim.

{% /prose %}

### Query Module

{% prose %}

* `IQueryPostInterceptor` â€” TÃ¼m queryâ€™ler, result olmayan (rare).
* `IQueryPostInterceptor<TQuery>` â€” Belirli query tipi, TResult yalnÄ±zca generic ise eriÅŸilebilir.
* `IQueryPostInterceptor<TQuery, TResult>` â€” Belirli query tipi ve sonucuna eriÅŸim.

{% /prose %}

### Event Module

{% prose %}

* `IEventPostInterceptor` â€” TÃ¼m eventâ€™ler (TResult yok).
* `IEventPostInterceptor<TEvent>` â€” Belirli event tipi (TResult yok, eventâ€™lerin sonucu yok).

{% /prose %}

---

### Detay Not: Post-Interceptors Resultâ€™a EriÅŸir

Post-interceptors, handler Ã§alÄ±ÅŸtÄ±ktan sonra Ã§alÄ±ÅŸÄ±r:

{% prose %}

* Handler sonucu (`TResult`) eriÅŸilebilir.
* Interceptorâ€™lar sonucu inceleyebilir, zenginleÅŸtirebilir veya deÄŸiÅŸtirebilir.
* Logging, caching veya notification iÃ§in doÄŸru yerdir.
* Pre-interceptorâ€™lardan farklÄ± olarak, post-interceptor **TResultâ€™a eriÅŸebilir**.

{% /prose %}

---

### Ã–zet Tablo

| Module  | Non-Generic Post-Interceptor | Generic Post-Interceptor (Request)  | Generic Post-Interceptor (Request+Result)    |
| ------- | ---------------------------- | ----------------------------------- | -------------------------------------------- |
| Command | `ICommandPostInterceptor`    | `ICommandPostInterceptor<TCommand>` | `ICommandPostInterceptor<TCommand, TResult>` |
| Query   | `IQueryPostInterceptor`      | `IQueryPostInterceptor<TQuery>`     | `IQueryPostInterceptor<TQuery, TResult>`     |
| Event   | `IEventPostInterceptor`      | `IEventPostInterceptor<TEvent>`     | â€”                                            |

> âš¡ Belirli request veya resultâ€™a eriÅŸmek iÃ§in generic interface kullanÄ±n.
> Non-generic interface, birden fazla message tipi ile tek interceptor kullanmak iÃ§in uygundur.

---

## ğŸ“– SÃ¶zlÃ¼k

| Terim                    | AÃ§Ä±klama                                                        |
| ------------------------ | --------------------------------------------------------------- |
| Post-Interceptor         | Handler baÅŸarÄ±yla Ã§alÄ±ÅŸtÄ±ktan sonra Ã§alÄ±ÅŸan Ã¶zel interceptor.   |
| Pre-Interceptor          | Handlerâ€™dan Ã¶nce Ã§alÄ±ÅŸan interceptor.                           |
| Exception Interceptor    | Sadece exception oluÅŸtuÄŸunda Ã§alÄ±ÅŸan interceptor.               |
| Logging                  | Ä°ÅŸlem veya sonuÃ§larÄ± kaydetmek.                                 |
| Caching                  | SonuÃ§larÄ± saklayarak tekrar eden iÅŸlemleri Ã¶nlemek.             |
| Notification / Messaging | Handler sonucuna gÃ¶re dÄ±ÅŸ sistemleri bilgilendirmek.            |
| ExecutionContext         | Handler veya interceptor yaÅŸam dÃ¶ngÃ¼sÃ¼nde veri taÅŸÄ±yan context. |
| WeightAttribute          | Interceptorâ€™larÄ±n Ã§alÄ±ÅŸma sÄ±rasÄ±nÄ± belirleyen attribute.        |
| TResult                  | Handler tarafÄ±ndan dÃ¶ndÃ¼rÃ¼len sonuÃ§ tipi.                       |
| Cross-cutting concerns   | Birden fazla handler veya modÃ¼l iÃ§in ortak logic veya yan etki. |

---

## Sonraki AdÄ±mlar

{% cardgrid stagger=true %}
{% linkcard title="Pre-Interceptors" href="/guides/cross-cutting-concerns/pre-interceptors" /%}
{% linkcard title="Exception Interceptors" href="/guides/cross-cutting-concerns/exception-interceptors" /%}
{% linkcard title="Using Attributes" href="/guides/cross-cutting-concerns/attributes" /%}
{% /cardgrid %}
