---
title: Exception Interceptors
description: Ergosfare'de exception interceptors nasÄ±l Ã§alÄ±ÅŸÄ±r, retry, fallback ve error logging Ã¶rnekleri ile Ã¶ÄŸrenin.
---

## Exception Interceptors Nedir?

Exception interceptors, Ergosfareâ€™de **sadece bir handler veya baÅŸka bir interceptor exception fÄ±rlattÄ±ÄŸÄ±nda Ã§alÄ±ÅŸan Ã¶zel handler'lardÄ±r**.  
Bu sayede geliÅŸtiriciler handlerâ€™larÄ± try/catch bloklarÄ±yla doldurmadan hatalara merkezi bir ÅŸekilde yanÄ±t verebilir.

Bu Ã¶zellik, **cross-cutting concerns** iÃ§in idealdir; Ã¶rneÄŸin, hatalarÄ± loglamak, iÅŸlemleri tekrar denemek veya fallback davranÄ±ÅŸÄ± saÄŸlamak.

---

## Exception Interceptors NasÄ±l Ã‡alÄ±ÅŸÄ±r?

Bir mesaj Ergosfare pipelineâ€™Ä±na girdiÄŸinde ve bir exception oluÅŸtuÄŸunda:

{% steps %}
1. - Exception interceptors **sadece bir handler veya baÅŸka bir interceptor exception fÄ±rlattÄ±ÄŸÄ±nda Ã§alÄ±ÅŸÄ±r**.  
    {% prose %}
    - Her interceptor, **orijinal mesaj**, **nullable result** ve **exception objesi** ile birlikte **execution context** alÄ±r.  
    - Exceptionâ€™Ä± inceleyebilir, loglayabilir, retry edebilir veya dÃ¶nÃ¼ÅŸtÃ¼rebilirsiniz.  
    - Exception interceptors, **orijinal handler sonucunu deÄŸiÅŸtirmez**, Ã§Ã¼nkÃ¼ baÅŸarÄ±lÄ± bir sonuÃ§ yoktur.  
    {% /prose %}
2. Exception interceptors, exception oluÅŸmadan Ã¶nce Ã§alÄ±ÅŸan pre- veya post-interceptorsâ€™tan sonra Ã§alÄ±ÅŸÄ±r, ancak exception pipeline dÄ±ÅŸÄ±na Ã§Ä±kmadan Ã¶nce.  

3. Birden fazla exception interceptor kaydedilebilir. Ã‡alÄ±ÅŸma sÄ±rasÄ±:  
    {% prose %}
    - EÄŸer varsa `WeightAttribute` ile sÄ±ralanÄ±r.  
    - Weight yoksa type ismine gÃ¶re alfabetik olarak sÄ±ralanÄ±r.  
    - âš¡ Gelecek sÃ¼rÃ¼mlerde bu sÄ±ralama configurable olabilir.  
    {% /prose %}

4. EÄŸer exception interceptor exceptionâ€™Ä± Ã§Ã¶zer veya yutar ise pipeline sorunsuz devam eder; aksi halde exception propagate olur.
{% /steps %}

---

## Ã–rnek: Logging ve Retry

```csharp
using Ergosfare.Contracts;
using Ergosfare.Context;
using Microsoft.Extensions.Logging;

public class RetryLoggingInterceptor<TCommand> 
    : ICommandExceptionInterceptor<TCommand>
{
    private readonly ILogger<RetryLoggingInterceptor<TCommand>> _logger;

    public RetryLoggingInterceptor(ILogger<RetryLoggingInterceptor<TCommand>> logger)
    {
        _logger = logger;
    }

    public async Task HandleAsync(TCommand command, object result, Exception exception, IExecutionContext context)
    {
        _logger.LogError(exception, "{CommandType} Ã§alÄ±ÅŸÄ±rken exception oluÅŸtu: {@command}",
            typeof(TCommand).Name, command);

        // Opsiyonel: retry mantÄ±ÄŸÄ± implement edilebilir
        var retryCount = context.Get<int>("RetryCount");
        if (retryCount < 3)
        {
            context.Set("RetryCount", retryCount + 1);
            // Burada command tekrar dispatch edilebilir
        }
    }
}
```

---

## GerÃ§ek Hayat Ã–rnekleri

{% prose %}

* **Error Logging** â€” Command, Query veya Eventâ€™lerden gelen exceptionâ€™larÄ± merkezi olarak loglamak.
* **Retries / Fallbacks** â€” BaÅŸarÄ±sÄ±z iÅŸlemleri otomatik tekrar denemek veya alternatif logic Ã§alÄ±ÅŸtÄ±rmak.
* **Metrics / Monitoring** â€” Exception oranlarÄ±nÄ± takip etmek, monitoring sistemlerini bilgilendirmek veya alert tetiklemek.
* **Notification / Alerting** â€” Kritik hatalarda geliÅŸtiricilere veya dÄ±ÅŸ sistemlere bildirim gÃ¶ndermek.

{% /prose %}

---

## Exception Interceptors ve DiÄŸer Interceptors

{% prose %}

* **Pre-Interceptors** â€” Handlerâ€™dan *Ã¶nce* Ã§alÄ±ÅŸÄ±r. KullanÄ±m Ã¶rnekleri: validation, logging, authorization, enrichment.
* **Post-Interceptors** â€” Handler baÅŸarÄ±yla Ã§alÄ±ÅŸtÄ±ktan *sonra* Ã§alÄ±ÅŸÄ±r. KullanÄ±m Ã¶rnekleri: loglama, caching, notification, response shaping.
* **Exception Interceptors** â€” *Sadece exception oluÅŸtuÄŸunda* Ã§alÄ±ÅŸÄ±r. KullanÄ±m Ã¶rnekleri: retry, fallback, merkezi logging, metrics, alert.

{% /prose %}

---

## Exception Interceptor Interfaceâ€™leri

Her modÃ¼lÃ¼n (Command, Query, Event) kendine ait exception-interceptor interfaceâ€™leri vardÄ±r.

### Command Module

{% prose %}

* `ICommandExceptionInterceptor` â€” TÃ¼m commandâ€™lar iÃ§in, non-generic.
* `ICommandExceptionInterceptor<TCommand>` â€” Belirli bir command tipi iÃ§in.

{% /prose %}

### Query Module

{% prose %}

* `IQueryExceptionInterceptor` â€” TÃ¼m queryâ€™ler iÃ§in, non-generic.
* `IQueryExceptionInterceptor<TQuery>` â€” Belirli bir query tipi iÃ§in.

{% /prose %}

### Event Module

{% prose %}

* `IEventExceptionInterceptor` â€” TÃ¼m eventâ€™ler iÃ§in, non-generic.
* `IEventExceptionInterceptor<TEvent>` â€” Belirli bir event tipi iÃ§in.

{% /prose %}

---

### Ã–zet Tablo

| Module  | Non-Generic Exception-Interceptor | Generic Exception-Interceptor            |
| ------- | --------------------------------- | ---------------------------------------- |
| Command | `ICommandExceptionInterceptor`    | `ICommandExceptionInterceptor<TCommand>` |
| Query   | `IQueryExceptionInterceptor`      | `IQueryExceptionInterceptor<TQuery>`     |
| Event   | `IEventExceptionInterceptor`      | `IEventExceptionInterceptor<TEvent>`     |

> âš¡ Belirli bir command, query veya event hedeflemek iÃ§in generic interface kullanÄ±n.
> Non-generic interface ile bir modÃ¼l tipindeki tÃ¼m mesajlar tek interceptor ile iÅŸlenebilir.

---

## ğŸ“– SÃ¶zlÃ¼k

| Terim                 | AÃ§Ä±klama                                                                                 |
| --------------------- | ---------------------------------------------------------------------------------------- |
| Exception Interceptor | Bir handler veya baÅŸka bir interceptor exception fÄ±rlattÄ±ÄŸÄ±nda Ã§alÄ±ÅŸan Ã¶zel interceptor. |
| Pre-Interceptor       | Handlerâ€™dan Ã¶nce Ã§alÄ±ÅŸan interceptor.                                                    |
| Post-Interceptor      | Handler baÅŸarÄ±yla Ã§alÄ±ÅŸtÄ±ktan sonra Ã§alÄ±ÅŸan interceptor.                                 |
| Retry                 | BaÅŸarÄ±sÄ±z bir iÅŸlemi belirli sayÄ±da tekrar denemek.                                      |
| Fallback              | Ana iÅŸlem baÅŸarÄ±sÄ±z olduÄŸunda alternatif bir logic Ã§alÄ±ÅŸtÄ±rmak.                          |
| Execution Context     | Handler veya interceptor yaÅŸam dÃ¶ngÃ¼sÃ¼nde veri taÅŸÄ±yan context.                          |
| WeightAttribute       | Interceptorâ€™larÄ±n Ã§alÄ±ÅŸma sÄ±rasÄ±nÄ± belirleyen attribute.                                 |
| Fire-and-forget       | Ä°ÅŸlem sonucu beklemeden devam eder.                                                      |
| IEventMediator        | Eventâ€™leri publish ve dispatch etmek iÃ§in kullanÄ±lan interface.                          |
| DomainException       | Domain katmanÄ±nda fÄ±rlatÄ±lan Ã¶zel exception tipi.                                        |
| Enrichment            | Veriyi zenginleÅŸtirme, yeni veriler ekleme                                               |

---

## Sonraki AdÄ±mlar

{% cardgrid stagger=true %}
{% linkcard title="Pre-Interceptors" href="/guides/cross-cutting-concerns/pre-interceptors" /%}
{% linkcard title="Post-Interceptors" href="/guides/cross-cutting-concerns/post-interceptors" /%}
{% linkcard title="Using Attributes" href="/guides/cross-cutting-concerns/attributes" /%}
{% /cardgrid %}

