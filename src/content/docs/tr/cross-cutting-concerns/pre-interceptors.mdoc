---
title: Pre-Interceptors
description: Ergosfareâ€™de pre-interceptorâ€™larÄ±n nasÄ±l Ã§alÄ±ÅŸtÄ±ÄŸÄ±nÄ±, validation, logging ve authorization Ã¶rnekleriyle Ã¶ÄŸrenin.
---

## Pre-Interceptor Nedir?

Ergosfareâ€™de pre-interceptorâ€™lar, bir command, query veya eventâ€™in **ana handlerâ€™Ä±ndan Ã¶nce Ã§alÄ±ÅŸan Ã¶zel handlerâ€™lardÄ±r**.  
MesajÄ± incelemenize, validate etmenize, zenginleÅŸtirmenize veya tamamen reddetmenize izin verirler.

Bu sayede **cross-cutting concerns** iÃ§in gÃ¼Ã§lÃ¼ bir araÃ§tÄ±rlar ve uygulamanÄ±z genelinde tekrar eden mantÄ±klarÄ± handlerâ€™lara kopyalamadan tutarlÄ± davranÄ±ÅŸ saÄŸlarlar.

---

## Pre-Interceptor NasÄ±l Ã‡alÄ±ÅŸÄ±r?

Bir mesaj Ergosfare pipelineâ€™Ä±na girdiÄŸinde ÅŸu adÄ±mlar gerÃ§ekleÅŸir:

{% steps %}
1. Pre-interceptorâ€™lar **deterministic order** ile Ã§alÄ±ÅŸÄ±r:  

   {% prose %}
   - EÄŸer bir mesaj veya interceptor `WeightAttribute` ile iÅŸaretlenmiÅŸse, execution order aÄŸÄ±rlÄ±ÄŸa gÃ¶re belirlenir.  
   - EÄŸer weight yoksa, interceptorâ€™lar alfabetik olarak sÄ±ralanÄ±r.  
   - âš¡ Ordering ileriki Ergosfare sÃ¼rÃ¼mlerinde tam anlamÄ±yla konfigÃ¼re edilebilir olacak.  
   - Her pre-interceptor hem **message** hem de **execution context** alÄ±r.  

   - Interceptorâ€™lar ÅŸunlarÄ± yapabilir:  
     - mesajÄ±n devam etmesine izin vermek,  
     - mesajÄ± enrich/mutate etmek (Ã¶r. tenant veya user bilgisini eklemek),  
     - **ambient data**â€™yÄ± `ExecutionContext` Ã¼zerinden sonraki interceptorâ€™lara ve handlerâ€™lara aktarmak,  
     - ya da tamamen reject etmek (Ã¶r. validation exception fÄ±rlatmak).  
   {% /prose %}
2. TÃ¼m pre-interceptorâ€™lar baÅŸarÄ±lÄ± olursa mesaj ilgili handlerâ€™a geÃ§er.  

3. Post-interceptorâ€™lar aynÄ± mantÄ±kla asÄ±l handlardan sonra Ã§alÄ±ÅŸÄ±r.  

4. Pipeline sÄ±rasÄ±nda exception oluÅŸursa, Ã§Ä±kmadan Ã¶nce exception-interceptorâ€™lar Ã§alÄ±ÅŸÄ±r.  
{% /steps %}

{% linkcard title="Weight attribute hakkÄ±nda daha fazla bilgi iÃ§in kÄ±lavuza bakÄ±n" href="" /%}

---

## Pre-Interceptor Ã–rneÄŸi: Logging & Context Enrichment

```csharp
using Ergosfare.Contracts;
using Ergosfare.Context;
using Microsoft.Extensions.Logging;

public class LoggingInterceptor<TCommand> 
    : ICommandPreInterceptor<TCommand>
{
    private readonly ILogger<LoggingInterceptor<TCommand>> _logger;

    public LoggingInterceptor(ILogger<LoggingInterceptor<TCommand>> logger)
    {
        _logger = logger;
    }

    public Task HandleAsync(TCommand command, IExecutionContext context)
    {
        _logger.LogInformation("Handling {Command type}: {@command}", typeof(TCommand).Name, command);

        // Later interceptor ve handlerâ€™lar iÃ§in ambient data ekliyoruz
        Guid userId = Guid.NewGuid(); // Ã–rn: auth sisteminden mevcut kullanÄ±cÄ±yÄ± Ã§Ã¶zÃ¼mlemek
        context.Set("UserId", userId);

        return Task.CompletedTask;
    }
}
```

Bu interceptor, hem loglama yapar hem de `UserId` bilgisini `ExecutionContext` iÃ§ine yazar.
Sonraki herhangi bir interceptor veya handler bunu okuyabilir:

```csharp
var userId = context.Get<Guid>("UserId");
```

---

## Pre-Interceptor KullanÄ±m AlanlarÄ±

{% prose %}

* **Validation**
  Handler Ã§alÄ±ÅŸmadan Ã¶nce command veya queryâ€™nin geÃ§erli olduÄŸunu garanti eder.
  Ã–rn: `CreateOrderCommand` en az bir order line iÃ§ermeli.

* **Authorization**
  Mevcut kullanÄ±cÄ±nÄ±n isteÄŸi Ã§alÄ±ÅŸtÄ±rmaya yetkisi olup olmadÄ±ÄŸÄ±nÄ± kontrol eder.
  Ã–rn: yalnÄ±zca admin kullanÄ±cÄ±lar `DeleteUserCommand` Ã§alÄ±ÅŸtÄ±rabilir.

* **Logging / Monitoring**
  Talepleri kayÄ±t altÄ±na almak, diagnostiÄŸe veya observabilityâ€™ye katkÄ± saÄŸlamak.

* **Enrichment with ExecutionContext**
  Tenant ID, correlation ID veya user data gibi bilgileri pipelineâ€™Ä±n geri kalanÄ±yla paylaÅŸmak.

* **Rate Limiting / Throttling**
  Handlerâ€™a ulaÅŸmadan Ã¶nce yoÄŸun iÅŸlemleri sÄ±nÄ±rlamak.
{% /prose %}

---

## Pre-Interceptor vs. DiÄŸer Interceptorâ€™lar

Ergosfare, handler etrafÄ±nda farklÄ± interceptor tiplerinin Ã§alÄ±ÅŸabildiÄŸi bir **pipeline model** sunar:

{% prose %}

* **Pre-Interceptors** â€” handlerâ€™dan *Ã¶nce* Ã§alÄ±ÅŸÄ±r.
  KullanÄ±m: validation, logging, authorization, enrichment.

* **Post-Interceptors** â€” handler baÅŸarÄ±lÄ± Ã§alÄ±ÅŸtÄ±ktan *sonra* Ã§alÄ±ÅŸÄ±r.
  KullanÄ±m: response shaping, caching, notification yayÄ±nlama.

* **Exception Interceptors** â€” yalnÄ±zca handler (veya baÅŸka bir interceptor) exception fÄ±rlattÄ±ÄŸÄ±nda Ã§alÄ±ÅŸÄ±r.
  KullanÄ±m: retry, fallback, error logging.
{% /prose %}

---

## Pre-Interceptor Interface Mapping

Her module (Command, Query, Event) iÃ§in Ã¶zel pre-interceptor interfaceâ€™leri vardÄ±r.
Bunlar cross-cutting logicâ€™i modÃ¼l bazÄ±nda uygulamanÄ±zÄ± saÄŸlar, ayrÄ±ca generic tip ile mesaj tÃ¼rÃ¼ne gÃ¶re Ã¶zelleÅŸtirilebilir.

### Command Module

{% prose %}

* `ICommandPreInterceptor` â€” tÃ¼m commandâ€™leri handle eder (non-generic).
* `ICommandPreInterceptor<TCommand>` â€” belirli bir command tipini handle eder.
{% /prose %}

### Query Module

{% prose %}

* `IQueryPreInterceptor` â€” tÃ¼m queryâ€™leri handle eder (non-generic).
* `IQueryPreInterceptor<TQuery>` â€” belirli bir query tipini handle eder.
{% /prose %}

### Event Module

{% prose %}

* `IEventPreInterceptor` â€” tÃ¼m eventâ€™leri handle eder (non-generic).
* `IEventPreInterceptor<TEvent>` â€” belirli bir event tipini handle eder.
{% /prose %}

---

> **Derin Not: Neden Pre-Interceptorâ€™larÄ±n Result (`TResult`) Yok?**
>
> Pre-interceptorâ€™lar **handler Ã§alÄ±ÅŸmadan Ã¶nce** Ã§alÄ±ÅŸÄ±r. Bu noktada:
>
> {% prose %}
>
> * Mesaj (command, query veya event) incelenebilir veya deÄŸiÅŸtirilebilir.
> * Handler henÃ¼z Ã§alÄ±ÅŸmadÄ±ÄŸÄ± iÃ§in herhangi bir result yoktur.
> * Pre-interceptor validation, logging, enrichment, authorization veya cancellation yapabilir.
> * Resultâ€™a eriÅŸmek anlamsÄ±zdÄ±r Ã§Ã¼nkÃ¼ henÃ¼z Ã¼retilmemiÅŸtir.
> {% /prose %}
>
> âš¡ EÄŸer result Ã¼zerinde Ã§alÄ±ÅŸmanÄ±z gerekiyorsa **Post-Interceptor** veya **Exception Interceptor** kullanÄ±n.

---

### Ã–zet Tablo

| Module  | Non-Generic Pre-Interceptor | Generic Pre-Interceptor            |
| ------- | --------------------------- | ---------------------------------- |
| Command | `ICommandPreInterceptor`    | `ICommandPreInterceptor<TCommand>` |
| Query   | `IQueryPreInterceptor`      | `IQueryPreInterceptor<TQuery>`     |
| Event   | `IEventPreInterceptor`      | `IEventPreInterceptor<TEvent>`     |

âš¡ Belirli command, query veya eventâ€™leri hedeflemek iÃ§in generic interfaceâ€™leri kullanÄ±n.
Non-generic interfaceâ€™ler ile tÃ¼m mesaj tiplerini tek bir interceptorâ€™da ele alabilirsiniz.

---

## Sonraki AdÄ±mlar

{% cardgrid stagger=true %}
{% linkcard title="Post-Interceptors" href="/guides/cross-cutting-concerns/post-interceptors" /%}
{% linkcard title="Exception Interceptors" href="/guides/cross-cutting-concerns/exception-interceptors" /%}
{% linkcard title="Using Attributes" href="/guides/cross-cutting-concerns/attributes" /%}
{% /cardgrid %}

---

## ğŸ“˜ SÃ¶zlÃ¼k

* **Interceptor** â†’ Bir mesajÄ±n iÅŸlenmesi sÃ¼recine mÃ¼dahale eden bileÅŸen.
* **Handler** â†’ AsÄ±l iÅŸ mantÄ±ÄŸÄ±nÄ± Ã§alÄ±ÅŸtÄ±ran bileÅŸen (command handler, query handler vb.).
* **Pipeline** â†’ MesajÄ±n pre-interceptor â†’ handler â†’ post-interceptor â†’ exception-interceptor sÄ±rasÄ±yla geÃ§tiÄŸi iÅŸlem hattÄ±.
* **ExecutionContext** â†’ Interceptor ve handlerâ€™lar arasÄ±nda ortak veri paylaÅŸÄ±mÄ±na yarayan baÄŸlam.
* **Cross-cutting concerns** â†’ Validation, logging, authorization gibi uygulamanÄ±n farklÄ± noktalarÄ±nda tekrar eden ortak gereksinimler.
* **WeightAttribute** â†’ Interceptor sÄ±rasÄ±nÄ± belirlemek iÃ§in kullanÄ±lan aÄŸÄ±rlÄ±k niteliÄŸi.
* **Ambient data** â†’ Pipeline boyunca taÅŸÄ±nan ek baÄŸlam bilgileri (Ã¶r. UserId, CorrelationId).
