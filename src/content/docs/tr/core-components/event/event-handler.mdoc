---
title: Event Handlerâ€™lar
description: Ergosfareâ€™de IEventMediator kullanarak event handlerâ€™larÄ±n nasÄ±l implemente edilip Ã§aÄŸrÄ±lacaÄŸÄ±nÄ± Ã¶ÄŸrenin.
---


## Event Handler Nedir?

Bir **event handler**, eventâ€™leri iÅŸler ve aÅŸaÄŸÄ±dakileri implemente eder:

- `IEventHandler<TEvent>` â€” **fire-and-forget** tÃ¼rÃ¼ndeki eventâ€™ler iÃ§in.

Eventâ€™ler sistemde **gerÃ§ekleÅŸmiÅŸ bir ÅŸeyi** temsil eder. DeÄŸer dÃ¶ndÃ¼rmezler ve **reaktif iÅŸleme** amaÃ§lÄ±dÄ±r.  

> âš¡ Ergosfareâ€™de bir nesne **`IEvent` arayÃ¼zÃ¼nÃ¼ implement ederse**, otomatik olarak **event olarak iÅŸlenir** ve `IEventMediator` Ã¼zerinden publish edilebilir.  
> âš¡ Ancak, **eventâ€™ler POCO (C#) veya POJO (Java) sÄ±nÄ±flarÄ± olarak da tanÄ±mlanabilir**. Bu sayede, domain katmanÄ±nda **Ergosfare baÄŸÄ±mlÄ±lÄ±ÄŸÄ± gerekmez**, ve domain model saf kalÄ±r.  

> âš¡ Handlerâ€™larÄ±n Ã§alÄ±ÅŸmasÄ± iÃ§in Event Moduleâ€™e gerek yoktur.  
> Sadece `Ergosfare.Contracts` ve `Ergosfare.Context` eklemeniz yeterlidir.

> âš¡ Command ve Queryâ€™lerden farklÄ± olarak, **eventâ€™ler birden fazla handlerâ€™a sahip olabilir**. Event publish edildiÄŸinde tÃ¼m subscribed handlerâ€™lar Ã§alÄ±ÅŸtÄ±rÄ±lÄ±r.

---

## Event Handler Ã–rneÄŸi

Event:

```csharp
public record OrderCreatedEvent(Guid OrderId, string CustomerId) : IEvent;
```

Handler:

```csharp
using Ergosfare.Contracts;
using Ergosfare.Context;

public sealed class SendOrderConfirmationHandler(
    IEmailService emailService
) : IEventHandler<OrderCreatedEvent>
{
    public async Task Handle(OrderCreatedEvent @event, IExecutionContext context)
    {
        var message = $"Order {@event.OrderId} for customer {@event.CustomerId} has been created.";
        await emailService.SendAsync(@event.CustomerId, "Order Confirmation", message, context.CancellationToken);
    }
}
```

BaÅŸka bir handler eventâ€™i loglayabilir:

```csharp
public sealed class LogOrderCreatedHandler(
    ILogger<LogOrderCreatedHandler> logger
) : IEventHandler<OrderCreatedEvent>
{
    public Task Handle(OrderCreatedEvent @event, IExecutionContext context)
    {
        logger.LogInformation("Order {OrderId} created for {CustomerId}", @event.OrderId, @event.CustomerId);
        return Task.CompletedTask;
    }
}
```

> Event handlerâ€™lar **deÄŸer dÃ¶ndÃ¼rmez**. Ä°ptal desteÄŸi iÃ§in `context.CancellationToken` kullanÄ±n.

---

## Event Handlerâ€™larÄ± Kaydetmek (Opsiyonel)

Handlerâ€™lar baÄŸÄ±msÄ±z var olabilir veya **Event Module** ile DI ve pipeline iÃ§in kaydedilebilir:

```csharp
builder.Services.AddErgosfare(registry =>
{
    registry.AddEventModule(e =>
    {
        e.Register<SendOrderConfirmationHandler>();
        e.Register<LogOrderCreatedHandler>();
        e.Register<LoggingInterceptor<OrderCreatedEvent>>();
    });
});
```

> Aksi takdirde handlerâ€™lar **manuel olarak instantiate edilebilir**, bu birim testlerinde yaygÄ±ndÄ±r.

---

## Minimal Endpoint ile Event Publish Etme

Eventâ€™ler **`IEventMediator`** arayÃ¼zÃ¼ kullanÄ±larak dispatch edilir. Ã–rnek:

```csharp
var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.MapPost("/orders", async (CreateOrderCommand cmd, IEventMediator mediator) =>
{
    // sipariÅŸ oluÅŸturma mantÄ±ÄŸÄ± burada...
    var orderId = Guid.NewGuid();

    await mediator.Publish(new OrderCreatedEvent(orderId, cmd.CustomerId));
    return Results.Ok("Order created and event dispatched");
});

app.Run();
```

> `IPublisher`, kullanÄ±m kolaylÄ±ÄŸÄ± iÃ§in `IEventMediator`â€™in aliasâ€™Ä±dÄ±r.

---

## SÄ±ralÄ± Event YayÄ±nlama

Handlerâ€™larÄ±n **Ã§alÄ±ÅŸma sÄ±rasÄ± Ã¶nemliyse**, `[Weight]` attributeâ€™u ile sÄ±ra belirlenebilir. ArdÄ±ndan `PublishSequentially()` kullanÄ±larak handlerâ€™lar sÄ±rayla Ã§alÄ±ÅŸtÄ±rÄ±lÄ±r:

```csharp
[Weight(10)]
public sealed class FirstHandler : IEventHandler<OrderCreatedEvent> { ... }

[Weight(20)]
public sealed class SecondHandler : IEventHandler<OrderCreatedEvent> { ... }

await mediator.PublishSequentially(new OrderCreatedEvent(orderId, cmd.CustomerId));
```

> Referans: [`WeightAttribute`](https://docs.ergosfare.com/api/Ergosfare.Contracts.WeightAttribute)

---

## Ã–nemli Noktalar

* Event handlerâ€™lar **Event Moduleâ€™e ihtiyaÃ§ duymaz**.
* `Ergosfare.Contracts` + `Ergosfare.Context` handler implementasyonu iÃ§in yeterlidir.
* Eventâ€™ler **fire-and-forget**â€™tir; deÄŸer dÃ¶ndÃ¼rmezler.
* Eventâ€™leri tÃ¼m subscribed handlerâ€™lara dispatch etmek iÃ§in **`IEventMediator`** kullanÄ±n.
* **Bir event tÃ¼rÃ¼ne birden fazla handler** abone olabilir, command ve queryâ€™de olduÄŸu gibi tek handler sÄ±nÄ±rlamasÄ± yoktur.
* Gerekirse `[Weight]` ve `PublishSequentially()` ile handler sÄ±rasÄ±nÄ± kontrol edin.
* Her zaman **`context.CancellationToken`** desteÄŸi saÄŸlayÄ±n.

---

## Sonraki AdÄ±mlar

{% cardgrid %}
{% linkcard title="Execution Context" href="/guides/events/execution-context" /%}
{% linkcard title="Interceptors KullanÄ±mÄ±" href="/guides/interceptors" /%}
{% /cardgrid %}

---

## ğŸ“– SÃ¶zlÃ¼k

| Terim           | AÃ§Ä±klama                                                                           |
| --------------- | ---------------------------------------------------------------------------------- |
| Event           | Sistem veya aboneleri bilgilendiren mesaj / bildirim.                              |
| Handler         | Eventâ€™in iÅŸ mantÄ±ÄŸÄ±nÄ± yÃ¼rÃ¼ten sÄ±nÄ±f.                                               |
| Pre-handler     | Event, handlerâ€™a ulaÅŸmadan Ã¶nce Ã§alÄ±ÅŸan ve onu deÄŸiÅŸtirebilen bileÅŸen.             |
| Fire-and-forget | Eventâ€™in yayÄ±nlandÄ±ktan sonra sonuÃ§ dÃ¶ndÃ¼rmeden Ã§alÄ±ÅŸmasÄ±.                         |
| IEventMediator  | Eventâ€™leri dispatch etmek ve publish etmek iÃ§in kullanÄ±lan arayÃ¼z.                 |
| IPublisher      | `IEventMediator`â€™in aliasâ€™Ä±, event publish iÃ§in alternatif.                        |
| \[Weight]       | Handler sÄ±rasÄ±nÄ± belirlemek iÃ§in kullanÄ±lan attribute.                             |
| POCO            | Plain Old C# Object â€” domain katmanÄ±nda Ergosfare baÄŸÄ±mlÄ±lÄ±ÄŸÄ± olmayan basit sÄ±nÄ±f. |
| POJO            | Plain Old Java Object â€” domain katmanÄ±nda baÄŸÄ±msÄ±z basit sÄ±nÄ±f.                    |

