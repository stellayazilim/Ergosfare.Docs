---
title: Query Handlerâ€™lar
description: Ergosfareâ€™de IQueryMediator kullanarak query handlerâ€™larÄ±n nasÄ±l implement edileceÄŸini ve Ã§aÄŸrÄ±lacaÄŸÄ±nÄ± Ã¶ÄŸrenin.
---

## Query Handler Nedir?

Bir **query handler**, queryâ€™leri iÅŸleyen bileÅŸendir ve ÅŸu arayÃ¼zleri implement eder:

- `IQueryHandler<TQuery, TResult>` â€” **veri dÃ¶ndÃ¼ren** queryâ€™ler iÃ§in.

> âš¡ Handlerâ€™larÄ±n Query Moduleâ€™e sahip olmasÄ± gerekmez.  
> Sadece `Ergosfare.Contracts` ve `Ergosfare.Context` eklemeniz yeterlidir.

---

## Query Handler Ã–rneÄŸi

Query:

```csharp
public record GetCustomerOrdersQuery(string CustomerId) : IQuery<List<OrderDto>>;
````

Handler:

```csharp
using Ergosfare.Contracts;
using Ergosfare.Context;

public sealed class GetCustomerOrdersHandler(
    IOrderRepository repository
) : IQueryHandler<GetCustomerOrdersQuery, List<OrderDto>>
{
    public async Task<List<OrderDto>> Handle(GetCustomerOrdersQuery query, IExecutionContext context)
    {
        var orders = await repository.GetByCustomerAsync(query.CustomerId, context.CancellationToken);
        return orders;
    }
}
```

> Ergosfareâ€™de handlerâ€™lar `Handle` metodunda **CancellationToken** parametresi almaz; her zaman `context.CancellationToken` kullanÄ±n.

---

## Query Handlerâ€™larÄ± Kaydetmek (Opsiyonel)

Handlerâ€™lar baÄŸÄ±msÄ±z var olabilir veya **Query Module** ile DI, pipeline ve interceptor iÃ§in kaydedilebilir:

```csharp
builder.Services.AddErgosfare(registry =>
{
    registry.AddQueryModule(q =>
    {
        q.Register<GetCustomerOrdersHandler>();
        q.Register<LoggingInterceptor<GetCustomerOrdersQuery, List<OrderDto>>>(); 
    });
});
```

> Aksi takdirde handlerâ€™lar **manuel olarak instantiate edilebilir**, bu durum unit testlerde yaygÄ±ndÄ±r.

---

## Minimal Endpoint ile Query Ã‡aÄŸÄ±rma

Queryâ€™ler **`IQueryMediator`** arayÃ¼zÃ¼ ile dispatch edilir. Minimal bir ASP.NET Ã¶rneÄŸi:

```csharp
var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.MapGet("/customers/{id}/orders", async (string id, IQueryMediator mediator) =>
{
    var orders = await mediator.Send(new GetCustomerOrdersQuery(id));
    return Results.Ok(orders);
});

app.Run();
```

---

## Query SonuÃ§larÄ±nÄ± Ä°ÅŸleme

Queryâ€™ler her zaman veri dÃ¶ndÃ¼rÃ¼r. Ã–rnek:

```csharp
public record GetInvoiceQuery(Guid InvoiceId) : IQuery<InvoiceDto>;
```

Handler:

```csharp
public sealed class GetInvoiceHandler(
    IInvoiceRepository repository
) : IQueryHandler<GetInvoiceQuery, InvoiceDto>
{
    public async Task<InvoiceDto> Handle(GetInvoiceQuery query, IExecutionContext context)
    {
        var invoice = await repository.GetAsync(query.InvoiceId, context.CancellationToken);
        if (invoice is null)
            throw new DomainException("Invoice bulunamadÄ±");

        return invoice;
    }
}
```

API Endpoint:

```csharp
app.MapGet("/invoices/{id}", async (Guid id, IQueryMediator mediator) =>
{
    var invoice = await mediator.Send(new GetInvoiceQuery(id));
    return Results.Ok(invoice);
});
```

---

## Ã–nemli Noktalar

* Handlerâ€™larÄ±n **Query Moduleâ€™e ihtiyacÄ± yoktur**.
* `Ergosfare.Contracts` + `Ergosfare.Context` handler implementasyonu iÃ§in yeterlidir.
* Her zaman `context.CancellationToken` ile CancellationToken desteÄŸi saÄŸlayÄ±n.
* Queryâ€™ler **sadece okunabilir** olmalÄ±; stateâ€™i deÄŸiÅŸtirmeyin.
* Queryâ€™leri dispatch etmek ve sonuÃ§ dÃ¶ndÃ¼rmek iÃ§in **`IQueryMediator`** kullanÄ±n.

---

## Sonraki AdÄ±mlar

{% cardgrid %}
{% linkcard title="Execution Context" href="/guides/queries/execution-context" /%}
{% linkcard title="Interceptor KullanÄ±mÄ±" href="/guides/interceptors" /%}
{% /cardgrid %}

---

## ğŸ“– SÃ¶zlÃ¼k

| Terim            | AÃ§Ä±klama                                                               |
| ---------------- | ---------------------------------------------------------------------- |
| Query            | Veri almak iÃ§in yapÄ±lan talep; yan etkisi yoktur.                      |
| Handler          | Queryâ€™in iÅŸ mantÄ±ÄŸÄ±nÄ± yÃ¼rÃ¼ten sÄ±nÄ±f.                                   |
| Pre-handler      | Query, handlerâ€™a ulaÅŸmadan Ã¶nce Ã§alÄ±ÅŸan ve onu deÄŸiÅŸtirebilen bileÅŸen. |
| Immutable        | OluÅŸturulduktan sonra deÄŸiÅŸtirilemeyen nesne.                          |
| Mutable          | YaÅŸam dÃ¶ngÃ¼sÃ¼ sÄ±rasÄ±nda deÄŸiÅŸtirilebilen nesne.                        |
| Request/Response | Queryâ€™nin bir sonuÃ§ dÃ¶ndÃ¼rmesini ifade eder.                           |
| IQueryMediator   | Queryâ€™leri dispatch etmek ve execute etmek iÃ§in kullanÄ±lan arayÃ¼z.     |

