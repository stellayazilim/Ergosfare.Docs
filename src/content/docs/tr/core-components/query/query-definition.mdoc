---
title: Query OluÅŸturma
description: Ergosfareâ€™de query tanÄ±mlamayÄ± Ã¶ÄŸrenin.
---

## Query Nedir?

Ergosfareâ€™de Queryâ€™ler, **veri talebini temsil eder**, durum deÄŸiÅŸtirme niyetini deÄŸil.  
Bir query, `Ergosfare.Contracts` iÃ§indeki **`IQuery<TResult>` arayÃ¼zÃ¼nÃ¼ implemente eden herhangi bir tiptir**.

> âš¡ Query tanÄ±mlamak iÃ§in Query Moduleâ€™e ihtiyacÄ±nÄ±z yoktur. Sadece `Ergosfare.Contracts` eklemeniz yeterlidir.  
> âš¡ Bir nesne **`IQuery<TResult>` arayÃ¼zÃ¼nÃ¼ implement ederse**, otomatik olarak **query olarak iÅŸlenir** ve `ICommandMediator` Ã¼zerinden Ã§alÄ±ÅŸtÄ±rÄ±labilir.  

---

### Ã–nemli Noktalar

{% prose %}
* Queryâ€™ler, **veri okuma veya alma** iÅŸlemleri iÃ§in kullanÄ±lÄ±r; yan etkileri yoktur.
* Queryâ€™ler **class, record veya struct** olarak tanÄ±mlanabilir.
* Queryâ€™ler, veri Ã§ekmek iÃ§in gerekli tÃ¼m bilgileri taÅŸÄ±r.
* Queryâ€™ler **hafif** olmalÄ± ve iÅŸ mantÄ±ÄŸÄ± iÃ§ermemelidir.
* Queryâ€™ler genellikle **immutable**â€™dÄ±r; ancak pre-handlerâ€™lar gerekli baÄŸlamÄ± eklemek iÃ§in mutable yapabilir.
* **Single Responsibility:** Her query tek bir, baÄŸÄ±msÄ±z veri talebini temsil eder.
* Ergosfareâ€™de queryâ€™ler **her zaman bir sonuÃ§ dÃ¶ndÃ¼rmesi beklenir**.
* Request/Response: query bir istek ifade eder ve `TResult` tipinde bir sonuÃ§ dÃ¶ndÃ¼rÃ¼r.
{% /prose %}

---

## Query Ã–rneÄŸi

```csharp
using Ergosfare.Contracts;

public record GetCustomerOrdersQuery(string CustomerId) : IQuery<List<OrderDto>>;
````

### Queryâ€™ler VarsayÄ±lan Olarak Immutableâ€™dÄ±r

Queryâ€™ler tasarÄ±m gereÄŸi **immutable**â€™dÄ±r. Bu, query parametrelerinin oluÅŸturulmadan iÅŸlenene kadar tutarlÄ± kalmasÄ±nÄ± saÄŸlar.
Gerekirse queryâ€™ler **pre-handlerâ€™lar aracÄ±lÄ±ÄŸÄ±yla** handlerâ€™lara ulaÅŸmadan Ã¶nce deÄŸiÅŸtirilebilir (Ã¶rneÄŸin tenant, kullanÄ±cÄ± veya ortam baÄŸlamÄ± eklemek iÃ§in).

---

### Mutable vs. Immutable Queryâ€™ler

#### Immutable Query

```csharp
using Ergosfare.Contracts;

public record GetInventoryQuery(string ProductId) : IQuery<InventoryDto>;
```

#### Mutable Query

```csharp
using Ergosfare.Contracts;

public record GetInventoryQuery(string productId) : IQuery<InventoryDto>
{
    public string ProductId { get; set; } = productId;
}
```

#### Mutable Query NotlarÄ±

{% prose %}

* Mutable queryâ€™ler **reference type** olmalÄ±dÄ±r.
* Mutasyon yalnÄ±zca **handler Ã§alÄ±ÅŸmadan Ã¶nce**, genellikle pre-handler iÃ§inde yapÄ±lmalÄ±dÄ±r.
* Immutable yapÄ±, reasoning, test ve tutarlÄ±lÄ±k iÃ§in tercih edilmelidir.
{% /prose %}

---

## Sonraki AdÄ±mlar

{% cardgrid stagger=true %}

{% linkcard title="Query Handler TanÄ±mlama" href="" /%}
{% linkcard title="Queryâ€™leri ICommandMediator ile Ã‡aÄŸÄ±rma" href="" /%}
{% linkcard title="Queryâ€™leri Pre-handler ile ZenginleÅŸtirme" href="" /%}
{% linkcard title="Query SonuÃ§larÄ±nÄ± Ä°ÅŸleme" href="" /%}

{% /cardgrid %}

---

## ğŸ“– SÃ¶zlÃ¼k

| Terim            | AÃ§Ä±klama                                                               |
| ---------------- | ---------------------------------------------------------------------- |
| Query            | Veriyi almak iÃ§in yapÄ±lan talep; yan etkisi yoktur.                    |
| Handler          | Queryâ€™in iÅŸ mantÄ±ÄŸÄ±nÄ± yÃ¼rÃ¼ten sÄ±nÄ±f.                                   |
| Pre-handler      | Query, handlerâ€™a ulaÅŸmadan Ã¶nce Ã§alÄ±ÅŸan ve onu deÄŸiÅŸtirebilen bileÅŸen. |
| Immutable        | OluÅŸturulduktan sonra deÄŸiÅŸtirilemeyen nesne.                          |
| Mutable          | YaÅŸam dÃ¶ngÃ¼sÃ¼ sÄ±rasÄ±nda deÄŸiÅŸtirilebilen nesne.                        |
| Request/Response | Queryâ€™nin bir sonuÃ§ dÃ¶ndÃ¼rmesini ifade eder.                           |
| ICommandMediator | Queryâ€™leri dispatch etmek ve execute etmek iÃ§in kullanÄ±lan arayÃ¼z.     |
