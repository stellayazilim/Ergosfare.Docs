---
title: Command Handlerâ€™lar
description: Ergosfareâ€™de ICommandMediator kullanarak command handlerâ€™larÄ±n nasÄ±l implemente edileceÄŸini ve Ã§aÄŸrÄ±lacaÄŸÄ±nÄ± Ã¶ÄŸrenin.
---

## Command Handler Nedir?

Bir **command handler**, commandâ€™leri iÅŸler ve ÅŸu arayÃ¼zlerden birini implemente eder:

- `ICommandHandler<TCommand>` â€” **sonuÃ§ dÃ¶ndÃ¼rmeyen** commandâ€™ler iÃ§in  
- `ICommandHandler<TCommand, TResult>` â€” **sonuÃ§ dÃ¶ndÃ¼ren** commandâ€™ler iÃ§in

> âš¡ Handlerâ€™lar iÃ§in Command Moduleâ€™Ã¼n varlÄ±ÄŸÄ± zorunlu deÄŸildir.  
> Sadece `Ergosfare.Contracts` ve `Ergosfare.Context` yeterlidir.

---

## SonuÃ§ DÃ¶ndÃ¼rmeyen Handler

Command:

```csharp
public record CancelOrderCommand(Guid OrderId) : ICommand;
```

Handler:

```csharp
using Ergosfare.Contracts;
using Ergosfare.Context;

public sealed class CancelOrderHandler(
    IOrderRepository repository
) : ICommandHandler<CancelOrderCommand>
{
    public async Task Handle(CancelOrderCommand command, IExecutionContext context)
    {
        var order = await repository.GetAsync(command.OrderId, context.CancellationToken);
        if (order is null)
            throw new DomainException("Order not found");

        order.Cancel();
        await repository.UpdateAsync(order, context.CancellationToken);
    }
}
```

> Ergosfareâ€™de handlerâ€™lar `Handle` metodunda **CancellationToken** parametresi almaz; her zaman `context.CancellationToken` kullanÄ±n.

---

## SonuÃ§ DÃ¶ndÃ¼ren Handler

Command:

```csharp
public record CreateOrderCommand(
    Guid CustomerId, List<Product> Items
) : ICommand<bool>;
```

Handler:

```csharp
using Ergosfare.Contracts;
using Ergosfare.Context;

public sealed class CreateOrderHandler(
    IOrderRepository repository
) : ICommandHandler<CreateOrderCommand, bool>
{
    public async Task<bool> Handle(CreateOrderCommand command, IExecutionContext context)
    {
        var order = new Order(command.CustomerId, command.Items);
        await repository.AddAsync(order, context.CancellationToken);
        return true;
    }
}
```

---

## Handlerâ€™larÄ± Kaydetmek (Opsiyonel)

Handlerâ€™lar baÄŸÄ±msÄ±z Ã§alÄ±ÅŸabilir veya DI, pipeline ve interceptor desteÄŸi iÃ§in **Command Module** ile kaydedilebilir:

```csharp
builder.Services.AddErgosfare(registry =>
{
    registry.AddCommandModule(cmd =>
    {
        cmd.Register<CreateOrderHandler>();
        cmd.Register<LoggingInterceptor<CreateOrderCommand, bool>>();
    });
});
```

> Alternatif olarak handlerâ€™lar manuel olarak da oluÅŸturulabilir; bu, Ã¶zellikle unit testâ€™lerde yaygÄ±ndÄ±r.

---

## Minimal Endpoint ile Command Ã‡aÄŸÄ±rma

Commandâ€™ler **`ICommandMediator`** arayÃ¼zÃ¼ kullanÄ±larak dispatch edilir. Minimal bir ASP.NET endpoint Ã¶rneÄŸi:

```csharp
using Ergosfare.Contracts;
using Microsoft.AspNetCore.Builder;

var builder = WebApplication.CreateBuilder(args);

// command handlerâ€™larÄ± Ergosfareâ€™e kaydet
builder.Services.AddErgosfare( o => {
    o.AddCommandModule( b => b.Register<CreateInvoiceHandler>());
});

var app = builder.Build();

app.MapPost("/orders", async (CreateOrderCommand command, ICommandMediator mediator) =>
{
    await mediator.Send(command); // fire-and-forget
    return Results.Ok("Order submitted");
});

app.Run();
```

---

## Return Valueâ€™leri Ä°ÅŸlemek

Commandâ€™ler sonuÃ§ dÃ¶ndÃ¼rebilir; Ã¶rneÄŸin baÅŸarÄ± onayÄ± veya ID dÃ¶ndÃ¼rmek iÃ§in:

```csharp p {% title="Command" %}
public record CreateInvoiceCommand(
    Guid CustomerId, List<LineItem> Lines) : ICommand<Guid>;
```

```csharp p {% title="Handler" %}
public sealed class CreateInvoiceHandler(
    IInvoiceRepository repository
) : ICommandHandler<CreateInvoiceCommand, Guid>
{
    public async Task<Guid> Handle(CreateInvoiceCommand command, IExecutionContext context)
    {
        var invoice = new Invoice(command.CustomerId, command.Lines);
        await repository.AddAsync(invoice, context.CancellationToken);
        return invoice.Id;
    }
}
```

```csharp {% title="API endpoint" %}
app.MapPost("/invoices", async (
    [FromBody]CreateInvoiceCommand cmd, ICommandMediator mediator) =>
{
    Guid invoiceId = await mediator.Send(cmd);
    return Results.Ok(new { InvoiceId = invoiceId });
});
```

---

## Ã–nemli Noktalar

* Handlerâ€™lar **Command Moduleâ€™e baÄŸlÄ± deÄŸildir**.
* `Ergosfare.Contracts` + `Ergosfare.Context` handlerâ€™larÄ± implemente etmek iÃ§in yeterlidir.
* **Thin handler** yaklaÅŸÄ±mÄ±nÄ± tercih edin; aÄŸÄ±r iÅŸ mantÄ±ÄŸÄ±nÄ± domain servislerine devredin.
* Her zaman `CancellationToken` desteÄŸi saÄŸlayÄ±n.
* Return value kullanÄ±mÄ± opsiyoneldir; yalnÄ±zca Ã§aÄŸÄ±ranÄ±n gerÃ§ekten geribildirim ihtiyacÄ± varsa kullanÄ±n.
* Command dispatch iÃ§in **`ICommandMediator`** kullanÄ±n; handlerâ€™larÄ± manuel Ã¶rneklemek yerine.

---

## Sonraki AdÄ±mlar

{% cardgrid %}
{% linkcard title="Execution Context" href="/guides/commands/execution-context" /%}
{% linkcard title="Interceptor KullanÄ±mÄ±" href="/guides/interceptors" /%}
{% /cardgrid %}

---

## ğŸ“– SÃ¶zlÃ¼k

| Terim             | AÃ§Ä±klama                                                                     |
| ----------------- | ---------------------------------------------------------------------------- |
| Command           | Sistem Ã¼zerinde belirli bir iÅŸlemi gerÃ§ekleÅŸtiren mesaj / intent.            |
| Handler           | Commandâ€™in iÅŸ mantÄ±ÄŸÄ±nÄ± yÃ¼rÃ¼ten sÄ±nÄ±f.                                       |
| ICommandMediator  | Commandâ€™leri dispatch etmek iÃ§in kullanÄ±lan arayÃ¼z.                          |
| Pre-handler       | Command, handlerâ€™a ulaÅŸmadan Ã¶nce Ã§alÄ±ÅŸan ve onu deÄŸiÅŸtirebilen bileÅŸen.     |
| Return Value      | Handlerâ€™dan dÃ¶nen sonuÃ§; opsiyonel olabilir.                                 |
| CancellationToken | Ä°ÅŸlemin iptal edilmesini saÄŸlayan token; her zaman context Ã¼zerinden alÄ±nÄ±r. |
