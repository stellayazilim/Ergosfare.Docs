---
title: ExecutionContext
description: Ergosfareâ€™de ExecutionContext ve handlerâ€™lar ile interceptorâ€™lar arasÄ±nda veri paylaÅŸÄ±mÄ±nÄ± Ã¶ÄŸrenin.
---

## ExecutionContext Nedir?

Ergosfareâ€™de `IExecutionContext`, bir komut, sorgu veya olay hattÄ± boyunca taÅŸÄ±nan **iÅŸ parÃ§acÄ±ÄŸÄ± gÃ¼venli (thread-safe) ortam nesnesidir**.  
Bu sayede **veri, CancellationToken ve metadata** interceptorâ€™lar, handlerâ€™lar ve hatta pluginâ€™ler arasÄ±nda **sÄ±kÄ± baÄŸÄ±mlÄ±lÄ±k kurmadan** paylaÅŸÄ±labilir.  

ExecutionContextâ€™i, **tÃ¼m pipeline boyunca paylaÅŸÄ±lan bir veri Ã§antasÄ± (data bag)** gibi dÃ¼ÅŸÃ¼nebilirsiniz.  
Cross-cutting concerns bu sayede gÃ¼venli ÅŸekilde iletiÅŸim kurabilir.

---

## Temel Ã–zellikler

{% prose %}

* **Cancellation DesteÄŸi**  
  Herhangi bir handler veya interceptor iÃ§inde `context.CancellationToken` ile iptal taleplerine yanÄ±t verilebilir.  

* **Ambient Veri PaylaÅŸÄ±mÄ±**  
  `Set` ve `Get` metodlarÄ± ile tenant, kullanÄ±cÄ± ID, correlation ID gibi key-value verileri interceptorâ€™lar ve handlerâ€™lar arasÄ±nda paylaÅŸabilirsiniz.  

* **Thread-Safe YapÄ±**  
  ExecutionContext, eÅŸzamanlÄ± Ã§alÄ±ÅŸan handler ve modÃ¼llerde gÃ¼venle veri taÅŸÄ±mak iÃ§in tasarlanmÄ±ÅŸtÄ±r.  

* **Pipeline TutarlÄ±lÄ±ÄŸÄ±**  
  Bir pre-interceptor tarafÄ±ndan set edilen veri; sonraki interceptorâ€™lar, handler, post-interceptorâ€™lar ve exception-interceptorâ€™lar tarafÄ±ndan okunabilir.  

{% /prose %}

---

## Scoped ExecutionContext OluÅŸturma

Bazen mevcut contextâ€™i etkilemeden, sadece belirli bir kod bloÄŸu iÃ§in geÃ§ici bir context kullanmak isteyebilirsiniz.  
Ergosfare, **scoped ExecutionContext** oluÅŸturmayÄ± destekler:

```csharp
using (var _ = context.CreateScope(new ExecutionContext()))
{
    // Bu scope iÃ§inde context yenisiyle deÄŸiÅŸtirilir
    context.Set("UserId", Guid.NewGuid());

    // Scoped context iÃ§inde Ã§alÄ±ÅŸma yapÄ±lÄ±r
}

// using bloÄŸundan Ã§Ä±kÄ±ldÄ±ÄŸÄ±nda Ã¶nceki context otomatik geri yÃ¼klenir
var originalUserId = context.Get<Guid>("UserId"); // dÄ±ÅŸ contextâ€™ten alÄ±nÄ±r
````

### Scoped Context HakkÄ±nda Ã–nemli Noktalar

{% prose %}

* `CreateScope()` mevcut ExecutionContextâ€™i geÃ§ici bir yenisiyle deÄŸiÅŸtirir.
* Scoped contextâ€™e eklenen veriler dÄ±ÅŸ contextâ€™ten **izole edilir**.
* Scope dispose edildiÄŸinde, Ã¶nceki context otomatik olarak **geri yÃ¼klenir**.
* Bu yaklaÅŸÄ±m, iÃ§ iÃ§e operasyonlar, testler veya geÃ§ici veri override senaryolarÄ± iÃ§in idealdir.

{% /prose %}

---

## ExecutionContext KullanÄ±mÄ±: Ã–rnekler

### Ambient Veri PaylaÅŸÄ±mÄ±

```csharp
// Pre-interceptor
public class UserContextInterceptor<TCommand> : ICommandPreInterceptor<TCommand>
{
    public Task HandleAsync(TCommand command, IExecutionContext context)
    {
        Guid currentUserId = Guid.NewGuid();
        context.Set("UserId", currentUserId);
        return Task.CompletedTask;
    }
}

// Handler iÃ§inde
public class ExampleHandler : ICommandHandler<CreateOrderCommand>
{
    public Task Handle(CreateOrderCommand command, IExecutionContext context)
    {
        var userId = context.Get<Guid>("UserId");
        Console.WriteLine($"SipariÅŸ iÅŸleniyor, kullanÄ±cÄ±: {userId}");
        return Task.CompletedTask;
    }
}
```

> âš¡ Pipelineâ€™daki herhangi bir interceptor veya handler, daha Ã¶nce set edilmiÅŸ ambient veriyi okuyabilir.

---

### CancellationToken KullanÄ±mÄ±

```csharp
public class TimeoutPreInterceptor<TCommand> : ICommandPreInterceptor<TCommand>
{
    public async Task HandleAsync(TCommand command, IExecutionContext context)
    {
        context.CancellationToken.ThrowIfCancellationRequested();
        await Task.Delay(1000, context.CancellationToken);
    }
}
```

---

### Metadata PaylaÅŸÄ±mÄ±

```csharp
public class CorrelationIdInterceptor<TCommand> : ICommandPreInterceptor<TCommand>
{
    public Task HandleAsync(TCommand command, IExecutionContext context)
    {
        context.Set("CorrelationId", Guid.NewGuid());
        return Task.CompletedTask;
    }
}

// Post- veya exception-interceptor iÃ§inde alÄ±nabilir
var correlationId = context.Get<Guid>("CorrelationId");
```

---

## GerÃ§ek DÃ¼nya KullanÄ±m SenaryolarÄ±

{% prose %}

* **KullanÄ±cÄ± / Oturum Bilgisi** â€” KullanÄ±cÄ± ID, tenant ID veya roller pipeline boyunca paylaÅŸÄ±labilir.
* **Correlation / Tracing** â€” Servisler ve loglar arasÄ±nda mesaj takibi iÃ§in Correlation ID Ã¼retilebilir.
* **Rate Limiting / Throttling** â€” Pre-interceptorâ€™lar arasÄ±nda sayaÃ§ veya limit bilgisi paylaÅŸÄ±labilir.
* **Hata YÃ¶netimi** â€” Exception-interceptorâ€™lar, loglama veya retry senaryolarÄ± iÃ§in Ã¶nceden set edilmiÅŸ bilgilere eriÅŸebilir.
* **Scoped Operasyonlar** â€” Ä°Ã§ iÃ§e operasyonlar veya testlerde `CreateScope()` ile geÃ§ici context kullanÄ±labilir.
* **Plugin Ä°letiÅŸimi** â€” Pluginâ€™ler birbirine sÄ±kÄ± baÄŸlanmadan Ã§alÄ±ÅŸma zamanÄ± verisi paylaÅŸabilir.

{% /prose %}

---

## ExecutionContext MetodlarÄ±

{% prose %}

* `T Get<T>(string key)` â€” Daha Ã¶nce saklanan bir deÄŸeri geri dÃ¶ndÃ¼rÃ¼r.
* `void Set<T>(string key, T value)` â€” Bir deÄŸeri context iÃ§inde saklar.
* `CancellationToken CancellationToken` â€” Pipeline yÃ¼rÃ¼tmesi iÃ§in iptal tokenâ€™Ä±na eriÅŸim saÄŸlar.
* `IDisposable CreateScope(IExecutionContext newContext)` â€” GeÃ§ici bir context ile scope oluÅŸturur, dispose edildiÄŸinde eski context geri yÃ¼klenir.

{% /prose %}

> âš¡ ExecutionContext **global bir store deÄŸildir** â€” her mesaj pipelineâ€™Ä± iÃ§in ayrÄ± oluÅŸur. Scoped context kullanarak dÄ±ÅŸ contextâ€™i etkilemeden geÃ§ici override yapÄ±labilir.

---

## Derin Not: EÅŸzamanlÄ±lÄ±k ve GÃ¼venlik

{% prose %}

* Her `IExecutionContext` **thread-safe** olup interceptor, handler ve pluginâ€™lerde eÅŸzamanlÄ± gÃ¼venle kullanÄ±labilir.
* Birden fazla interceptor veya plugin aynÄ± context iÃ§inde veri okuyup yazabilir, race condition olmadan.
* Scoped context, geÃ§ici override imkÃ¢nÄ± sunar ve eski contextâ€™in doÄŸru ÅŸekilde geri yÃ¼klenmesini garanti eder.
* Static/global state kullanmaktan kaÃ§Ä±nÄ±n â€” pipelineâ€™a Ã¶zel veri yayÄ±lÄ±mÄ± iÃ§in daima ExecutionContextâ€™i tercih edin.

{% /prose %}

---

## Ã–zet Tablo: ExecutionContext Ne SaÄŸlar?

| Ã–zellik              | AÃ§Ä±klama                                                                   |
| -------------------- | -------------------------------------------------------------------------- |
| Ambient Data         | Pipeline adÄ±mlarÄ± arasÄ±nda key-value paylaÅŸÄ±mÄ±                             |
| CancellationToken    | Handler ve interceptorâ€™lar arasÄ±nda iptal desteÄŸi                          |
| Scoped Context       | Nested operasyonlar veya testler iÃ§in geÃ§ici context override              |
| Pipeline TutarlÄ±lÄ±ÄŸÄ± | Veri pre-, post-, exception-interceptorâ€™lar ve handler tarafÄ±ndan eriÅŸilir |
| Thread-Safety        | EÅŸzamanlÄ± pipeline yÃ¼rÃ¼tmeleri iÃ§in gÃ¼venli                                |

---

## Sonraki AdÄ±mlar

{% cardgrid stagger=true %}
{% linkcard title="Pre-Interceptors" href="/guides/cross-cutting-concerns/pre-interceptors" /%}
{% linkcard title="Post-Interceptors" href="/guides/cross-cutting-concerns/post-interceptors" /%}
{% linkcard title="Exception Interceptors" href="/guides/cross-cutting-concerns/exception-interceptors" /%}
{% linkcard title="Using Attributes" href="/guides/cross-cutting-concerns/attributes" /%}
{% /cardgrid %}

---

## ğŸ“– SÃ¶zlÃ¼k

| Terim                  | AÃ§Ä±klama                                                                                                             |
| ---------------------- | -------------------------------------------------------------------------------------------------------------------- |
| Cross-cutting concerns | UygulamanÄ±n farklÄ± bÃ¶lÃ¼mlerinde tekrar eden ve merkezi yÃ¶netilmesi gereken konular (Ã¶rn: logging, security, caching) |
| ExecutionContext       | Komut/sorgu/olay hattÄ± boyunca taÅŸÄ±nan thread-safe ortam nesnesi                                                     |
| Interceptor            | Pipeline adÄ±mlarÄ±nda devreye girerek ek davranÄ±ÅŸ ekleyen bileÅŸen (pre-, post-, exception)                            |
| Handler                | Komut, sorgu veya olayÄ±n iÅŸ mantÄ±ÄŸÄ±nÄ± Ã§alÄ±ÅŸtÄ±ran sÄ±nÄ±f                                                               |
| Scope                  | Belirli bir kod bloÄŸu iÃ§in oluÅŸturulan geÃ§ici yaÅŸam sÃ¼resi baÄŸlamÄ±                                                   |
| CancellationToken      | .NETâ€™te asenkron iÅŸlemlerin iptal edilmesini saÄŸlayan yapÄ±                                                           |

