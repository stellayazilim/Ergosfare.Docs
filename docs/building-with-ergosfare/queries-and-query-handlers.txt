1:"$Sreact.fragment"
3:I[7555,[],""]
4:I[1295,[],""]
5:I[4873,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","587","static/chunks/app/building-with-ergosfare/queries-and-query-handlers/page-df88ac62c96e222b.js"],"Heading"]
35:I[8393,[],""]
:HL["/_next/static/css/f12d518a328ac330.css","style"]
0:{"P":null,"b":"QgSi4ZllsLhrKSn2T6dDN","p":"","c":["","building-with-ergosfare","queries-and-query-handlers"],"i":false,"f":[[["",{"children":["building-with-ergosfare",{"children":["queries-and-query-handlers",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f12d518a328ac330.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],"$L2"]}],{"children":["building-with-ergosfare",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["queries-and-query-handlers",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[["$","article",null,{"className":"flex h-full flex-col pt-16 pb-10","children":[["$","div",null,{"className":"flex-auto prose dark:prose-invert [html_:where(&>*)]:mx-auto [html_:where(&>*)]:max-w-2xl lg:[html_:where(&>*)]:mx-[calc(50%-min(50%,var(--container-lg)))] lg:[html_:where(&>*)]:max-w-3xl","children":[["$","div",null,{"className":"absolute inset-0 -z-10 mx-0 max-w-none overflow-hidden","children":["$","div",null,{"className":"absolute top-0 left-1/2 -ml-152 h-100 w-325 dark:mask-[linear-gradient(white,transparent)]","children":[["$","div",null,{"className":"absolute inset-0 bg-linear-to-r from-[#36b49f] to-[#DBFF75] mask-[radial-gradient(farthest-side_at_top,white,transparent)] opacity-40 dark:from-[#36b49f]/30 dark:to-[#DBFF75]/30 dark:opacity-100","children":["$","svg",null,{"aria-hidden":"true","className":"absolute inset-x-0 inset-y-[-50%] h-[200%] w-full skew-y-[-18deg] fill-black/40 stroke-black/50 mix-blend-overlay dark:fill-white/2.5 dark:stroke-white/5","children":[["$","defs",null,{"children":["$","pattern",null,{"id":"_S_1_","width":72,"height":56,"patternUnits":"userSpaceOnUse","x":-12,"y":4,"children":["$","path",null,{"d":"M.5 56V.5H72","fill":"none"}]}]}],["$","rect",null,{"width":"100%","height":"100%","strokeWidth":0,"fill":"url(#_S_1_)"}],["$","svg",null,{"x":-12,"y":4,"className":"overflow-visible","children":[["$","rect","4-3",{"strokeWidth":"0","width":73,"height":57,"x":288,"y":168}],["$","rect","2-1",{"strokeWidth":"0","width":73,"height":57,"x":144,"y":56}],["$","rect","7-3",{"strokeWidth":"0","width":73,"height":57,"x":504,"y":168}],["$","rect","10-6",{"strokeWidth":"0","width":73,"height":57,"x":720,"y":336}]]}]]}]}],["$","svg",null,{"viewBox":"0 0 1113 440","aria-hidden":"true","className":"absolute top-0 left-1/2 -ml-76 w-278.25 fill-white blur-[26px] dark:hidden","children":["$","path",null,{"d":"M.016 439.5s-9.5-300 434-300S882.516 20 882.516 20V0h230.004v439.5H.016Z"}]}]]}]}],"\n",["$","$L5",null,{"level":2,"id":"what-is-a-query","children":"What is a Query"}],"\n",["$","p",null,{"children":["In Ergosfare, queries represent ",["$","strong",null,{"children":"read-only operations"}]," â€” requests for information that do ",["$","strong",null,{"children":"not modify system state"}],".",["$","br",null,{}],"\n","They are used to retrieve, project, or transform data without causing side effects."]}],"\n",["$","h3",null,{"children":"Key Characteristics of Queries","id":"key-characteristics","level":3,"anchor":"key-characteristics"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"Queries are read-only: They never change the state of the system."}],"\n",["$","li",null,{"children":"Represent a question: A query models a request for information."}],"\n",["$","li",null,{"children":"Always return data: Queries are always coupled with a result type."}],"\n",["$","li",null,{"children":"Self-contained: Carry all necessary parameters to fetch the requested data."}],"\n",["$","li",null,{"children":"Immutable once created: Ensures the request remains consistent throughout execution."}],"\n",["$","li",null,{"children":["Decoupled from handlers: The query defines ",["$","strong",null,{"children":"what"}]," to fetch, the handler defines ",["$","strong",null,{"children":"how"}]," to fetch it."]}],"\n"]}],"\n",["$","h3",null,{"children":"Key Concepts","id":"key-concepts","level":2}],"\n",["$","ul",null,{"children":["\n","$L6","\n","$L7","\n","$L8","\n","$L9","\n"]}],"\n","$La","\n","$Lb","\n","$Lc","\n","$Ld","\n","$Le","\n","$Lf","\n","$L10","\n","$L11","\n","$L12","\n","$L13","\n","$L14","\n","$L15","\n","$L16","\n","$L17","\n","$L18","\n","$L19","\n","$L1a","\n","$L1b","\n","$L1c","\n","$L1d","\n","$L1e","\n","$L1f","\n","$L20","\n","$L21","\n","$L22","\n","$L23","\n","$L24","\n","$L25","\n","$L26","\n","$L27","\n","$L28","\n","$L29","\n","$L2a","\n","$L2b","\n","$L2c","\n","$L2d","\n","$L2e","\n","$L2f","\n","$L30","\n","$L31"]}],"$L32"]}],null,"$L33"]}],{},null,false]},null,false]},null,false]},null,false],"$L34",false]],"m":"$undefined","G":["$35",[]],"s":false,"S":true}
36:I[1571,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","587","static/chunks/app/building-with-ergosfare/queries-and-query-handlers/page-df88ac62c96e222b.js"],"Code"]
37:I[1571,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","587","static/chunks/app/building-with-ergosfare/queries-and-query-handlers/page-df88ac62c96e222b.js"],"Pre"]
3d:I[6874,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","587","static/chunks/app/building-with-ergosfare/queries-and-query-handlers/page-df88ac62c96e222b.js"],""]
40:I[5225,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","587","static/chunks/app/building-with-ergosfare/queries-and-query-handlers/page-df88ac62c96e222b.js"],"Feedback"]
41:I[9665,[],"OutletBoundary"]
43:I[4911,[],"AsyncMetadataOutlet"]
45:I[9665,[],"ViewportBoundary"]
47:I[9665,[],"MetadataBoundary"]
48:"$Sreact.suspense"
6:["$","li",null,{"children":"Queries are messages: They encapsulate all input data needed to retrieve information."}]
7:["$","li",null,{"language":"txt","children":["Only one type of query interface: ",["$","$L36",null,{"children":"IQuery<TResult>"}],"."]}]
8:["$","li",null,{"language":"txt","children":["Queries are decoupled from their execution: Handlers implement ",["$","$L36",null,{"children":"IQueryHandler<TQuery, TResult>"}],"."]}]
9:["$","li",null,{"children":"Polymorphism and generics: Queries can be derived or generic, supporting flexible read models."}]
a:["$","$L5",null,{"level":2,"id":"how-to-create-a-query","children":"How to Create a Query"}]
b:["$","h3",null,{"children":"Basic Query","id":"basic-query","level":2}]
c:["$","p",null,{"children":"The most basic query returns data of a specified type."}]
d:["$","ul",null,{"children":["\n",["$","li",null,{"language":"txt","children":["Implements ",["$","$L36",null,{"children":"IQuery<TResult>"}],"."]}],"\n",["$","li",null,{"children":"Encapsulates criteria for retrieval."}],"\n",["$","li",null,{"language":"txt","children":["Handled by a ",["$","$L36",null,{"children":"IQueryHandler<TQuery, TResult>"}],"."]}],"\n"]}]
e:["$","p",null,{"children":"Example: Retrieve the mass of a star by ID."}]
38:T570,<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">GetStarMassQuery</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">IQuery</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-keyword)">double</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Guid</span><span style="color: var(--shiki-color-text)"> StarId { </span><span style="color: var(--shiki-token-keyword)">get</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-keyword)">set</span><span style="color: var(--shiki-color-text)">; }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>f:["$","$L37",null,{"language":"cs","code":"public class GetStarMassQuery : IQuery<double>\r\n{\r\n    public Guid StarId { get; set; }\r\n}\n","children":["$","$L36",null,{"className":"language-cs","children":"$38"}],"title":"Query with a result"}]
10:["$","h3",null,{"children":"Derived Query","id":"derived-query","level":2}]
11:["$","p",null,{"children":"A query that specializes a base query to add new filtering or criteria."}]
12:["$","ul",null,{"children":["\n",["$","li",null,{"children":"Supports polymorphism: a handler for the base query can also process derived queries."}],"\n",["$","li",null,{"children":"Promotes reuse and specialization."}],"\n"]}]
13:["$","p",null,{"language":"txt","children":["Example: ",["$","$L36",null,{"children":"GetStarByNameQuery"}]," extends a more generic ",["$","$L36",null,{"children":"GetStarQuery"}],"."]}]
39:Ta32,<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">GetStarQuery</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">IQuery</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Star</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Guid</span><span style="color: var(--shiki-color-text)"> Id { </span><span style="color: var(--shiki-token-keyword)">get</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-keyword)">set</span><span style="color: var(--shiki-color-text)">; }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">GetStarByNameQuery</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">GetStarQuery</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">string</span><span style="color: var(--shiki-color-text)"> Name { </span><span style="color: var(--shiki-token-keyword)">get</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-keyword)">set</span><span style="color: var(--shiki-color-text)">; }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>14:["$","$L37",null,{"language":"cs","code":"public class GetStarQuery : IQuery<Star>\r\n{\r\n    public Guid Id { get; set; }\r\n}\r\n\r\npublic class GetStarByNameQuery : GetStarQuery\r\n{\r\n    public string Name { get; set; }\r\n}\n","children":["$","$L36",null,{"className":"language-cs","children":"$39"}]}]
15:["$","h3",null,{"children":"Generic Query","id":"generic-query","level":2}]
16:["$","p",null,{"children":"A parameterized query that can retrieve multiple related types with a single handler."}]
17:["$","ul",null,{"children":["\n",["$","li",null,{"children":"Defines a reusable query pattern."}],"\n",["$","li",null,{"children":"Handlers can process any type parameter satisfying the constraints."}],"\n"]}]
18:["$","p",null,{"children":"Example: Query different gravity models."}]
3a:T780,<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">record</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">GravityQuery</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">TGravity</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">IQuery</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">TGravity</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">where</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TGravity</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Gravity</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Guid</span><span style="color: var(--shiki-color-text)"> Id { </span><span style="color: var(--shiki-token-keyword)">get</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-keyword)">init</span><span style="color: var(--shiki-color-text)">; }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>19:["$","$L37",null,{"language":"cs","code":"public record GravityQuery<TGravity> : IQuery<TGravity> where TGravity : Gravity\r\n{\r\n    public Guid Id { get; init; }\r\n}\n","children":["$","$L36",null,{"className":"language-cs","children":"$3a"}],"title":"Generic Query"}]
1a:["$","$L5",null,{"level":2,"id":"what-is-a-query-handler","children":"What is a Query Handler"}]
1b:["$","p",null,{"children":["A query handler is responsible for retrieving and returning data requested by a query.\r\nWhile a query describes ",["$","strong",null,{"children":"what information is needed"}],", the handler defines ",["$","strong",null,{"children":"how that information is fetched"}],"."]}]
1c:["$","h3",null,{"children":"Key Characteristics of Query Handlers","id":"key-characteristics-of-query-handlers","level":3,"anchor":"key-characteristics-of-query-handlers"}]
1d:["$","ul",null,{"children":["\n",["$","li",null,{"children":"Processes queries: They execute retrieval logic based on query data."}],"\n",["$","li",null,{"children":"Always return data: Query handlers are required to return a result."}],"\n",["$","li",null,{"children":"Type-safe: Strongly typed to a specific query and result type."}],"\n",["$","li",null,{"children":"Polymorphic: Handlers can process derived or generic queries when applicable."}],"\n",["$","li",null,{"children":["Separation of concerns: Queries describe ",["$","strong",null,{"children":"what to retrieve"}],", handlers implement ",["$","strong",null,{"children":"how to retrieve"}],"."]}],"\n"]}]
1e:["$","h3",null,{"children":"Example Concept"}]
1f:["$","ul",null,{"children":["\n",["$","li",null,{"language":"txt","children":["A ",["$","$L36",null,{"children":"GetStarMassQueryHandler"}]," processes ",["$","$L36",null,{"children":"GetStarMassQuery"}]," and returns a ",["$","$L36",null,{"children":"double"}],"."]}],"\n",["$","li",null,{"language":"txt","children":["If ",["$","$L36",null,{"children":"GetStarByNameQuery"}]," extends ",["$","$L36",null,{"children":"GetStarQuery"}],", the same handler could process both via polymorphism."]}],"\n"]}]
20:["$","$L5",null,{"level":2,"id":"how-to-create-a-query-handler","children":"How to Create a Query Handler"}]
21:["$","p",null,{"language":"txt","children":["Query handlers are created by implementing the ",["$","$L36",null,{"children":"IQueryHandler<TQuery, TResult>"}]," interface."]}]
22:["$","h3",null,{"children":"Query Handler Example"}]
3b:Tc0e,<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">GetStarMassQueryHandler</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">IQueryHandler</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">GetStarMassQuery</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">double</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Task</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-keyword)">double</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-function)">HandleAsync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">GetStarMassQuery</span><span style="color: var(--shiki-color-text)"> query</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CancellationToken</span><span style="color: var(--shiki-color-text)"> cancellationToken </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">    {</span></span>
<span><span style="color: var(--shiki-token-comment)">        // Example: look up mass by query.StarId</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Task</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">FromResult</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1.989e30</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// Mass of the Sun in kg</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>23:["$","$L37",null,{"language":"cs","code":"public class GetStarMassQueryHandler : IQueryHandler<GetStarMassQuery, double>\r\n{\r\n    public Task<double> HandleAsync(GetStarMassQuery query, CancellationToken cancellationToken = default)\r\n    {\r\n        // Example: look up mass by query.StarId\r\n        return Task.FromResult(1.989e30); // Mass of the Sun in kg\r\n    }\r\n}\n","children":["$","$L36",null,{"className":"language-cs","children":"$3b"}],"title":"Query Handler"}]
24:["$","h3",null,{"children":"Polymorphic Query Handlers"}]
25:["$","p",null,{"children":"Polymorphic query handlers allow a single handler to process related queries using inheritance or generics."}]
26:["$","h4",null,{"children":"Example: Generic handler for any gravity type"}]
3c:T136f,<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">GravityQueryHandler</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">TGravity</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">IQueryHandler</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">GravityQuery</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">TGravity</span><span style="color: var(--shiki-color-text)">&gt;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TGravity</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">where</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TGravity</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Gravity</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)">()</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Task</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">TGravity</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-function)">HandleAsync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">GravityQuery</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">TGravity</span><span style="color: var(--shiki-color-text)">&gt; query</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CancellationToken</span><span style="color: var(--shiki-color-text)"> cancellationToken </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">    {</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">Console</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">WriteLine</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">$&quot;Retrieving gravity data for: {</span><span style="color: var(--shiki-token-keyword)">typeof</span><span style="color: var(--shiki-token-string-expression)">(</span><span style="color: var(--shiki-token-function)">TGravity</span><span style="color: var(--shiki-token-string-expression)">).</span><span style="color: var(--shiki-token-constant)">Name</span><span style="color: var(--shiki-token-string-expression)">}&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Task</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">FromResult</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TGravity</span><span style="color: var(--shiki-color-text)">());</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>27:["$","$L37",null,{"language":"cs","code":"public class GravityQueryHandler<TGravity> : IQueryHandler<GravityQuery<TGravity>, TGravity>\r\n    where TGravity : Gravity, new()\r\n{\r\n    public Task<TGravity> HandleAsync(GravityQuery<TGravity> query, CancellationToken cancellationToken = default)\r\n    {\r\n        Console.WriteLine($\"Retrieving gravity data for: {typeof(TGravity).Name}\");\r\n        return Task.FromResult(new TGravity());\r\n    }\r\n}\n","children":["$","$L36",null,{"className":"language-cs","children":"$3c"}],"title":"GenericGravityQueryHandler"}]
28:["$","div",null,{"className":"not-prose mt-6 mb-16","children":["Learn how Ergosfare leverages contravariance, covariance, and polymorphism to let your query handlers work seamlessly with base and derived queries. ",["$","$L3d",null,{"className":"inline-flex gap-0.5 justify-center overflow-hidden text-sm font-medium transition rounded-full bg-zinc-900 py-1 px-3 text-white hover:bg-zinc-700 dark:bg-emerald-400/10 dark:text-emerald-400 dark:ring-1 dark:ring-inset dark:ring-emerald-400/20 dark:hover:bg-emerald-400/10 dark:hover:text-emerald-300 dark:hover:ring-emerald-300","href":"/core-concepts/polymorphism","children":[false,["$","p",null,{"children":"For more information see Polymorphism in Ergosfare"}],["$","svg",null,{"viewBox":"0 0 20 20","fill":"none","aria-hidden":"true","className":"mt-0.5 h-5 w-5 -mr-1","children":["$","path",null,{"stroke":"currentColor","strokeLinecap":"round","strokeLinejoin":"round","d":"m11.5 6.5 3 3.5m0 0-3 3.5m3-3.5h-9"}]}]]}]]}]
29:["$","$L5",null,{"level":2,"id":"registering-query-handlers","children":"Registering Query Handlers"}]
2a:["$","p",null,{"children":"Once youâ€™ve created a query handler, you need to tell Ergosfare about it.\r\nJust like commands, you register queries through Microsoft.Extensions.DependencyInjection."}]
2b:["$","p",null,{"children":"To register query handlers, add the following packages to your project:"}]
2c:["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Stella.Ergosfare.Core.*"}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Stella.Ergosfare.Queries"}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Stella.Ergosfare.Queries.Abstractions"}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Stella.Ergosfare.Queries.Extensions.MicrosoftDependencyInjection"}],"\n"]}],"\n"]}]
2d:["$","p",null,{"children":"Then, in your Program.cs or Startup.cs, register the query module and your handlers:"}]
3e:T954,<span><span style="color: var(--shiki-token-constant)">builder</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">Services</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">AddErgosfare</span><span style="color: var(--shiki-color-text)">(options </span><span style="color: var(--shiki-token-keyword)">=&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">AddQueryModule</span><span style="color: var(--shiki-color-text)">(module </span><span style="color: var(--shiki-token-keyword)">=&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">    {</span></span>
<span><span style="color: var(--shiki-token-comment)">        // Register a single command manually</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">Register</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">GetOrdersCommand</span><span style="color: var(--shiki-color-text)">&gt;();</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">        // Or automatically register all query handlers in the current assembly</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">RegisterFromAssembly</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">Assembly</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">GetExecutingAssembly</span><span style="color: var(--shiki-color-text)">());</span></span>
<span><span style="color: var(--shiki-color-text)">    });</span></span>
<span><span style="color: var(--shiki-color-text)">});</span></span>
<span></span>2e:["$","$L37",null,{"language":"cs","code":"builder.Services.AddErgosfare(options =>\r\n{\r\n    options.AddQueryModule(module =>\r\n    {\r\n        // Register a single command manually\r\n        module.Register<GetOrdersCommand>();\r\n\r\n        // Or automatically register all query handlers in the current assembly\r\n        module.RegisterFromAssembly(Assembly.GetExecutingAssembly());\r\n    });\r\n});\n","children":["$","$L36",null,{"className":"language-cs","children":"$3e"}],"title":"program.cs"}]
2f:["$","$L5",null,{"level":2,"id":"dispatching-a-query","children":"Dispatching a Query"}]
30:["$","p",null,{"language":"txt","children":["Once registered, queries can be dispatched using the ",["$","$L36",null,{"children":"IQueryMediator"}],".\r\nThe ",["$","$L36",null,{"children":"IQueryMediator"}]," ensures the correct query handler is invoked and returns the expected result.\r\n",["$","$L36",null,{"children":"IQueryMediator"}]," is automatically available in DI when you add the QueryModule."]}]
3f:T96d,<span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> mediator </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">serviceProvider</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">GetRequiredService</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">IQueryMediator</span><span style="color: var(--shiki-color-text)">&gt;();</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> planet </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">mediator</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">Send</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">GetPlanetByIdQuery</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">Guid</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">NewGuid</span><span style="color: var(--shiki-color-text)">()));</span></span>
<span><span style="color: var(--shiki-token-constant)">Console</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">WriteLine</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">$&quot;Planet found: {</span><span style="color: var(--shiki-token-constant)">planet</span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-token-string-expression)">.</span><span style="color: var(--shiki-token-constant)">Name</span><span style="color: var(--shiki-token-string-expression)">}&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>31:["$","$L37",null,{"language":"cs","code":"var mediator = serviceProvider.GetRequiredService<IQueryMediator>();\r\n\r\nvar planet = await mediator.Send(new GetPlanetByIdQuery(Guid.NewGuid()));\r\nConsole.WriteLine($\"Planet found: {planet?.Name}\");\n","children":["$","$L36",null,{"className":"language-cs","children":"$3f"}],"title":"Dispatching a query"}]
32:["$","footer",null,{"className":"mx-auto mt-16 w-full max-w-2xl lg:max-w-5xl","children":["$","$L40",null,{}]}]
33:["$","$L41",null,{"children":["$L42",["$","$L43",null,{"promise":"$@44"}]]}]
34:["$","$1","h",{"children":[null,[["$","$L45",null,{"children":"$L46"}],null],["$","$L47",null,{"children":["$","div",null,{"hidden":true,"children":["$","$48",null,{"fallback":null,"children":"$L49"}]}]}]]}]
46:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
42:null
4a:I[8175,[],"IconMark"]
44:{"metadata":[["$","title","0",{"children":"Quickstart - Protocol API Reference"}],["$","meta","1",{"name":"description","content":"This guide will help you set up your first Ergosfare project and start using the frameworkâ€™s core features."}],["$","link","2",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","$L4a","3",{}]],"error":null,"digest":"$undefined"}
49:"$44:metadata"
4b:I[881,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","745","static/chunks/745-6a389add5fbaeca1.js","700","static/chunks/700-25c42e0f330635cb.js","316","static/chunks/316-633894f3d37d156e.js","177","static/chunks/app/layout-05050350ec61d2aa.js"],"Providers"]
4c:I[896,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","745","static/chunks/745-6a389add5fbaeca1.js","700","static/chunks/700-25c42e0f330635cb.js","316","static/chunks/316-633894f3d37d156e.js","177","static/chunks/app/layout-05050350ec61d2aa.js"],"Layout"]
2:["$","html",null,{"lang":"en","className":"h-full","suppressHydrationWarning":true,"children":["$","body",null,{"className":"flex min-h-full bg-white antialiased dark:bg-zinc-900","children":["$","$L4b",null,{"children":["$","div",null,{"className":"w-full","children":["$","$L4c",null,{"allSections":{"/":[{"title":"Why Ergosfare?","id":"Why Ergosfare?"},{"title":"Key Characteristics","id":"Key Characteristics"},{"title":"Getting started","id":"Getting started"}],"/groups":[{"title":"The group model","id":"the-group-model"},{"title":"List all groups","id":"list-all-groups","tag":"GET","label":"/v1/groups"},{"title":"Create a group","id":"create-a-group","tag":"POST","label":"/v1/groups"},{"title":"Retrieve a group","id":"retrieve-a-group","tag":"GET","label":"/v1/groups/:id"},{"title":"Update a group","id":"update-a-group","tag":"PUT","label":"/v1/groups/:id"},{"title":"Delete a group","id":"delete-a-group","tag":"DELETE","label":"/v1/groups/:id"}],"/quickstart":[{"title":"Create a .NET 9+ project","id":"create-a-net-9-project"},{"title":"Add Ergosfare to your project","id":"add-ergosfare-to-your-project"},{"title":"Configure Ergosfare in Your Application","id":"configure-ergosfare-in-your-application"},{"title":"Explore the Core Concepts?","id":"explore-the-core-concepts"}],"/building-with-ergosfare/commands-and-command-handlers":[{"title":"What is a Command","id":"what-is-a-Command"},{"title":"How to Create a Command","id":"how-to-create-a-command"},{"title":"What is a Command Handler","id":"what-is-a-command-handler"},{"title":"How to Create a Command Handler","id":"how-to-create-a-command-handler"},{"title":"Registering Command Handlers","id":"registering-command-handlers"},{"title":"Dispatching a Command","id":"dispatching-a-command"}],"/building-with-ergosfare/events-and-event-handlers":[{"title":"What is an Event","id":"what-is-an-event","links":[{"title":"Key Characteristics of Events ","id":"key-characteristics"}]},{"title":"How to Create an Event","id":"how-to-create-an-event"},{"title":"What is an Event Handler","id":"what-is-an-event-handler","links":[{"title":"Key Characteristics of Event Handlers ","id":"key-characteristics-of-event-handlers"}]},{"title":"How to Create an Event Handler","id":"how-to-create-an-event-handler"},{"title":"Registering Event Handlers","id":"registering-event-handlers"},{"title":"Dispatching an Event","id":"dispatching-an-event"}],"/core-concepts/configuration":[{"title":"Basic configuration","id":"basic-configuration"},{"title":"IModule Builder Methods ","id":"imodule-builder-methods"}],"/core-concepts/interceptors":[],"/building-with-ergosfare/queries-and-query-handlers":[{"title":"What is a Query","id":"what-is-a-query"},{"title":"How to Create a Query","id":"how-to-create-a-query"},{"title":"What is a Query Handler","id":"what-is-a-query-handler"},{"title":"How to Create a Query Handler","id":"how-to-create-a-query-handler"},{"title":"Registering Query Handlers","id":"registering-query-handlers"},{"title":"Dispatching a Query","id":"dispatching-a-query"}],"/core-concepts/modules-and-extensions":[{"title":"Shared packages","id":"shared-packages"},{"title":"Core Module","id":"core-module"},{"title":"Command Module","id":"command-module"},{"title":"Query Module","id":"query-module"},{"title":"Event Module","id":"event-module"},{"title":"Hands-On Examples","id":"handls-on-examples"}],"/interceptors/pre-interceptors":[{"title":"Pre-Interceptors in Ergosfare","id":"what-is-a-pre-interceptor"},{"title":"Core Concepts","id":"core-concepts"},{"title":"Module-Specific Pre-Interceptor Interfaces","id":"module-specific-pre-interceptor-interfaces"},{"title":"Examples","id":"examples"},{"title":"Registering Pre-Interceptors","id":"registering-pre-interceptors"}],"/interceptors/post-interceptors":[{"title":"Post-Interceptors in Ergosfare","id":"what-is-a-post-interceptor"},{"title":"Core Concepts","id":"core-concepts"},{"title":"Module-Specific Post-Interceptor Interfaces","id":"module-specific-post-interceptor-interfaces"},{"title":"Examples","id":"examples"},{"title":"Registering Post-Interceptors","id":"registering-post-interceptors"}],"/core-concepts/polymorphism":[{"title":"Polymorphism in Ergosfare ","id":"polymorphism"},{"title":"Generic type support","id":"generic-type-support"}],"/interceptors/what-is-an-interceptor":[{"title":"What is an Interceptor","id":"what-is-an-interceptor"},{"title":"Key Characteristics of Interceptors","id":"key-characteristics-of-interceptors"},{"title":"Types of Interceptors","id":"types-of-interceptors"},{"title":"How Interceptors Work","id":"how-interceptors-work"},{"title":"Example: Pre-Execution Interceptor","id":"example-pre-interceptor"},{"title":"Example: Exception Interceptor","id":"example-exception-interceptor"},{"title":"Usage Scenarios","id":"interceptor-usage-scenarios"}],"/interceptors/exception-interceptors":[{"title":"Exception Interceptors in Ergosfare","id":"what-is-an-exception-interceptor"},{"title":"Core Concepts","id":"core-concepts"},{"title":"Module-Specific Exception Interceptor Interfaces","id":"module-specific-exception-interceptor-interfaces"},{"title":"Examples","id":"examples"},{"title":"Registering Exception Interceptors","id":"registering-exception-interceptors"}]},"children":"$L4d"}]}]}]}]}]
4d:["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","div",null,{"className":"absolute inset-0 -z-10 mx-0 max-w-none overflow-hidden","children":["$","div",null,{"className":"absolute top-0 left-1/2 -ml-152 h-100 w-325 dark:mask-[linear-gradient(white,transparent)]","children":[["$","div",null,{"className":"absolute inset-0 bg-linear-to-r from-[#36b49f] to-[#DBFF75] mask-[radial-gradient(farthest-side_at_top,white,transparent)] opacity-40 dark:from-[#36b49f]/30 dark:to-[#DBFF75]/30 dark:opacity-100","children":["$","svg",null,{"aria-hidden":"true","className":"absolute inset-x-0 inset-y-[-50%] h-[200%] w-full skew-y-[-18deg] fill-black/40 stroke-black/50 mix-blend-overlay dark:fill-white/2.5 dark:stroke-white/5","children":[["$","defs",null,{"children":["$","pattern",null,{"id":"_S_2_","width":72,"height":56,"patternUnits":"userSpaceOnUse","x":-12,"y":4,"children":["$","path",null,{"d":"M.5 56V.5H72","fill":"none"}]}]}],["$","rect",null,{"width":"100%","height":"100%","strokeWidth":0,"fill":"url(#_S_2_)"}],["$","svg",null,{"x":-12,"y":4,"className":"overflow-visible","children":[["$","rect","4-3",{"strokeWidth":"0","width":73,"height":57,"x":288,"y":168}],["$","rect","2-1",{"strokeWidth":"0","width":73,"height":57,"x":144,"y":56}],["$","rect","7-3",{"strokeWidth":"0","width":73,"height":57,"x":504,"y":168}],["$","rect","10-6",{"strokeWidth":"0","width":73,"height":57,"x":720,"y":336}]]}]]}]}],["$","svg",null,{"viewBox":"0 0 1113 440","aria-hidden":"true","className":"absolute top-0 left-1/2 -ml-76 w-278.25 fill-white blur-[26px] dark:hidden","children":["$","path",null,{"d":"M.016 439.5s-9.5-300 434-300S882.516 20 882.516 20V0h230.004v439.5H.016Z"}]}]]}]}],["$","div",null,{"className":"mx-auto flex h-full max-w-xl flex-col items-center justify-center py-16 text-center","children":[["$","p",null,{"className":"text-sm font-semibold text-zinc-900 dark:text-white","children":"404"}],["$","h1",null,{"className":"mt-2 text-2xl font-bold text-zinc-900 dark:text-white","children":"Page not found"}],["$","p",null,{"className":"mt-2 text-base text-zinc-600 dark:text-zinc-400","children":"Sorry, we couldnâ€™t find the page youâ€™re looking for."}],["$","$L3d",null,{"className":"inline-flex gap-0.5 justify-center overflow-hidden text-sm font-medium transition rounded-full bg-zinc-900 py-1 px-3 text-white hover:bg-zinc-700 dark:bg-emerald-400/10 dark:text-emerald-400 dark:ring-1 dark:ring-inset dark:ring-emerald-400/20 dark:hover:bg-emerald-400/10 dark:hover:text-emerald-300 dark:hover:ring-emerald-300 mt-8","href":"/","children":[false,"Back to docs",["$","svg",null,{"viewBox":"0 0 20 20","fill":"none","aria-hidden":"true","className":"mt-0.5 h-5 w-5 -mr-1","children":["$","path",null,{"stroke":"currentColor","strokeLinecap":"round","strokeLinejoin":"round","d":"m11.5 6.5 3 3.5m0 0-3 3.5m3-3.5h-9"}]}]]}]]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]
