1:"$Sreact.fragment"
3:I[7555,[],""]
4:I[1295,[],""]
5:I[4873,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","126","static/chunks/app/building-with-ergosfare/commands-and-command-handlers/page-df88ac62c96e222b.js"],"Heading"]
49:I[8393,[],""]
:HL["/_next/static/css/f12d518a328ac330.css","style"]
0:{"P":null,"b":"QgSi4ZllsLhrKSn2T6dDN","p":"","c":["","building-with-ergosfare","commands-and-command-handlers"],"i":false,"f":[[["",{"children":["building-with-ergosfare",{"children":["commands-and-command-handlers",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f12d518a328ac330.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],"$L2"]}],{"children":["building-with-ergosfare",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["commands-and-command-handlers",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[["$","article",null,{"className":"flex h-full flex-col pt-16 pb-10","children":[["$","div",null,{"className":"flex-auto prose dark:prose-invert [html_:where(&>*)]:mx-auto [html_:where(&>*)]:max-w-2xl lg:[html_:where(&>*)]:mx-[calc(50%-min(50%,var(--container-lg)))] lg:[html_:where(&>*)]:max-w-3xl","children":[["$","div",null,{"className":"absolute inset-0 -z-10 mx-0 max-w-none overflow-hidden","children":["$","div",null,{"className":"absolute top-0 left-1/2 -ml-152 h-100 w-325 dark:mask-[linear-gradient(white,transparent)]","children":[["$","div",null,{"className":"absolute inset-0 bg-linear-to-r from-[#36b49f] to-[#DBFF75] mask-[radial-gradient(farthest-side_at_top,white,transparent)] opacity-40 dark:from-[#36b49f]/30 dark:to-[#DBFF75]/30 dark:opacity-100","children":["$","svg",null,{"aria-hidden":"true","className":"absolute inset-x-0 inset-y-[-50%] h-[200%] w-full skew-y-[-18deg] fill-black/40 stroke-black/50 mix-blend-overlay dark:fill-white/2.5 dark:stroke-white/5","children":[["$","defs",null,{"children":["$","pattern",null,{"id":"_S_1_","width":72,"height":56,"patternUnits":"userSpaceOnUse","x":-12,"y":4,"children":["$","path",null,{"d":"M.5 56V.5H72","fill":"none"}]}]}],["$","rect",null,{"width":"100%","height":"100%","strokeWidth":0,"fill":"url(#_S_1_)"}],["$","svg",null,{"x":-12,"y":4,"className":"overflow-visible","children":[["$","rect","4-3",{"strokeWidth":"0","width":73,"height":57,"x":288,"y":168}],["$","rect","2-1",{"strokeWidth":"0","width":73,"height":57,"x":144,"y":56}],["$","rect","7-3",{"strokeWidth":"0","width":73,"height":57,"x":504,"y":168}],["$","rect","10-6",{"strokeWidth":"0","width":73,"height":57,"x":720,"y":336}]]}]]}]}],["$","svg",null,{"viewBox":"0 0 1113 440","aria-hidden":"true","className":"absolute top-0 left-1/2 -ml-76 w-278.25 fill-white blur-[26px] dark:hidden","children":["$","path",null,{"d":"M.016 439.5s-9.5-300 434-300S882.516 20 882.516 20V0h230.004v439.5H.016Z"}]}]]}]}],"\n",["$","$L5",null,{"level":2,"id":"what-is-a-Command","children":"What is a Command"}],"\n",["$","p",null,{"children":"In Ergosfare, commands represent intent-driven operations — actions that change the state of your system. Commands are the starting point for workflows that perform tasks, trigger side effects, or produce results."}],"\n",["$","h3",null,{"children":"Key Characteristics of Commands","id":"key-characteristics","level":3,"anchor":"key-characteristics"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"Commands are always intended to change the state of the system."}],"\n",["$","li",null,{"children":"Represents Intent or Action, A command models  a request to perform a specific operation."}],"\n",["$","li",null,{"children":"It expresses what should happen, not how."}],"\n",["$","li",null,{"children":"Commands carry all the information required to perform the action."}],"\n",["$","li",null,{"children":"They act as a self-contained message or instruction."}],"\n",["$","li",null,{"children":"Commands are typically immutable once created, ensuring the action’s intent cannot change mid-flight.  (Ergosfare still have ability to modify commands)"}],"\n",["$","li",null,{"children":"Single Responsibility: Each command represents one discrete operation, Avoid bundling multiple unrelated actions into a single command."}],"\n"]}],"\n","$L6","\n","$L7","\n","$L8","\n","$L9","\n","$La","\n","$Lb","\n","$Lc","\n","$Ld","\n","$Le","\n","$Lf","\n","$L10","\n","$L11","\n","$L12","\n","$L13","\n","$L14","\n","$L15","\n","$L16","\n","$L17","\n","$L18","\n","$L19","\n","$L1a","\n","$L1b","\n","$L1c","\n","$L1d","\n","$L1e","\n","$L1f","\n","$L20","\n","$L21","\n","$L22","\n","$L23","\n","$L24","\n","$L25","\n","$L26","\n","$L27","\n","$L28","\n","$L29","\n","$L2a","\n","$L2b","\n","$L2c","\n","$L2d","\n","$L2e","\n","$L2f","\n","$L30","\n","$L31","\n","$L32","\n","$L33","\n","$L34","\n","$L35","\n","$L36","\n","$L37","\n","$L38","\n","$L39","\n","$L3a","\n","$L3b","\n","$L3c","\n","$L3d","\n","$L3e","\n","$L3f","\n","$L40","\n","$L41","\n","$L42","\n","$L43","\n","$L44","\n","$L45"]}],"$L46"]}],null,"$L47"]}],{},null,false]},null,false]},null,false]},null,false],"$L48",false]],"m":"$undefined","G":["$49",[]],"s":false,"S":true}
4a:I[1571,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","126","static/chunks/app/building-with-ergosfare/commands-and-command-handlers/page-df88ac62c96e222b.js"],"Code"]
4b:I[1571,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","126","static/chunks/app/building-with-ergosfare/commands-and-command-handlers/page-df88ac62c96e222b.js"],"Pre"]
55:I[6874,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","126","static/chunks/app/building-with-ergosfare/commands-and-command-handlers/page-df88ac62c96e222b.js"],""]
58:I[5225,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","126","static/chunks/app/building-with-ergosfare/commands-and-command-handlers/page-df88ac62c96e222b.js"],"Feedback"]
59:I[9665,[],"OutletBoundary"]
5b:I[4911,[],"AsyncMetadataOutlet"]
5d:I[9665,[],"ViewportBoundary"]
5f:I[9665,[],"MetadataBoundary"]
60:"$Sreact.suspense"
6:["$","h3",null,{"children":"Key Concepts","id":"key-concepts","level":2}]
7:["$","ul",null,{"children":["\n",["$","li",null,{"children":"Commands are messages: They encapsulate all information needed to perform an action."}],"\n",["$","li",null,{"children":["Two types of commands:","\n",["$","ul",null,{"children":["\n",["$","li",null,{"language":"txt","children":[["$","$L4a",null,{"children":"ICommand;"}]," Commands without return values (fire-and-forget)."]}],"\n",["$","li",null,{"language":"txt","children":[["$","$L4a",null,{"children":"ICommand<TResult>;"}]," Commands with return values (request-response)."]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"language":"txt","children":["Commands are decoupled from handlers: Handlers implement ",["$","$L4a",null,{"children":"ICommandHandler<TCommand>"}]," or ",["$","$L4a",null,{"children":"ICommandHandler<TCommand, TResult>"}]," depending on whether the command produces a result."]}],"\n",["$","li",null,{"children":"Polymorphism and generics: Commands can be derived from base commands or use generic parameters, enabling flexible and reusable workflows."}],"\n"]}]
8:["$","$L5",null,{"level":2,"id":"how-to-create-a-command","children":"How to Create a Command"}]
9:["$","h3",null,{"children":"Command without a result","id":"command-without-a-result","level":2}]
a:["$","p",null,{"children":"A basic command that performs an action but does not return any value."}]
b:["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Implements ICommand."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Encapsulates all information needed to perform the action."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"language":"txt","children":["Handled by a handler implementing ",["$","$L4a",null,{"children":"ICommandHandler<TCommand>"}],"."]}],"\n"]}],"\n"]}]
c:["$","p",null,{"children":"Example: CreateMassCommand represents creating a mass without returning an ID or result."}]
4c:T49e,<span></span>
<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CreateMassCommand</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ICommand</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">string</span><span style="color: var(--shiki-color-text)"> Name { </span><span style="color: var(--shiki-token-keyword)">get</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-keyword)">set</span><span style="color: var(--shiki-color-text)">; }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>d:["$","$L4b",null,{"language":"cs","code":"\r\npublic class CreateMassCommand: ICommand\r\n{\r\n    public string Name { get; set; }\r\n}\n","children":["$","$L4a",null,{"className":"language-cs","children":"$4c"}],"title":"Command without a result"}]
e:["$","h3",null,{"children":"Command with a result","id":"command-with-a-result","level":2}]
f:["$","p",null,{"children":"A command that produces a result after execution."}]
10:["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"language":"txt","children":["Implements ",["$","$L4a",null,{"children":"ICommand<TResult>"}],"."]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"The type parameter TResult specifies the result type returned by the handler."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"language":"txt","children":["Handled by a handler implementing ",["$","$L4a",null,{"children":"ICommandHandler<TCommand, TResult>"}],"."]}],"\n"]}],"\n"]}]
11:["$","p",null,{"language":"txt","children":["Example: ",["$","$L4a",null,{"children":"CreateMassCommand : ICommand<Guid>"}]," returns a GUID of the created mass."]}]
4d:T58d,<span></span>
<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CreateMassCommand</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ICommand</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Guid</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">string</span><span style="color: var(--shiki-color-text)"> Name { </span><span style="color: var(--shiki-token-keyword)">get</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-keyword)">set</span><span style="color: var(--shiki-color-text)">; }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span></span>12:["$","$L4b",null,{"language":"cs","code":"\r\npublic class CreateMassCommand : ICommand<Guid>\r\n{\r\n    public string Name { get; set; }\r\n}\r\n\n","children":["$","$L4a",null,{"className":"language-cs","children":"$4d"}],"title":"Command with a result"}]
13:["$","h3",null,{"children":"Derived Command","id":"derived-command","level":2}]
14:["$","p",null,{"children":"A command that inherits from a base command, adding additional properties or behavior."}]
15:["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Supports polymorphism: handlers for the base command can handle the derived command unless a specific handler exists."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Enables code reuse and specialization without duplicating logic."}],"\n"]}],"\n"]}]
16:["$","p",null,{"language":"txt","children":["Example: ",["$","$L4a",null,{"children":"CreatePlanetCommand"}]," extends ",["$","$L4a",null,{"children":"CreateMassCommand"}]," by adding an ",["$","$L4a",null,{"children":"OrbitRadius"}]," property."]}]
4e:T4f0,<span></span>
<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CreatePlanetCommand</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CreateMassCommand</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">int</span><span style="color: var(--shiki-color-text)"> OrbitRadius { </span><span style="color: var(--shiki-token-keyword)">get</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-keyword)">set</span><span style="color: var(--shiki-color-text)">; }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span></span>17:["$","$L4b",null,{"language":"cs","code":"\r\npublic class CreatePlanetCommand : CreateMassCommand\r\n{\r\n    public int OrbitRadius { get; set; }\r\n}\r\n\n","children":["$","$L4a",null,{"className":"language-cs","children":"$4e"}]}]
18:["$","h3",null,{"children":"Generic Command","id":"generic-command","level":2}]
19:["$","p",null,{"children":"A parameterized command that can handle multiple related types with a single handler."}]
1a:["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Uses generics to define a type-safe, reusable command structure."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"language":"txt","children":["Integrates with handlers implementing ",["$","$L4a",null,{"children":"ICommandHandler<GravityCommand<TGravity>>"}],"."]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Supports generic polymorphism, so new gravity types automatically work with the same handler."}],"\n"]}],"\n"]}]
1b:["$","p",null,{"language":"txt","children":["Example: ",["$","$L4a",null,{"children":"GravityCommand<TGravity>"}]," can represent MassGravityCommand or ArtificialGravityCommand without creating separate handlers for each."]}]
4f:T711,<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">record</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">GravityCommand</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">TGravity</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ICommand</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">where</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TGravity</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Gravity</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TGravity</span><span style="color: var(--shiki-color-text)"> Gravity { </span><span style="color: var(--shiki-token-keyword)">get</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-keyword)">init</span><span style="color: var(--shiki-color-text)">; }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>1c:["$","$L4b",null,{"language":"cs","code":"public record GravityCommand<TGravity> : ICommand where TGravity : Gravity\r\n{\r\n    public TGravity Gravity { get; init; }\r\n}\n","children":["$","$L4a",null,{"className":"language-cs","children":"$4f"}],"title":"Generic Command"}]
1d:["$","$L5",null,{"level":2,"id":"what-is-a-command-handler","children":"What is a Command Handler"}]
1e:["$","p",null,{"children":"A command handler is a dedicated component responsible for executing the logic associated with a command.\r\nWhile a command represents the intent to perform an action, the command handler defines how that action is carried out.\r\nThis separation ensures a clean distinction between the data describing the operation and the logic that executes it."}]
1f:["$","h3",null,{"children":"Key Characteristics of Command Handlers","id":"key-characteristics-of-command-handlers","level":3,"anchor":"key-characteristics-of-command-handlers"}]
20:["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Processes commands: Command handlers receive commands and perform the corresponding state-changing operations."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Type-specific: Handlers are strongly typed to a specific command (or base/derived command), ensuring type-safe execution."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Supports polymorphism: Handlers can process derived commands when designed for a base type, enabling code reuse and flexible dispatching."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Decoupled from command creation: Handlers focus purely on execution, leaving commands as immutable carriers of intent."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Optional result handling: For commands that produce a result, handlers implement interfaces that return the corresponding type."}],"\n"]}],"\n"]}]
21:["$","h3",null,{"children":"Example Concept"}]
22:["$","ul",null,{"children":["\n",["$","li",null,{"children":"A CreateFileCommandHandler processes a CreateFileCommand by implementing the necessary logic to create a file."}],"\n",["$","li",null,{"children":"If a derived command like CreateImageCommand exists, a specialized handler can override the base logic or provide additional behavior."}],"\n"]}]
23:["$","p",null,{"children":"In essence: A command handler is the executor of commands, translating the intent expressed in a command into actual system changes, while maintaining clean separation and type safety."}]
24:["$","$L5",null,{"level":2,"id":"how-to-create-a-command-handler","children":"How to Create a Command Handler"}]
25:["$","p",null,{"children":"Command handlers are responsible for executing the logic associated with a command. When creating a handler, you implement the appropriate interface based on whether your command produces a result or not."}]
26:["$","h3",null,{"children":"Key Points"}]
27:["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Handlers are type-specific: Each handler is strongly typed to the command it handles."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Separation of concerns: The command carries data; the handler contains execution logic."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Supports polymorphism: Handlers can process derived commands if the interface is contravariant."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Optional results: Use a result-typed interface for commands that return a value."}],"\n"]}],"\n"]}]
28:["$","h3",null,{"children":"Command Handler that does not return a result"}]
29:["$","p",null,{"language":"txt","children":["This kind of handler must implement the ",["$","$L4a",null,{"children":"ICommandHandler<TCommand>"}]," interface."]}]
50:Tc99,<span></span>
<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CreateStarCommandHandler</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ICommandHandler</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">CreateStarCommand</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Task</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">HandleAsync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">CreateStarCommand</span><span style="color: var(--shiki-color-text)"> command</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CancellationToken</span><span style="color: var(--shiki-color-text)"> cancellationToken </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">    {</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">Console</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">WriteLine</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">$&quot;Creating star: {</span><span style="color: var(--shiki-token-constant)">command</span><span style="color: var(--shiki-token-string-expression)">.</span><span style="color: var(--shiki-token-constant)">Name</span><span style="color: var(--shiki-token-string-expression)">}&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Task</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">CompletedTask</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span></span>2a:["$","$L4b",null,{"language":"cs","code":"\r\npublic class CreateStarCommandHandler : ICommandHandler<CreateStarCommand>\r\n{\r\n    public Task HandleAsync(CreateStarCommand command, CancellationToken cancellationToken = default)\r\n    {\r\n        Console.WriteLine($\"Creating star: {command.Name}\");\r\n        return Task.CompletedTask;\r\n    }\r\n}\r\n\n","children":["$","$L4a",null,{"className":"language-cs","children":"$50"}],"title":"Command Handler without a result"}]
2b:["$","h4",null,{"children":"Behavior:"}]
2c:["$","ul",null,{"children":["\n",["$","li",null,{"children":"Processes commands in a fire-and-forget style."}],"\n",["$","li",null,{"children":"Can handle CreateStarCommand and any derived commands (e.g., CreateRedGiantCommand) due to contravariance."}],"\n"]}]
2d:["$","h3",null,{"children":"Command Handler that returns a result"}]
2e:["$","p",null,{"language":"txt","children":["If the handler returns a result, it must implement the ",["$","$L4a",null,{"children":"ICommandHandler<TCommand, TResult>"}]," interface."]}]
51:Tfed,<span></span>
<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CreateStarWithIdCommandHandler</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ICommandHandler</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">CreateStarWithIdCommand</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Guid</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Task</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Guid</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-function)">HandleAsync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">CreateStarWithIdCommand</span><span style="color: var(--shiki-color-text)"> command</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CancellationToken</span><span style="color: var(--shiki-color-text)"> cancellationToken </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">    {</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> id </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Guid</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">NewGuid</span><span style="color: var(--shiki-color-text)">();</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">Console</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">WriteLine</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">$&quot;Creating star {</span><span style="color: var(--shiki-token-constant)">command</span><span style="color: var(--shiki-token-string-expression)">.</span><span style="color: var(--shiki-token-constant)">Name</span><span style="color: var(--shiki-token-string-expression)">} with ID {id}&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Task</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">FromResult</span><span style="color: var(--shiki-color-text)">(id);</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span></span>2f:["$","$L4b",null,{"language":"cs","code":"\r\npublic class CreateStarWithIdCommandHandler : ICommandHandler<CreateStarWithIdCommand, Guid>\r\n{\r\n    public Task<Guid> HandleAsync(CreateStarWithIdCommand command, CancellationToken cancellationToken = default)\r\n    {\r\n        var id = Guid.NewGuid();\r\n        Console.WriteLine($\"Creating star {command.Name} with ID {id}\");\r\n        return Task.FromResult(id);\r\n    }\r\n}\r\n\n","children":["$","$L4a",null,{"className":"language-cs","children":"$51"}],"title":"Command Handler with a result"}]
30:["$","h4",null,{"children":"Behavior:"}]
31:["$","ul",null,{"children":["\n",["$","li",null,{"children":"Processes commands and returns a result (e.g., the ID of the created star)."}],"\n",["$","li",null,{"children":"Can handle CreateStarWithIdCommand and any derived commands due to contravariance. even if CreateStarWithIdCommand casted its base type."}],"\n"]}]
32:["$","h3",null,{"children":"Polymorphic Command Handlers"}]
33:["$","p",null,{"children":"Polymorphic command handlers are handlers that can process multiple related commands through inheritance or generics, enabling flexible, reusable, and type-safe workflows."}]
34:["$","h4",null,{"children":"Key Concepts"}]
35:["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Generic and base-type support: A single handler can handle any command derived from a base type or parameterized generic commands."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Contravariant input: Handlers for a base command type can process derived commands automatically."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Covariant result (if applicable): Handlers returning a result can provide derived result types that satisfy expectations for base result types."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Reduced duplication: One polymorphic handler replaces multiple specialized handlers, while still supporting specialized behavior when needed."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Type safety: Even with polymorphism, the compiler ensures that handlers only process compatible command types."}],"\n"]}],"\n"]}]
36:["$","h4",null,{"children":"Example Concept"}]
37:["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"language":"txt","children":["A ",["$","$L4a",null,{"children":"GravityCommandHandler<TGravity>"}]," can handle ",["$","$L4a",null,{"children":"GravityCommand<MassGravity>"}]," and ",["$","$L4a",null,{"children":"GravityCommand<ArtificialGravity>"}]," using the same code."]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Adding a new type like BlackHoleGravity requires no new handler — the existing generic handler handles it automatically."}],"\n"]}],"\n"]}]
52:T639,<span></span>
<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Gravity</span><span style="color: var(--shiki-color-text)"> { }</span></span>
<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MassGravity</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Gravity</span><span style="color: var(--shiki-color-text)"> { }</span></span>
<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ArtificialGravity</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Gravity</span><span style="color: var(--shiki-color-text)"> { }</span></span>
<span></span>
<span></span>38:["$","$L4b",null,{"language":"cs","code":"\r\npublic class Gravity { }\r\npublic class MassGravity : Gravity { }\r\npublic class ArtificialGravity : Gravity { }\r\n\n","children":["$","$L4a",null,{"className":"language-cs","children":"$52"}],"title":"Gravity types"}]
53:T72d,<span></span>
<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">record</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">GravityCommand</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">TGravity</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ICommand</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">where</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TGravity</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Gravity</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TGravity</span><span style="color: var(--shiki-color-text)"> Gravity { </span><span style="color: var(--shiki-token-keyword)">get</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-keyword)">init</span><span style="color: var(--shiki-color-text)">; }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span></span>39:["$","$L4b",null,{"language":"cs","code":"\r\npublic record GravityCommand<TGravity> : ICommand where TGravity : Gravity\r\n{\r\n    public TGravity Gravity { get; init; }\r\n}\r\n\n","children":["$","$L4a",null,{"className":"language-cs","children":"$53"}],"title":"Generic command for any type of gravity"}]
3a:["$","p",null,{"language":"txt","children":["so we can create a single generic handler to handle all types of ",["$","$L4a",null,{"children":"GravityCommand<TGravity>"}],":"]}]
54:T1069,<span></span>
<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">GravityCommandHandler</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">TGravity</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ICommandHandler</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">GravityCommand</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">TGravity</span><span style="color: var(--shiki-color-text)">&gt;&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">where</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TGravity</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Gravity</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Task</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">HandleAsync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">GravityCommand</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">TGravity</span><span style="color: var(--shiki-color-text)">&gt; command</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CancellationToken</span><span style="color: var(--shiki-color-text)"> cancellationToken </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">    {</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">Console</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">WriteLine</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">$&quot;Processing gravity command for type: {</span><span style="color: var(--shiki-token-keyword)">typeof</span><span style="color: var(--shiki-token-string-expression)">(</span><span style="color: var(--shiki-token-function)">TGravity</span><span style="color: var(--shiki-token-string-expression)">).</span><span style="color: var(--shiki-token-constant)">Name</span><span style="color: var(--shiki-token-string-expression)">}&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Task</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">CompletedTask</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>3b:["$","$L4b",null,{"language":"cs","code":"\r\npublic class GravityCommandHandler<TGravity> : ICommandHandler<GravityCommand<TGravity>>\r\n    where TGravity : Gravity\r\n{\r\n    public Task HandleAsync(GravityCommand<TGravity> command, CancellationToken cancellationToken = default)\r\n    {\r\n        Console.WriteLine($\"Processing gravity command for type: {typeof(TGravity).Name}\");\r\n        return Task.CompletedTask;\r\n    }\r\n}\n","children":["$","$L4a",null,{"className":"language-cs","children":"$54"}],"title":"GenericGravityCommandHandler"}]
3c:["$","div",null,{"className":"not-prose mt-6 mb-16","children":["Learn how Ergosfare leverages contravariance, covariance, and polymorphism to let your handlers work seamlessly with base and derived commands. For more information look at ",["$","$L55",null,{"className":"inline-flex gap-0.5 justify-center overflow-hidden text-sm font-medium transition rounded-full bg-zinc-900 py-1 px-3 text-white hover:bg-zinc-700 dark:bg-emerald-400/10 dark:text-emerald-400 dark:ring-1 dark:ring-inset dark:ring-emerald-400/20 dark:hover:bg-emerald-400/10 dark:hover:text-emerald-300 dark:hover:ring-emerald-300","href":"/core-concepts/polymorphism","children":[false,["$","p",null,{"children":"polymorphism in Ergosfare"}],["$","svg",null,{"viewBox":"0 0 20 20","fill":"none","aria-hidden":"true","className":"mt-0.5 h-5 w-5 -mr-1","children":["$","path",null,{"stroke":"currentColor","strokeLinecap":"round","strokeLinejoin":"round","d":"m11.5 6.5 3 3.5m0 0-3 3.5m3-3.5h-9"}]}]]}]]}]
3d:["$","$L5",null,{"level":2,"id":"registering-command-handlers","children":"Registering Command Handlers"}]
3e:["$","p",null,{"children":"Once you’ve created a command handler, you need to tell Ergosfare about it.\r\nErgosfare integrates with Microsoft.Extensions.DependencyInjection, so you simply register your handlers when configuring your services."}]
3f:["$","p",null,{"language":"txt","children":["To register command handlers to Ergosfare, whithin ",["$","$L4a",null,{"children":"Stella.Ergosfare.Core.*"}],"  you need to add  ",["$","$L4a",null,{"children":"Stella.Ergosfare.Commands"}],", ",["$","$L4a",null,{"children":"Stella.Ergosfare.Commands.Abstractions"}]," and ",["$","$L4a",null,{"children":"Stella.Ergosfare.Commands.Extensions.MicrosoftDependencyInjection"}]," packages to your project."]}]
40:["$","p",null,{"language":"txt","children":["Then, in your ",["$","$L4a",null,{"children":"Program.cs"}]," or ",["$","$L4a",null,{"children":"Startup.cs"}],", you can register the command module and your handlers like this:"]}]
56:T976,<span></span>
<span><span style="color: var(--shiki-token-constant)">builder</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">Services</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">AddErgosfare</span><span style="color: var(--shiki-color-text)">(options </span><span style="color: var(--shiki-token-keyword)">=&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">AddCommandModule</span><span style="color: var(--shiki-color-text)">(module </span><span style="color: var(--shiki-token-keyword)">=&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">    {</span></span>
<span><span style="color: var(--shiki-token-comment)">        // Register a single command manually</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">Register</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">CreateOrderCommand</span><span style="color: var(--shiki-color-text)">&gt;();</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">        // Or automatically register all command handlers in the current assembly</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">RegisterFromAssembly</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">Assembly</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">GetExecutingAssembly</span><span style="color: var(--shiki-color-text)">());</span></span>
<span><span style="color: var(--shiki-color-text)">    });</span></span>
<span><span style="color: var(--shiki-color-text)">});</span></span>
<span></span>
<span></span>41:["$","$L4b",null,{"language":"cs","code":"\r\nbuilder.Services.AddErgosfare(options =>\r\n{\r\n    options.AddCommandModule(module =>\r\n    {\r\n        // Register a single command manually\r\n        module.Register<CreateOrderCommand>();\r\n\r\n        // Or automatically register all command handlers in the current assembly\r\n        module.RegisterFromAssembly(Assembly.GetExecutingAssembly());\r\n    });\r\n});\r\n\n","children":["$","$L4a",null,{"className":"language-cs","children":"$56"}],"title":"Program.cs"}]
42:["$","$L5",null,{"level":2,"id":"dispatching-a-command","children":"Dispatching a Command"}]
43:["$","p",null,{"language":"txt","children":["Once your handlers are registered, you can dispatch commands using the ",["$","$L4a",null,{"children":"ICommandMediator"}],".\r\nThe ",["$","$L4a",null,{"children":"ICommandMediator"}]," ensures the correct handler is resolved and invoked."]}]
44:["$","p",null,{"language":"txt","children":["ICommandMediator is automatically registered in the DI container when you add ",["$","$L4a",null,{"children":"CommandModule"}],", so you can inject it into your services or controllers."]}]
57:T807,<span></span>
<span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> mediator </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">serviceProvider</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">GetRequiredService</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">IMediator</span><span style="color: var(--shiki-color-text)">&gt;();</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> result </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">mediator</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">Send</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CalculateTrajectoryCommand</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;Apollo&quot;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span><span style="color: var(--shiki-token-constant)">Console</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">WriteLine</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">$&quot;Trajectory calculated: {result}&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span></span>45:["$","$L4b",null,{"language":"cs","code":"\r\nvar mediator = serviceProvider.GetRequiredService<IMediator>();\r\n\r\nvar result = await mediator.Send(new CalculateTrajectoryCommand(\"Apollo\"));\r\nConsole.WriteLine($\"Trajectory calculated: {result}\");\r\n\n","children":["$","$L4a",null,{"className":"language-cs","children":"$57"}],"title":"Dispatching a command"}]
46:["$","footer",null,{"className":"mx-auto mt-16 w-full max-w-2xl lg:max-w-5xl","children":["$","$L58",null,{}]}]
47:["$","$L59",null,{"children":["$L5a",["$","$L5b",null,{"promise":"$@5c"}]]}]
48:["$","$1","h",{"children":[null,[["$","$L5d",null,{"children":"$L5e"}],null],["$","$L5f",null,{"children":["$","div",null,{"hidden":true,"children":["$","$60",null,{"fallback":null,"children":"$L61"}]}]}]]}]
5e:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
5a:null
62:I[8175,[],"IconMark"]
5c:{"metadata":[["$","title","0",{"children":"Quickstart - Protocol API Reference"}],["$","meta","1",{"name":"description","content":"his guide will help you set up your first Ergosfare project and start using the framework’s core features."}],["$","link","2",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","$L62","3",{}]],"error":null,"digest":"$undefined"}
61:"$5c:metadata"
63:I[881,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","745","static/chunks/745-6a389add5fbaeca1.js","700","static/chunks/700-25c42e0f330635cb.js","316","static/chunks/316-633894f3d37d156e.js","177","static/chunks/app/layout-05050350ec61d2aa.js"],"Providers"]
64:I[896,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","745","static/chunks/745-6a389add5fbaeca1.js","700","static/chunks/700-25c42e0f330635cb.js","316","static/chunks/316-633894f3d37d156e.js","177","static/chunks/app/layout-05050350ec61d2aa.js"],"Layout"]
2:["$","html",null,{"lang":"en","className":"h-full","suppressHydrationWarning":true,"children":["$","body",null,{"className":"flex min-h-full bg-white antialiased dark:bg-zinc-900","children":["$","$L63",null,{"children":["$","div",null,{"className":"w-full","children":["$","$L64",null,{"allSections":{"/":[{"title":"Why Ergosfare?","id":"Why Ergosfare?"},{"title":"Key Characteristics","id":"Key Characteristics"},{"title":"Getting started","id":"Getting started"}],"/groups":[{"title":"The group model","id":"the-group-model"},{"title":"List all groups","id":"list-all-groups","tag":"GET","label":"/v1/groups"},{"title":"Create a group","id":"create-a-group","tag":"POST","label":"/v1/groups"},{"title":"Retrieve a group","id":"retrieve-a-group","tag":"GET","label":"/v1/groups/:id"},{"title":"Update a group","id":"update-a-group","tag":"PUT","label":"/v1/groups/:id"},{"title":"Delete a group","id":"delete-a-group","tag":"DELETE","label":"/v1/groups/:id"}],"/quickstart":[{"title":"Create a .NET 9+ project","id":"create-a-net-9-project"},{"title":"Add Ergosfare to your project","id":"add-ergosfare-to-your-project"},{"title":"Configure Ergosfare in Your Application","id":"configure-ergosfare-in-your-application"},{"title":"Explore the Core Concepts?","id":"explore-the-core-concepts"}],"/building-with-ergosfare/events-and-event-handlers":[{"title":"What is an Event","id":"what-is-an-event","links":[{"title":"Key Characteristics of Events ","id":"key-characteristics"}]},{"title":"How to Create an Event","id":"how-to-create-an-event"},{"title":"What is an Event Handler","id":"what-is-an-event-handler","links":[{"title":"Key Characteristics of Event Handlers ","id":"key-characteristics-of-event-handlers"}]},{"title":"How to Create an Event Handler","id":"how-to-create-an-event-handler"},{"title":"Registering Event Handlers","id":"registering-event-handlers"},{"title":"Dispatching an Event","id":"dispatching-an-event"}],"/building-with-ergosfare/commands-and-command-handlers":[{"title":"What is a Command","id":"what-is-a-Command"},{"title":"How to Create a Command","id":"how-to-create-a-command"},{"title":"What is a Command Handler","id":"what-is-a-command-handler"},{"title":"How to Create a Command Handler","id":"how-to-create-a-command-handler"},{"title":"Registering Command Handlers","id":"registering-command-handlers"},{"title":"Dispatching a Command","id":"dispatching-a-command"}],"/core-concepts/modules-and-extensions":[{"title":"Shared packages","id":"shared-packages"},{"title":"Core Module","id":"core-module"},{"title":"Command Module","id":"command-module"},{"title":"Query Module","id":"query-module"},{"title":"Event Module","id":"event-module"},{"title":"Hands-On Examples","id":"handls-on-examples"}],"/core-concepts/interceptors":[],"/core-concepts/configuration":[{"title":"Basic configuration","id":"basic-configuration"},{"title":"IModule Builder Methods ","id":"imodule-builder-methods"}],"/core-concepts/polymorphism":[{"title":"Polymorphism in Ergosfare ","id":"polymorphism"},{"title":"Generic type support","id":"generic-type-support"}],"/interceptors/exception-interceptors":[{"title":"Exception Interceptors in Ergosfare","id":"what-is-an-exception-interceptor"},{"title":"Core Concepts","id":"core-concepts"},{"title":"Module-Specific Exception Interceptor Interfaces","id":"module-specific-exception-interceptor-interfaces"},{"title":"Examples","id":"examples"},{"title":"Registering Exception Interceptors","id":"registering-exception-interceptors"}],"/building-with-ergosfare/queries-and-query-handlers":[{"title":"What is a Query","id":"what-is-a-query"},{"title":"How to Create a Query","id":"how-to-create-a-query"},{"title":"What is a Query Handler","id":"what-is-a-query-handler"},{"title":"How to Create a Query Handler","id":"how-to-create-a-query-handler"},{"title":"Registering Query Handlers","id":"registering-query-handlers"},{"title":"Dispatching a Query","id":"dispatching-a-query"}],"/interceptors/post-interceptors":[{"title":"Post-Interceptors in Ergosfare","id":"what-is-a-post-interceptor"},{"title":"Core Concepts","id":"core-concepts"},{"title":"Module-Specific Post-Interceptor Interfaces","id":"module-specific-post-interceptor-interfaces"},{"title":"Examples","id":"examples"},{"title":"Registering Post-Interceptors","id":"registering-post-interceptors"}],"/interceptors/pre-interceptors":[{"title":"Pre-Interceptors in Ergosfare","id":"what-is-a-pre-interceptor"},{"title":"Core Concepts","id":"core-concepts"},{"title":"Module-Specific Pre-Interceptor Interfaces","id":"module-specific-pre-interceptor-interfaces"},{"title":"Examples","id":"examples"},{"title":"Registering Pre-Interceptors","id":"registering-pre-interceptors"}],"/interceptors/what-is-an-interceptor":[{"title":"What is an Interceptor","id":"what-is-an-interceptor"},{"title":"Key Characteristics of Interceptors","id":"key-characteristics-of-interceptors"},{"title":"Types of Interceptors","id":"types-of-interceptors"},{"title":"How Interceptors Work","id":"how-interceptors-work"},{"title":"Example: Pre-Execution Interceptor","id":"example-pre-interceptor"},{"title":"Example: Exception Interceptor","id":"example-exception-interceptor"},{"title":"Usage Scenarios","id":"interceptor-usage-scenarios"}]},"children":"$L65"}]}]}]}]}]
65:["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","div",null,{"className":"absolute inset-0 -z-10 mx-0 max-w-none overflow-hidden","children":["$","div",null,{"className":"absolute top-0 left-1/2 -ml-152 h-100 w-325 dark:mask-[linear-gradient(white,transparent)]","children":[["$","div",null,{"className":"absolute inset-0 bg-linear-to-r from-[#36b49f] to-[#DBFF75] mask-[radial-gradient(farthest-side_at_top,white,transparent)] opacity-40 dark:from-[#36b49f]/30 dark:to-[#DBFF75]/30 dark:opacity-100","children":["$","svg",null,{"aria-hidden":"true","className":"absolute inset-x-0 inset-y-[-50%] h-[200%] w-full skew-y-[-18deg] fill-black/40 stroke-black/50 mix-blend-overlay dark:fill-white/2.5 dark:stroke-white/5","children":[["$","defs",null,{"children":["$","pattern",null,{"id":"_S_2_","width":72,"height":56,"patternUnits":"userSpaceOnUse","x":-12,"y":4,"children":["$","path",null,{"d":"M.5 56V.5H72","fill":"none"}]}]}],["$","rect",null,{"width":"100%","height":"100%","strokeWidth":0,"fill":"url(#_S_2_)"}],["$","svg",null,{"x":-12,"y":4,"className":"overflow-visible","children":[["$","rect","4-3",{"strokeWidth":"0","width":73,"height":57,"x":288,"y":168}],["$","rect","2-1",{"strokeWidth":"0","width":73,"height":57,"x":144,"y":56}],["$","rect","7-3",{"strokeWidth":"0","width":73,"height":57,"x":504,"y":168}],["$","rect","10-6",{"strokeWidth":"0","width":73,"height":57,"x":720,"y":336}]]}]]}]}],["$","svg",null,{"viewBox":"0 0 1113 440","aria-hidden":"true","className":"absolute top-0 left-1/2 -ml-76 w-278.25 fill-white blur-[26px] dark:hidden","children":["$","path",null,{"d":"M.016 439.5s-9.5-300 434-300S882.516 20 882.516 20V0h230.004v439.5H.016Z"}]}]]}]}],["$","div",null,{"className":"mx-auto flex h-full max-w-xl flex-col items-center justify-center py-16 text-center","children":[["$","p",null,{"className":"text-sm font-semibold text-zinc-900 dark:text-white","children":"404"}],["$","h1",null,{"className":"mt-2 text-2xl font-bold text-zinc-900 dark:text-white","children":"Page not found"}],["$","p",null,{"className":"mt-2 text-base text-zinc-600 dark:text-zinc-400","children":"Sorry, we couldn’t find the page you’re looking for."}],["$","$L55",null,{"className":"inline-flex gap-0.5 justify-center overflow-hidden text-sm font-medium transition rounded-full bg-zinc-900 py-1 px-3 text-white hover:bg-zinc-700 dark:bg-emerald-400/10 dark:text-emerald-400 dark:ring-1 dark:ring-inset dark:ring-emerald-400/20 dark:hover:bg-emerald-400/10 dark:hover:text-emerald-300 dark:hover:ring-emerald-300 mt-8","href":"/","children":[false,"Back to docs",["$","svg",null,{"viewBox":"0 0 20 20","fill":"none","aria-hidden":"true","className":"mt-0.5 h-5 w-5 -mr-1","children":["$","path",null,{"stroke":"currentColor","strokeLinecap":"round","strokeLinejoin":"round","d":"m11.5 6.5 3 3.5m0 0-3 3.5m3-3.5h-9"}]}]]}]]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]
