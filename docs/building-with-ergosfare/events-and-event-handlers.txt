1:"$Sreact.fragment"
3:I[7555,[],""]
4:I[1295,[],""]
5:I[4873,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","268","static/chunks/app/building-with-ergosfare/events-and-event-handlers/page-df88ac62c96e222b.js"],"Heading"]
6:I[1571,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","268","static/chunks/app/building-with-ergosfare/events-and-event-handlers/page-df88ac62c96e222b.js"],"Code"]
28:I[8393,[],""]
:HL["/_next/static/css/f12d518a328ac330.css","style"]
0:{"P":null,"b":"QgSi4ZllsLhrKSn2T6dDN","p":"","c":["","building-with-ergosfare","events-and-event-handlers"],"i":false,"f":[[["",{"children":["building-with-ergosfare",{"children":["events-and-event-handlers",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f12d518a328ac330.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],"$L2"]}],{"children":["building-with-ergosfare",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["events-and-event-handlers",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[["$","article",null,{"className":"flex h-full flex-col pt-16 pb-10","children":[["$","div",null,{"className":"flex-auto prose dark:prose-invert [html_:where(&>*)]:mx-auto [html_:where(&>*)]:max-w-2xl lg:[html_:where(&>*)]:mx-[calc(50%-min(50%,var(--container-lg)))] lg:[html_:where(&>*)]:max-w-3xl","children":[["$","div",null,{"className":"absolute inset-0 -z-10 mx-0 max-w-none overflow-hidden","children":["$","div",null,{"className":"absolute top-0 left-1/2 -ml-152 h-100 w-325 dark:mask-[linear-gradient(white,transparent)]","children":[["$","div",null,{"className":"absolute inset-0 bg-linear-to-r from-[#36b49f] to-[#DBFF75] mask-[radial-gradient(farthest-side_at_top,white,transparent)] opacity-40 dark:from-[#36b49f]/30 dark:to-[#DBFF75]/30 dark:opacity-100","children":["$","svg",null,{"aria-hidden":"true","className":"absolute inset-x-0 inset-y-[-50%] h-[200%] w-full skew-y-[-18deg] fill-black/40 stroke-black/50 mix-blend-overlay dark:fill-white/2.5 dark:stroke-white/5","children":[["$","defs",null,{"children":["$","pattern",null,{"id":"_S_1_","width":72,"height":56,"patternUnits":"userSpaceOnUse","x":-12,"y":4,"children":["$","path",null,{"d":"M.5 56V.5H72","fill":"none"}]}]}],["$","rect",null,{"width":"100%","height":"100%","strokeWidth":0,"fill":"url(#_S_1_)"}],["$","svg",null,{"x":-12,"y":4,"className":"overflow-visible","children":[["$","rect","4-3",{"strokeWidth":"0","width":73,"height":57,"x":288,"y":168}],["$","rect","2-1",{"strokeWidth":"0","width":73,"height":57,"x":144,"y":56}],["$","rect","7-3",{"strokeWidth":"0","width":73,"height":57,"x":504,"y":168}],["$","rect","10-6",{"strokeWidth":"0","width":73,"height":57,"x":720,"y":336}]]}]]}]}],["$","svg",null,{"viewBox":"0 0 1113 440","aria-hidden":"true","className":"absolute top-0 left-1/2 -ml-76 w-278.25 fill-white blur-[26px] dark:hidden","children":["$","path",null,{"d":"M.016 439.5s-9.5-300 434-300S882.516 20 882.516 20V0h230.004v439.5H.016Z"}]}]]}]}],"\n",["$","$L5",null,{"level":2,"id":"what-is-an-event","children":"What is an Event"}],"\n",["$","p",null,{"children":["In Ergosfare, ",["$","strong",null,{"children":"events represent something that has happened"}]," in your system.",["$","br",null,{}],"\n","Unlike commands (which express intent to change state), events are ",["$","strong",null,{"children":"facts"}],": they describe state changes that already occurred."]}],"\n",["$","p",null,{"children":"Events are commonly used to notify other parts of the system or external services that something has happened."}],"\n",["$","h3",null,{"children":"Key Characteristics of Events","id":"key-characteristics","level":3,"anchor":"key-characteristics"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["Events represent ",["$","strong",null,{"children":"something that already happened"}],", not an intent."]}],"\n",["$","li",null,{"children":"They are immutable once published — you cannot change history."}],"\n",["$","li",null,{"children":["Events can have ",["$","strong",null,{"children":"multiple subscribers"}]," (unlike commands which have exactly one handler)."]}],"\n",["$","li",null,{"children":"They decouple producers from consumers: the producer doesn’t know (or care) who listens."}],"\n",["$","li",null,{"language":"txt","children":["Events can be ",["$","strong",null,{"children":"explicitly defined"}]," by implementing ",["$","$L6",null,{"children":"IEvent"}],"."]}],"\n","$L7","\n"]}],"\n","$L8","\n","$L9","\n","$La","\n","$Lb","\n","$Lc","\n","$Ld","\n","$Le","\n","$Lf","\n","$L10","\n","$L11","\n","$L12","\n","$L13","\n","$L14","\n","$L15","\n","$L16","\n","$L17","\n","$L18","\n","$L19","\n","$L1a","\n","$L1b","\n","$L1c","\n","$L1d","\n","$L1e","\n","$L1f","\n","$L20","\n","$L21","\n","$L22","\n","$L23","\n","$L24"]}],"$L25"]}],null,"$L26"]}],{},null,false]},null,false]},null,false]},null,false],"$L27",false]],"m":"$undefined","G":["$28",[]],"s":false,"S":true}
29:I[1571,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","268","static/chunks/app/building-with-ergosfare/events-and-event-handlers/page-df88ac62c96e222b.js"],"Pre"]
30:I[5225,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","268","static/chunks/app/building-with-ergosfare/events-and-event-handlers/page-df88ac62c96e222b.js"],"Feedback"]
31:I[9665,[],"OutletBoundary"]
33:I[4911,[],"AsyncMetadataOutlet"]
35:I[9665,[],"ViewportBoundary"]
37:I[9665,[],"MetadataBoundary"]
38:"$Sreact.suspense"
7:["$","li",null,{"children":["Alternatively, you can use ",["$","strong",null,{"children":"plain POCO/POJO events"}]," — Ergosfare allows domain events that don’t depend on Ergosfare abstractions at all."]}]
8:["$","$L5",null,{"level":2,"id":"how-to-create-an-event","children":"How to Create an Event"}]
9:["$","p",null,{"children":"Creating an event is straightforward. You have two options:"}]
a:["$","h3",null,{"language":"txt","children":["Defining an event with ",["$","$L6",null,{"children":"IEvent"}]]}]
2a:Tac5,<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">StarExplodedEvent</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">IEvent</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">string</span><span style="color: var(--shiki-color-text)"> Name { </span><span style="color: var(--shiki-token-keyword)">get</span><span style="color: var(--shiki-color-text)">; }</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">DateTime</span><span style="color: var(--shiki-color-text)"> OccurredAt { </span><span style="color: var(--shiki-token-keyword)">get</span><span style="color: var(--shiki-color-text)">; }</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">StarExplodedEvent</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">string</span><span style="color: var(--shiki-color-text)"> name</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">DateTime</span><span style="color: var(--shiki-color-text)"> occurredAt)</span></span>
<span><span style="color: var(--shiki-color-text)">    {</span></span>
<span><span style="color: var(--shiki-color-text)">        Name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> name;</span></span>
<span><span style="color: var(--shiki-color-text)">        OccurredAt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> occurredAt;</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>b:["$","$L29",null,{"language":"cs","code":"public class StarExplodedEvent : IEvent\r\n{\r\n    public string Name { get; }\r\n    public DateTime OccurredAt { get; }\r\n\r\n    public StarExplodedEvent(string name, DateTime occurredAt)\r\n    {\r\n        Name = name;\r\n        OccurredAt = occurredAt;\r\n    }\r\n}\n","children":["$","$L6",null,{"className":"language-cs","children":"$2a"}],"title":"Defining an event with IEvent"}]
c:["$","h3",null,{"children":"Using a plain POCO/POJO as an event"}]
2b:T5fa,<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">BlackHoleFormed</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">string</span><span style="color: var(--shiki-color-text)"> Galaxy { </span><span style="color: var(--shiki-token-keyword)">get</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-keyword)">set</span><span style="color: var(--shiki-color-text)">; }</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">DateTime</span><span style="color: var(--shiki-color-text)"> OccurredAt { </span><span style="color: var(--shiki-token-keyword)">get</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-keyword)">set</span><span style="color: var(--shiki-color-text)">; }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>d:["$","$L29",null,{"language":"cs","code":"public class BlackHoleFormed\r\n{\r\n    public string Galaxy { get; set; }\r\n    public DateTime OccurredAt { get; set; }\r\n}\n","children":["$","$L6",null,{"className":"language-cs","children":"$2b"}],"title":"Plain event without IEvent"}]
e:["$","p",null,{"children":"👉 Both approaches work in Ergosfare."}]
f:["$","ul",null,{"children":["\n",["$","li",null,{"language":"txt","children":["Use ",["$","$L6",null,{"children":"IEvent"}]," for ",["$","strong",null,{"children":"explicit framework integration"}],"."]}],"\n",["$","li",null,{"children":["Use POCO/POJO events when modeling ",["$","strong",null,{"children":"pure domain events"}]," without referencing Ergosfare."]}],"\n"]}]
10:["$","$L5",null,{"level":2,"id":"what-is-an-event-handler","children":"What is an Event Handler"}]
11:["$","p",null,{"children":["An ",["$","strong",null,{"children":"event handler"}]," is a component that reacts when an event is published.\r\nWhile the event represents a fact, the handler contains the logic of how the system responds to that fact."]}]
12:["$","h3",null,{"children":"Key Characteristics of Event Handlers","id":"key-characteristics-of-event-handlers","level":3,"anchor":"key-characteristics-of-event-handlers"}]
13:["$","ul",null,{"children":["\n",["$","li",null,{"children":"Listens for events and executes side effects in response."}],"\n",["$","li",null,{"children":"Multiple handlers can subscribe to the same event."}],"\n",["$","li",null,{"children":"Strongly typed to a specific event type, ensuring type safety."}],"\n",["$","li",null,{"children":"Decoupled from event creation — handlers don’t influence how or when events are raised."}],"\n",["$","li",null,{"language":"txt","children":["Can react to either ",["$","$L6",null,{"children":"IEvent"}],"-based or plain POCO/POJO events."]}],"\n"]}]
14:["$","$L5",null,{"level":2,"id":"how-to-create-an-event-handler","children":"How to Create an Event Handler"}]
15:["$","p",null,{"language":"txt","children":["Event handlers implement the ",["$","$L6",null,{"children":"IEventHandler<TEvent>"}]," interface."]}]
16:["$","h3",null,{"children":"Example: handling an IEvent-based event"}]
2c:Td79,<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">StarExplodedEventHandler</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">IEventHandler</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">StarExplodedEvent</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Task</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">HandleAsync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">StarExplodedEvent</span><span style="color: var(--shiki-color-text)"> evt</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CancellationToken</span><span style="color: var(--shiki-color-text)"> cancellationToken </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">    {</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">Console</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">WriteLine</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">$&quot;Star {</span><span style="color: var(--shiki-token-constant)">evt</span><span style="color: var(--shiki-token-string-expression)">.</span><span style="color: var(--shiki-token-constant)">Name</span><span style="color: var(--shiki-token-string-expression)">} exploded at {</span><span style="color: var(--shiki-token-constant)">evt</span><span style="color: var(--shiki-token-string-expression)">.</span><span style="color: var(--shiki-token-constant)">OccurredAt</span><span style="color: var(--shiki-token-string-expression)">}!&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Task</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">CompletedTask</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>17:["$","$L29",null,{"language":"cs","code":"public class StarExplodedEventHandler : IEventHandler<StarExplodedEvent>\r\n{\r\n    public Task HandleAsync(StarExplodedEvent evt, CancellationToken cancellationToken = default)\r\n    {\r\n        Console.WriteLine($\"Star {evt.Name} exploded at {evt.OccurredAt}!\");\r\n        return Task.CompletedTask;\r\n    }\r\n}\n","children":["$","$L6",null,{"className":"language-cs","children":"$2c"}],"title":"Event handler for StarExplodedEvent"}]
18:["$","h3",null,{"children":"Example: handling a plain POCO/POJO event"}]
2d:Td82,<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">BlackHoleFormedHandler</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">IEventHandler</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">BlackHoleFormed</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Task</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">HandleAsync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">BlackHoleFormed</span><span style="color: var(--shiki-color-text)"> evt</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CancellationToken</span><span style="color: var(--shiki-color-text)"> cancellationToken </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">    {</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">Console</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">WriteLine</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">$&quot;Black hole formed in galaxy {</span><span style="color: var(--shiki-token-constant)">evt</span><span style="color: var(--shiki-token-string-expression)">.</span><span style="color: var(--shiki-token-constant)">Galaxy</span><span style="color: var(--shiki-token-string-expression)">} at {</span><span style="color: var(--shiki-token-constant)">evt</span><span style="color: var(--shiki-token-string-expression)">.</span><span style="color: var(--shiki-token-constant)">OccurredAt</span><span style="color: var(--shiki-token-string-expression)">}&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Task</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">CompletedTask</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>19:["$","$L29",null,{"language":"cs","code":"public class BlackHoleFormedHandler : IEventHandler<BlackHoleFormed>\r\n{\r\n    public Task HandleAsync(BlackHoleFormed evt, CancellationToken cancellationToken = default)\r\n    {\r\n        Console.WriteLine($\"Black hole formed in galaxy {evt.Galaxy} at {evt.OccurredAt}\");\r\n        return Task.CompletedTask;\r\n    }\r\n}\n","children":["$","$L6",null,{"className":"language-cs","children":"$2d"}],"title":"Event handler for POCO event"}]
1a:["$","$L5",null,{"level":2,"id":"registering-event-handlers","children":"Registering Event Handlers"}]
1b:["$","p",null,{"children":"Once you’ve created event handlers, you must register them with Ergosfare."}]
1c:["$","p",null,{"children":"Add the following packages to your project:"}]
1d:["$","ul",null,{"children":["\n",["$","li",null,{"language":"txt","children":["$","$L6",null,{"children":"Stella.Ergosfare.Core.*"}]}],"\n",["$","li",null,{"language":"txt","children":["$","$L6",null,{"children":"Stella.Ergosfare.Events"}]}],"\n",["$","li",null,{"language":"txt","children":["$","$L6",null,{"children":"Stella.Ergosfare.Events.Abstractions"}]}],"\n",["$","li",null,{"language":"txt","children":["$","$L6",null,{"children":"Stella.Ergosfare.Events.Extensions.MicrosoftDependencyInjection"}]}],"\n"]}]
1e:["$","p",null,{"language":"txt","children":["Then configure in ",["$","$L6",null,{"children":"Program.cs"}],":"]}]
2e:T94b,<span><span style="color: var(--shiki-token-constant)">builder</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">Services</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">AddErgosfare</span><span style="color: var(--shiki-color-text)">(options </span><span style="color: var(--shiki-token-keyword)">=&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">AddEventModule</span><span style="color: var(--shiki-color-text)">(module </span><span style="color: var(--shiki-token-keyword)">=&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">    {</span></span>
<span><span style="color: var(--shiki-token-comment)">        // Register a single event manually</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">Register</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">StarExplodedEvent</span><span style="color: var(--shiki-color-text)">&gt;();</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">        // Or automatically register all event handlers in the assembly</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">RegisterFromAssembly</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">Assembly</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">GetExecutingAssembly</span><span style="color: var(--shiki-color-text)">());</span></span>
<span><span style="color: var(--shiki-color-text)">    });</span></span>
<span><span style="color: var(--shiki-color-text)">});</span></span>
<span></span>1f:["$","$L29",null,{"language":"cs","code":"builder.Services.AddErgosfare(options =>\r\n{\r\n    options.AddEventModule(module =>\r\n    {\r\n        // Register a single event manually\r\n        module.Register<StarExplodedEvent>();\r\n\r\n        // Or automatically register all event handlers in the assembly\r\n        module.RegisterFromAssembly(Assembly.GetExecutingAssembly());\r\n    });\r\n});\n","children":["$","$L6",null,{"className":"language-cs","children":"$2e"}],"title":"Program.cs"}]
20:["$","$L5",null,{"level":2,"id":"dispatching-an-event","children":"Dispatching an Event"}]
21:["$","p",null,{"language":"txt","children":["Once registered, you can publish events using the ",["$","$L6",null,{"children":"IEventMediator"}],".",["$","br",null,{}],"\n","Unlike commands, ",["$","strong",null,{"children":"all matching event handlers"}]," will be invoked."]}]
22:["$","div",null,{"className":"my-6 flex gap-2.5 rounded-2xl border border-emerald-500/20 bg-emerald-50/50 p-4 text-sm/6 text-emerald-900 dark:border-emerald-500/30 dark:bg-emerald-500/5 dark:text-emerald-200 dark:[--tw-prose-links-hover:var(--color-emerald-300)] dark:[--tw-prose-links:var(--color-white)]","children":[["$","svg",null,{"viewBox":"0 0 16 16","aria-hidden":"true","className":"mt-1 h-4 w-4 flex-none fill-emerald-500 stroke-white dark:fill-emerald-200/20 dark:stroke-emerald-200","children":[["$","circle",null,{"cx":"8","cy":"8","r":"8","strokeWidth":"0"}],["$","path",null,{"fill":"none","strokeLinecap":"round","strokeLinejoin":"round","strokeWidth":"1.5","d":"M6.75 7.75h1.5v3.5"}],["$","circle",null,{"cx":"8","cy":"4","r":".5","fill":"none"}]]}],["$","div",null,{"className":"[&>:first-child]:mt-0 [&>:last-child]:mb-0","children":["$","p",null,{"language":"txt","children":[["$","$L6",null,{"children":"IPublisher"}]," is also available as a shorthand alias of ",["$","$L6",null,{"children":"IEventMediator"}],".  You can use either interface interchangeably depending on your style preference."]}]}]]}]
23:["$","p",null,{"language":"txt","children":["Both ",["$","$L6",null,{"children":"IEventMediator"}]," and ",["$","$L6",null,{"children":"IPublisher"}]," are automatically registered in DI when you add the EventModule."]}]
2f:Te77,<span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> mediator </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">serviceProvider</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">GetRequiredService</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">IEventMediator</span><span style="color: var(--shiki-color-text)">&gt;();</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">mediator</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">Publish</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">StarExplodedEvent</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;Betelgeuse&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">DateTime</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">UtcNow</span><span style="color: var(--shiki-color-text)">));</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// or using the shorthand alias</span></span>
<span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> publisher </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">serviceProvider</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">GetRequiredService</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">IPublisher</span><span style="color: var(--shiki-color-text)">&gt;();</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">publisher</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">Publish</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">BlackHoleFormed</span><span style="color: var(--shiki-color-text)"> { Galaxy </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Andromeda&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> OccurredAt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">DateTime</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">UtcNow</span><span style="color: var(--shiki-color-text)"> });</span></span>
<span></span>24:["$","$L29",null,{"language":"cs","code":"var mediator = serviceProvider.GetRequiredService<IEventMediator>();\r\n\r\nawait mediator.Publish(new StarExplodedEvent(\"Betelgeuse\", DateTime.UtcNow));\r\n\r\n// or using the shorthand alias\r\nvar publisher = serviceProvider.GetRequiredService<IPublisher>();\r\n\r\nawait publisher.Publish(new BlackHoleFormed { Galaxy = \"Andromeda\", OccurredAt = DateTime.UtcNow });\n","children":["$","$L6",null,{"className":"language-cs","children":"$2f"}],"title":"Dispatching an event"}]
25:["$","footer",null,{"className":"mx-auto mt-16 w-full max-w-2xl lg:max-w-5xl","children":["$","$L30",null,{}]}]
26:["$","$L31",null,{"children":["$L32",["$","$L33",null,{"promise":"$@34"}]]}]
27:["$","$1","h",{"children":[null,[["$","$L35",null,{"children":"$L36"}],null],["$","$L37",null,{"children":["$","div",null,{"hidden":true,"children":["$","$38",null,{"fallback":null,"children":"$L39"}]}]}]]}]
36:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
32:null
3a:I[8175,[],"IconMark"]
34:{"metadata":[["$","title","0",{"children":"Quickstart - Events - Protocol API Reference"}],["$","meta","1",{"name":"description","content":"This guide will help you set up events in Ergosfare and start building event-driven workflows."}],["$","link","2",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","$L3a","3",{}]],"error":null,"digest":"$undefined"}
39:"$34:metadata"
3b:I[881,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","745","static/chunks/745-6a389add5fbaeca1.js","700","static/chunks/700-25c42e0f330635cb.js","316","static/chunks/316-633894f3d37d156e.js","177","static/chunks/app/layout-05050350ec61d2aa.js"],"Providers"]
3c:I[896,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","745","static/chunks/745-6a389add5fbaeca1.js","700","static/chunks/700-25c42e0f330635cb.js","316","static/chunks/316-633894f3d37d156e.js","177","static/chunks/app/layout-05050350ec61d2aa.js"],"Layout"]
2:["$","html",null,{"lang":"en","className":"h-full","suppressHydrationWarning":true,"children":["$","body",null,{"className":"flex min-h-full bg-white antialiased dark:bg-zinc-900","children":["$","$L3b",null,{"children":["$","div",null,{"className":"w-full","children":["$","$L3c",null,{"allSections":{"/":[{"title":"Why Ergosfare?","id":"Why Ergosfare?"},{"title":"Key Characteristics","id":"Key Characteristics"},{"title":"Getting started","id":"Getting started"}],"/groups":[{"title":"The group model","id":"the-group-model"},{"title":"List all groups","id":"list-all-groups","tag":"GET","label":"/v1/groups"},{"title":"Create a group","id":"create-a-group","tag":"POST","label":"/v1/groups"},{"title":"Retrieve a group","id":"retrieve-a-group","tag":"GET","label":"/v1/groups/:id"},{"title":"Update a group","id":"update-a-group","tag":"PUT","label":"/v1/groups/:id"},{"title":"Delete a group","id":"delete-a-group","tag":"DELETE","label":"/v1/groups/:id"}],"/quickstart":[{"title":"Create a .NET 9+ project","id":"create-a-net-9-project"},{"title":"Add Ergosfare to your project","id":"add-ergosfare-to-your-project"},{"title":"Configure Ergosfare in Your Application","id":"configure-ergosfare-in-your-application"},{"title":"Explore the Core Concepts?","id":"explore-the-core-concepts"}],"/building-with-ergosfare/commands-and-command-handlers":[{"title":"What is a Command","id":"what-is-a-Command"},{"title":"How to Create a Command","id":"how-to-create-a-command"},{"title":"What is a Command Handler","id":"what-is-a-command-handler"},{"title":"How to Create a Command Handler","id":"how-to-create-a-command-handler"},{"title":"Registering Command Handlers","id":"registering-command-handlers"},{"title":"Dispatching a Command","id":"dispatching-a-command"}],"/building-with-ergosfare/events-and-event-handlers":[{"title":"What is an Event","id":"what-is-an-event","links":[{"title":"Key Characteristics of Events ","id":"key-characteristics"}]},{"title":"How to Create an Event","id":"how-to-create-an-event"},{"title":"What is an Event Handler","id":"what-is-an-event-handler","links":[{"title":"Key Characteristics of Event Handlers ","id":"key-characteristics-of-event-handlers"}]},{"title":"How to Create an Event Handler","id":"how-to-create-an-event-handler"},{"title":"Registering Event Handlers","id":"registering-event-handlers"},{"title":"Dispatching an Event","id":"dispatching-an-event"}],"/building-with-ergosfare/queries-and-query-handlers":[{"title":"What is a Query","id":"what-is-a-query"},{"title":"How to Create a Query","id":"how-to-create-a-query"},{"title":"What is a Query Handler","id":"what-is-a-query-handler"},{"title":"How to Create a Query Handler","id":"how-to-create-a-query-handler"},{"title":"Registering Query Handlers","id":"registering-query-handlers"},{"title":"Dispatching a Query","id":"dispatching-a-query"}],"/core-concepts/configuration":[{"title":"Basic configuration","id":"basic-configuration"},{"title":"IModule Builder Methods ","id":"imodule-builder-methods"}],"/core-concepts/polymorphism":[{"title":"Polymorphism in Ergosfare ","id":"polymorphism"},{"title":"Generic type support","id":"generic-type-support"}],"/core-concepts/interceptors":[],"/core-concepts/modules-and-extensions":[{"title":"Shared packages","id":"shared-packages"},{"title":"Core Module","id":"core-module"},{"title":"Command Module","id":"command-module"},{"title":"Query Module","id":"query-module"},{"title":"Event Module","id":"event-module"},{"title":"Hands-On Examples","id":"handls-on-examples"}],"/interceptors/post-interceptors":[{"title":"Post-Interceptors in Ergosfare","id":"what-is-a-post-interceptor"},{"title":"Core Concepts","id":"core-concepts"},{"title":"Module-Specific Post-Interceptor Interfaces","id":"module-specific-post-interceptor-interfaces"},{"title":"Examples","id":"examples"},{"title":"Registering Post-Interceptors","id":"registering-post-interceptors"}],"/interceptors/pre-interceptors":[{"title":"Pre-Interceptors in Ergosfare","id":"what-is-a-pre-interceptor"},{"title":"Core Concepts","id":"core-concepts"},{"title":"Module-Specific Pre-Interceptor Interfaces","id":"module-specific-pre-interceptor-interfaces"},{"title":"Examples","id":"examples"},{"title":"Registering Pre-Interceptors","id":"registering-pre-interceptors"}],"/interceptors/exception-interceptors":[{"title":"Exception Interceptors in Ergosfare","id":"what-is-an-exception-interceptor"},{"title":"Core Concepts","id":"core-concepts"},{"title":"Module-Specific Exception Interceptor Interfaces","id":"module-specific-exception-interceptor-interfaces"},{"title":"Examples","id":"examples"},{"title":"Registering Exception Interceptors","id":"registering-exception-interceptors"}],"/interceptors/what-is-an-interceptor":[{"title":"What is an Interceptor","id":"what-is-an-interceptor"},{"title":"Key Characteristics of Interceptors","id":"key-characteristics-of-interceptors"},{"title":"Types of Interceptors","id":"types-of-interceptors"},{"title":"How Interceptors Work","id":"how-interceptors-work"},{"title":"Example: Pre-Execution Interceptor","id":"example-pre-interceptor"},{"title":"Example: Exception Interceptor","id":"example-exception-interceptor"},{"title":"Usage Scenarios","id":"interceptor-usage-scenarios"}]},"children":"$L3d"}]}]}]}]}]
3e:I[6874,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","268","static/chunks/app/building-with-ergosfare/events-and-event-handlers/page-df88ac62c96e222b.js"],""]
3d:["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","div",null,{"className":"absolute inset-0 -z-10 mx-0 max-w-none overflow-hidden","children":["$","div",null,{"className":"absolute top-0 left-1/2 -ml-152 h-100 w-325 dark:mask-[linear-gradient(white,transparent)]","children":[["$","div",null,{"className":"absolute inset-0 bg-linear-to-r from-[#36b49f] to-[#DBFF75] mask-[radial-gradient(farthest-side_at_top,white,transparent)] opacity-40 dark:from-[#36b49f]/30 dark:to-[#DBFF75]/30 dark:opacity-100","children":["$","svg",null,{"aria-hidden":"true","className":"absolute inset-x-0 inset-y-[-50%] h-[200%] w-full skew-y-[-18deg] fill-black/40 stroke-black/50 mix-blend-overlay dark:fill-white/2.5 dark:stroke-white/5","children":[["$","defs",null,{"children":["$","pattern",null,{"id":"_S_2_","width":72,"height":56,"patternUnits":"userSpaceOnUse","x":-12,"y":4,"children":["$","path",null,{"d":"M.5 56V.5H72","fill":"none"}]}]}],["$","rect",null,{"width":"100%","height":"100%","strokeWidth":0,"fill":"url(#_S_2_)"}],["$","svg",null,{"x":-12,"y":4,"className":"overflow-visible","children":[["$","rect","4-3",{"strokeWidth":"0","width":73,"height":57,"x":288,"y":168}],["$","rect","2-1",{"strokeWidth":"0","width":73,"height":57,"x":144,"y":56}],["$","rect","7-3",{"strokeWidth":"0","width":73,"height":57,"x":504,"y":168}],["$","rect","10-6",{"strokeWidth":"0","width":73,"height":57,"x":720,"y":336}]]}]]}]}],["$","svg",null,{"viewBox":"0 0 1113 440","aria-hidden":"true","className":"absolute top-0 left-1/2 -ml-76 w-278.25 fill-white blur-[26px] dark:hidden","children":["$","path",null,{"d":"M.016 439.5s-9.5-300 434-300S882.516 20 882.516 20V0h230.004v439.5H.016Z"}]}]]}]}],["$","div",null,{"className":"mx-auto flex h-full max-w-xl flex-col items-center justify-center py-16 text-center","children":[["$","p",null,{"className":"text-sm font-semibold text-zinc-900 dark:text-white","children":"404"}],["$","h1",null,{"className":"mt-2 text-2xl font-bold text-zinc-900 dark:text-white","children":"Page not found"}],["$","p",null,{"className":"mt-2 text-base text-zinc-600 dark:text-zinc-400","children":"Sorry, we couldn’t find the page you’re looking for."}],["$","$L3e",null,{"className":"inline-flex gap-0.5 justify-center overflow-hidden text-sm font-medium transition rounded-full bg-zinc-900 py-1 px-3 text-white hover:bg-zinc-700 dark:bg-emerald-400/10 dark:text-emerald-400 dark:ring-1 dark:ring-inset dark:ring-emerald-400/20 dark:hover:bg-emerald-400/10 dark:hover:text-emerald-300 dark:hover:ring-emerald-300 mt-8","href":"/","children":[false,"Back to docs",["$","svg",null,{"viewBox":"0 0 20 20","fill":"none","aria-hidden":"true","className":"mt-0.5 h-5 w-5 -mr-1","children":["$","path",null,{"stroke":"currentColor","strokeLinecap":"round","strokeLinejoin":"round","d":"m11.5 6.5 3 3.5m0 0-3 3.5m3-3.5h-9"}]}]]}]]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]
