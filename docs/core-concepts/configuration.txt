1:"$Sreact.fragment"
3:I[7555,[],""]
4:I[1295,[],""]
5:I[4873,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","603","static/chunks/app/core-concepts/configuration/page-df88ac62c96e222b.js"],"Heading"]
6:I[1571,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","603","static/chunks/app/core-concepts/configuration/page-df88ac62c96e222b.js"],"Pre"]
7:I[1571,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","603","static/chunks/app/core-concepts/configuration/page-df88ac62c96e222b.js"],"Code"]
1d:I[8393,[],""]
:HL["/_next/static/css/f12d518a328ac330.css","style"]
8:Tea2,<span></span>
<span><span style="color: var(--shiki-token-constant)">services</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">AddErgosfare</span><span style="color: var(--shiki-color-text)">(options </span><span style="color: var(--shiki-token-keyword)">=&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">AddCommandModule</span><span style="color: var(--shiki-color-text)">(</span></span>
<span><span style="color: var(--shiki-color-text)">        builder </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> builder</span></span>
<span><span style="color: var(--shiki-color-text)">            .</span><span style="color: var(--shiki-token-function)">RegisterFromAssembly</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">Assembly</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">GetExecutingAssembly</span><span style="color: var(--shiki-color-text)">();</span></span>
<span><span style="color: var(--shiki-color-text)">    );</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">AddQueryModule</span><span style="color: var(--shiki-color-text)">(</span></span>
<span><span style="color: var(--shiki-color-text)">        builder </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">builder</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">RegisterFromAssembly</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">Assembly</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">GetExecutingAssembly</span><span style="color: var(--shiki-color-text)">())</span></span>
<span><span style="color: var(--shiki-color-text)">    );</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">AddEventModule</span><span style="color: var(--shiki-color-text)">(</span></span>
<span><span style="color: var(--shiki-color-text)">        builder </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">builder</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">RegisterFromAssembly</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">Assembly</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">GetExecutingAssembly</span><span style="color: var(--shiki-color-text)">())</span></span>
<span><span style="color: var(--shiki-color-text)">    );</span></span>
<span><span style="color: var(--shiki-color-text)">});</span></span>
<span></span>
<span></span>0:{"P":null,"b":"QgSi4ZllsLhrKSn2T6dDN","p":"","c":["","core-concepts","configuration"],"i":false,"f":[[["",{"children":["core-concepts",{"children":["configuration",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f12d518a328ac330.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],"$L2"]}],{"children":["core-concepts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["configuration",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[["$","article",null,{"className":"flex h-full flex-col pt-16 pb-10","children":[["$","div",null,{"className":"flex-auto prose dark:prose-invert [html_:where(&>*)]:mx-auto [html_:where(&>*)]:max-w-2xl lg:[html_:where(&>*)]:mx-[calc(50%-min(50%,var(--container-lg)))] lg:[html_:where(&>*)]:max-w-3xl","children":[["$","div",null,{"className":"absolute inset-0 -z-10 mx-0 max-w-none overflow-hidden","children":["$","div",null,{"className":"absolute top-0 left-1/2 -ml-152 h-100 w-325 dark:mask-[linear-gradient(white,transparent)]","children":[["$","div",null,{"className":"absolute inset-0 bg-linear-to-r from-[#36b49f] to-[#DBFF75] mask-[radial-gradient(farthest-side_at_top,white,transparent)] opacity-40 dark:from-[#36b49f]/30 dark:to-[#DBFF75]/30 dark:opacity-100","children":["$","svg",null,{"aria-hidden":"true","className":"absolute inset-x-0 inset-y-[-50%] h-[200%] w-full skew-y-[-18deg] fill-black/40 stroke-black/50 mix-blend-overlay dark:fill-white/2.5 dark:stroke-white/5","children":[["$","defs",null,{"children":["$","pattern",null,{"id":"_S_1_","width":72,"height":56,"patternUnits":"userSpaceOnUse","x":-12,"y":4,"children":["$","path",null,{"d":"M.5 56V.5H72","fill":"none"}]}]}],["$","rect",null,{"width":"100%","height":"100%","strokeWidth":0,"fill":"url(#_S_1_)"}],["$","svg",null,{"x":-12,"y":4,"className":"overflow-visible","children":[["$","rect","4-3",{"strokeWidth":"0","width":73,"height":57,"x":288,"y":168}],["$","rect","2-1",{"strokeWidth":"0","width":73,"height":57,"x":144,"y":56}],["$","rect","7-3",{"strokeWidth":"0","width":73,"height":57,"x":504,"y":168}],["$","rect","10-6",{"strokeWidth":"0","width":73,"height":57,"x":720,"y":336}]]}]]}]}],["$","svg",null,{"viewBox":"0 0 1113 440","aria-hidden":"true","className":"absolute top-0 left-1/2 -ml-76 w-278.25 fill-white blur-[26px] dark:hidden","children":["$","path",null,{"d":"M.016 439.5s-9.5-300 434-300S882.516 20 882.516 20V0h230.004v439.5H.016Z"}]}]]}]}],"\n",["$","$L5",null,{"level":2,"id":"basic-configuration","children":"Basic configurations"}],"\n",["$","p",null,{"children":"The Basic Configurations section demonstrates how to set up Ergosfare modules and register your handlers using dependency injection."}],"\n",["$","p",null,{"children":"In this example, the AddErgosfare extension method is used to configure the framework and enable the Command, Query, and Event modules. Each module is configured via a builder of type IModuleBuilder, which provides methods for registering handlers from assemblies, configuring pipelines, or adding custom behavior."}],"\n",["$","$L6",null,{"language":"cs","code":"\r\nservices.AddErgosfare(options =>\r\n{\r\n    \r\n    options.AddCommandModule(\r\n        builder => builder\r\n            .RegisterFromAssembly(Assembly.GetExecutingAssembly();\r\n    );\r\n    options.AddQueryModule(\r\n        builder => builder.RegisterFromAssembly(Assembly.GetExecutingAssembly())\r\n    );\r\n    options.AddEventModule(\r\n        builder => builder.RegisterFromAssembly(Assembly.GetExecutingAssembly())\r\n    );\r\n});\r\n\n","children":["$","$L7",null,{"className":"language-cs","children":"$8"}]}],"\n","$L9","\n","$La","\n","$Lb","\n","$Lc","\n","$Ld","\n","$Le","\n","$Lf","\n","$L10","\n","$L11","\n","$L12","\n","$L13","\n","$L14","\n","$L15","\n","$L16","\n","$L17","\n","$L18","\n","$L19"]}],"$L1a"]}],null,"$L1b"]}],{},null,false]},null,false]},null,false]},null,false],"$L1c",false]],"m":"$undefined","G":["$1d",[]],"s":false,"S":true}
1e:I[5225,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","603","static/chunks/app/core-concepts/configuration/page-df88ac62c96e222b.js"],"Feedback"]
1f:I[9665,[],"OutletBoundary"]
21:I[4911,[],"AsyncMetadataOutlet"]
23:I[9665,[],"ViewportBoundary"]
25:I[9665,[],"MetadataBoundary"]
26:"$Sreact.suspense"
9:["$","h3",null,{"children":"Key points:","id":"key-points"}]
a:["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"options.AddCommandModule(...) â†’ Registers the Command module and its handlers."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"options.AddQueryModule(...) â†’ Registers the Query module and its handlers."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"options.AddEventModule(...) â†’ Registers the Event module and its handlers."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"builder.RegisterFromAssembly(Assembly.GetExecutingAssembly()) â†’ Automatically discovers and registers all handlers (commands, queries, or events) from the specified assembly."}],"\n"]}],"\n"]}]
b:["$","$L5",null,{"level":2,"id":"imodule-builder-methods","children":"IModule Builder Methods"}]
c:["$","p",null,{"children":"The IModuleBuilder interface provides several methods to register handlers in a module, giving you flexible options for wiring up commands, queries, and events."}]
d:["$","h3",null,{"language":"txt","children":["$","$L7",null,{"children":"Register<T>()"}]}]
e:["$","p",null,{"children":"Registers a single handler by its generic type."}]
f:["$","$L6",null,{"language":"cs","code":" builder => builder.Register<MyCommandHandler>();\n","children":["$","$L7",null,{"className":"language-cs","children":"<span><span style=\"color: var(--shiki-color-text)\"> builder </span><span style=\"color: var(--shiki-token-keyword)\">=&gt;</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">builder</span><span style=\"color: var(--shiki-color-text)\">.</span><span style=\"color: var(--shiki-token-function)\">Register</span><span style=\"color: var(--shiki-color-text)\">&lt;</span><span style=\"color: var(--shiki-token-function)\">MyCommandHandler</span><span style=\"color: var(--shiki-color-text)\">&gt;();</span></span>\n<span></span>"}]}]
10:["$","ul",null,{"children":["\n",["$","li",null,{"language":"txt","children":["T must implement the appropriate handler interface such as ",["$","$L7",null,{"children":"ICommandHandler<T>"}],", ",["$","$L7",null,{"children":"IAsyncQueryHandler<T,R>"}],", ",["$","$L7",null,{"children":"IEventHandler<T>"}],", etc."]}],"\n",["$","li",null,{"children":"Useful for registering individual handlers explicitly."}],"\n"]}]
11:["$","h3",null,{"language":"txt","children":["$","$L7",null,{"children":"Register(Type type)"}]}]
12:["$","p",null,{"children":"Registers a handler by providing a Type instance."}]
13:["$","$L6",null,{"language":"cs","code":" builder => builder.Register(typeof(MyCommandHandler));\n","children":["$","$L7",null,{"className":"language-cs","children":"<span><span style=\"color: var(--shiki-color-text)\"> builder </span><span style=\"color: var(--shiki-token-keyword)\">=&gt;</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">builder</span><span style=\"color: var(--shiki-color-text)\">.</span><span style=\"color: var(--shiki-token-function)\">Register</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-keyword)\">typeof</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-function)\">MyCommandHandler</span><span style=\"color: var(--shiki-color-text)\">));</span></span>\n<span></span>"}]}]
14:["$","ul",null,{"children":["\n",["$","li",null,{"children":"Allows dynamic registration when the handler type is determined at runtime."}],"\n",["$","li",null,{"children":"Works with any type that implements a valid handler interface."}],"\n"]}]
15:["$","h3",null,{"language":"txt","children":["$","$L7",null,{"children":"RegisterFromAssembly(Assembly assembly)"}]}]
16:["$","p",null,{"children":"Automatically discovers and registers all handlers from a given assembly."}]
17:["$","$L6",null,{"language":"cs","code":" builder => builder.RegisterFromAssembly(Assembly.GetExecutingAssembly());\n","children":["$","$L7",null,{"className":"language-cs","children":"<span><span style=\"color: var(--shiki-color-text)\"> builder </span><span style=\"color: var(--shiki-token-keyword)\">=&gt;</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-constant)\">builder</span><span style=\"color: var(--shiki-color-text)\">.</span><span style=\"color: var(--shiki-token-function)\">RegisterFromAssembly</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-constant)\">Assembly</span><span style=\"color: var(--shiki-color-text)\">.</span><span style=\"color: var(--shiki-token-function)\">GetExecutingAssembly</span><span style=\"color: var(--shiki-color-text)\">());</span></span>\n<span></span>"}]}]
18:["$","ul",null,{"children":["\n",["$","li",null,{"children":"Scans the specified assembly for all classes implementing handler interfaces."}],"\n",["$","li",null,{"children":"Saves time and reduces boilerplate by batch-registering multiple handlers at once."}],"\n"]}]
19:["$","p",null,{"children":"By understanding and using these methods, you can control how and where handlers are registered, whether you prefer explicit single registrations or assembly-wide automatic discovery."}]
1a:["$","footer",null,{"className":"mx-auto mt-16 w-full max-w-2xl lg:max-w-5xl","children":["$","$L1e",null,{}]}]
1b:["$","$L1f",null,{"children":["$L20",["$","$L21",null,{"promise":"$@22"}]]}]
1c:["$","$1","h",{"children":[null,[["$","$L23",null,{"children":"$L24"}],null],["$","$L25",null,{"children":["$","div",null,{"hidden":true,"children":["$","$26",null,{"fallback":null,"children":"$L27"}]}]}]]}]
24:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
20:null
28:I[8175,[],"IconMark"]
22:{"metadata":[["$","title","0",{"children":"Configure Ergosfare - Protocol API Reference"}],["$","meta","1",{"name":"description","content":"Learn more about how the system is structured and the main building blocks."}],["$","link","2",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","$L28","3",{}]],"error":null,"digest":"$undefined"}
27:"$22:metadata"
29:I[881,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","745","static/chunks/745-6a389add5fbaeca1.js","700","static/chunks/700-25c42e0f330635cb.js","316","static/chunks/316-633894f3d37d156e.js","177","static/chunks/app/layout-05050350ec61d2aa.js"],"Providers"]
2a:I[896,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","745","static/chunks/745-6a389add5fbaeca1.js","700","static/chunks/700-25c42e0f330635cb.js","316","static/chunks/316-633894f3d37d156e.js","177","static/chunks/app/layout-05050350ec61d2aa.js"],"Layout"]
2:["$","html",null,{"lang":"en","className":"h-full","suppressHydrationWarning":true,"children":["$","body",null,{"className":"flex min-h-full bg-white antialiased dark:bg-zinc-900","children":["$","$L29",null,{"children":["$","div",null,{"className":"w-full","children":["$","$L2a",null,{"allSections":{"/":[{"title":"Why Ergosfare?","id":"Why Ergosfare?"},{"title":"Key Characteristics","id":"Key Characteristics"},{"title":"Getting started","id":"Getting started"}],"/quickstart":[{"title":"Create a .NET 9+ project","id":"create-a-net-9-project"},{"title":"Add Ergosfare to your project","id":"add-ergosfare-to-your-project"},{"title":"Configure Ergosfare in Your Application","id":"configure-ergosfare-in-your-application"},{"title":"Explore the Core Concepts?","id":"explore-the-core-concepts"}],"/groups":[{"title":"The group model","id":"the-group-model"},{"title":"List all groups","id":"list-all-groups","tag":"GET","label":"/v1/groups"},{"title":"Create a group","id":"create-a-group","tag":"POST","label":"/v1/groups"},{"title":"Retrieve a group","id":"retrieve-a-group","tag":"GET","label":"/v1/groups/:id"},{"title":"Update a group","id":"update-a-group","tag":"PUT","label":"/v1/groups/:id"},{"title":"Delete a group","id":"delete-a-group","tag":"DELETE","label":"/v1/groups/:id"}],"/core-concepts/configuration":[{"title":"Basic configuration","id":"basic-configuration"},{"title":"IModule Builder Methods ","id":"imodule-builder-methods"}],"/core-concepts/modules-and-extensions":[{"title":"Shared packages","id":"shared-packages"},{"title":"Core Module","id":"core-module"},{"title":"Command Module","id":"command-module"},{"title":"Query Module","id":"query-module"},{"title":"Event Module","id":"event-module"},{"title":"Hands-On Examples","id":"handls-on-examples"}],"/core-concepts/interceptors":[],"/core-concepts/polymorphism":[{"title":"Polymorphism in Ergosfare ","id":"polymorphism"},{"title":"Generic type support","id":"generic-type-support"}],"/building-with-ergosfare/commands-and-command-handlers":[{"title":"What is a Command","id":"what-is-a-Command"},{"title":"How to Create a Command","id":"how-to-create-a-command"},{"title":"What is a Command Handler","id":"what-is-a-command-handler"},{"title":"How to Create a Command Handler","id":"how-to-create-a-command-handler"},{"title":"Registering Command Handlers","id":"registering-command-handlers"},{"title":"Dispatching a Command","id":"dispatching-a-command"}],"/building-with-ergosfare/events-and-event-handlers":[{"title":"What is an Event","id":"what-is-an-event","links":[{"title":"Key Characteristics of Events ","id":"key-characteristics"}]},{"title":"How to Create an Event","id":"how-to-create-an-event"},{"title":"What is an Event Handler","id":"what-is-an-event-handler","links":[{"title":"Key Characteristics of Event Handlers ","id":"key-characteristics-of-event-handlers"}]},{"title":"How to Create an Event Handler","id":"how-to-create-an-event-handler"},{"title":"Registering Event Handlers","id":"registering-event-handlers"},{"title":"Dispatching an Event","id":"dispatching-an-event"}],"/building-with-ergosfare/queries-and-query-handlers":[{"title":"What is a Query","id":"what-is-a-query"},{"title":"How to Create a Query","id":"how-to-create-a-query"},{"title":"What is a Query Handler","id":"what-is-a-query-handler"},{"title":"How to Create a Query Handler","id":"how-to-create-a-query-handler"},{"title":"Registering Query Handlers","id":"registering-query-handlers"},{"title":"Dispatching a Query","id":"dispatching-a-query"}],"/interceptors/exception-interceptors":[{"title":"Exception Interceptors in Ergosfare","id":"what-is-an-exception-interceptor"},{"title":"Core Concepts","id":"core-concepts"},{"title":"Module-Specific Exception Interceptor Interfaces","id":"module-specific-exception-interceptor-interfaces"},{"title":"Examples","id":"examples"},{"title":"Registering Exception Interceptors","id":"registering-exception-interceptors"}],"/interceptors/post-interceptors":[{"title":"Post-Interceptors in Ergosfare","id":"what-is-a-post-interceptor"},{"title":"Core Concepts","id":"core-concepts"},{"title":"Module-Specific Post-Interceptor Interfaces","id":"module-specific-post-interceptor-interfaces"},{"title":"Examples","id":"examples"},{"title":"Registering Post-Interceptors","id":"registering-post-interceptors"}],"/interceptors/what-is-an-interceptor":[{"title":"What is an Interceptor","id":"what-is-an-interceptor"},{"title":"Key Characteristics of Interceptors","id":"key-characteristics-of-interceptors"},{"title":"Types of Interceptors","id":"types-of-interceptors"},{"title":"How Interceptors Work","id":"how-interceptors-work"},{"title":"Example: Pre-Execution Interceptor","id":"example-pre-interceptor"},{"title":"Example: Exception Interceptor","id":"example-exception-interceptor"},{"title":"Usage Scenarios","id":"interceptor-usage-scenarios"}],"/interceptors/pre-interceptors":[{"title":"Pre-Interceptors in Ergosfare","id":"what-is-a-pre-interceptor"},{"title":"Core Concepts","id":"core-concepts"},{"title":"Module-Specific Pre-Interceptor Interfaces","id":"module-specific-pre-interceptor-interfaces"},{"title":"Examples","id":"examples"},{"title":"Registering Pre-Interceptors","id":"registering-pre-interceptors"}]},"children":"$L2b"}]}]}]}]}]
2c:I[6874,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","603","static/chunks/app/core-concepts/configuration/page-df88ac62c96e222b.js"],""]
2b:["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","div",null,{"className":"absolute inset-0 -z-10 mx-0 max-w-none overflow-hidden","children":["$","div",null,{"className":"absolute top-0 left-1/2 -ml-152 h-100 w-325 dark:mask-[linear-gradient(white,transparent)]","children":[["$","div",null,{"className":"absolute inset-0 bg-linear-to-r from-[#36b49f] to-[#DBFF75] mask-[radial-gradient(farthest-side_at_top,white,transparent)] opacity-40 dark:from-[#36b49f]/30 dark:to-[#DBFF75]/30 dark:opacity-100","children":["$","svg",null,{"aria-hidden":"true","className":"absolute inset-x-0 inset-y-[-50%] h-[200%] w-full skew-y-[-18deg] fill-black/40 stroke-black/50 mix-blend-overlay dark:fill-white/2.5 dark:stroke-white/5","children":[["$","defs",null,{"children":["$","pattern",null,{"id":"_S_2_","width":72,"height":56,"patternUnits":"userSpaceOnUse","x":-12,"y":4,"children":["$","path",null,{"d":"M.5 56V.5H72","fill":"none"}]}]}],["$","rect",null,{"width":"100%","height":"100%","strokeWidth":0,"fill":"url(#_S_2_)"}],["$","svg",null,{"x":-12,"y":4,"className":"overflow-visible","children":[["$","rect","4-3",{"strokeWidth":"0","width":73,"height":57,"x":288,"y":168}],["$","rect","2-1",{"strokeWidth":"0","width":73,"height":57,"x":144,"y":56}],["$","rect","7-3",{"strokeWidth":"0","width":73,"height":57,"x":504,"y":168}],["$","rect","10-6",{"strokeWidth":"0","width":73,"height":57,"x":720,"y":336}]]}]]}]}],["$","svg",null,{"viewBox":"0 0 1113 440","aria-hidden":"true","className":"absolute top-0 left-1/2 -ml-76 w-278.25 fill-white blur-[26px] dark:hidden","children":["$","path",null,{"d":"M.016 439.5s-9.5-300 434-300S882.516 20 882.516 20V0h230.004v439.5H.016Z"}]}]]}]}],["$","div",null,{"className":"mx-auto flex h-full max-w-xl flex-col items-center justify-center py-16 text-center","children":[["$","p",null,{"className":"text-sm font-semibold text-zinc-900 dark:text-white","children":"404"}],["$","h1",null,{"className":"mt-2 text-2xl font-bold text-zinc-900 dark:text-white","children":"Page not found"}],["$","p",null,{"className":"mt-2 text-base text-zinc-600 dark:text-zinc-400","children":"Sorry, we couldnâ€™t find the page youâ€™re looking for."}],["$","$L2c",null,{"className":"inline-flex gap-0.5 justify-center overflow-hidden text-sm font-medium transition rounded-full bg-zinc-900 py-1 px-3 text-white hover:bg-zinc-700 dark:bg-emerald-400/10 dark:text-emerald-400 dark:ring-1 dark:ring-inset dark:ring-emerald-400/20 dark:hover:bg-emerald-400/10 dark:hover:text-emerald-300 dark:hover:ring-emerald-300 mt-8","href":"/","children":[false,"Back to docs",["$","svg",null,{"viewBox":"0 0 20 20","fill":"none","aria-hidden":"true","className":"mt-0.5 h-5 w-5 -mr-1","children":["$","path",null,{"stroke":"currentColor","strokeLinecap":"round","strokeLinejoin":"round","d":"m11.5 6.5 3 3.5m0 0-3 3.5m3-3.5h-9"}]}]]}]]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]
