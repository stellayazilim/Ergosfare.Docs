1:"$Sreact.fragment"
3:I[7555,[],""]
4:I[1295,[],""]
5:I[4873,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","289","static/chunks/app/core-concepts/modules-and-extensions/page-df88ac62c96e222b.js"],"Heading"]
6:I[1571,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","289","static/chunks/app/core-concepts/modules-and-extensions/page-df88ac62c96e222b.js"],"Code"]
28:I[8393,[],""]
:HL["/_next/static/css/f12d518a328ac330.css","style"]
0:{"P":null,"b":"QgSi4ZllsLhrKSn2T6dDN","p":"","c":["","core-concepts","modules-and-extensions"],"i":false,"f":[[["",{"children":["core-concepts",{"children":["modules-and-extensions",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f12d518a328ac330.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],"$L2"]}],{"children":["core-concepts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["modules-and-extensions",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[["$","article",null,{"className":"flex h-full flex-col pt-16 pb-10","children":[["$","div",null,{"className":"flex-auto prose dark:prose-invert [html_:where(&>*)]:mx-auto [html_:where(&>*)]:max-w-2xl lg:[html_:where(&>*)]:mx-[calc(50%-min(50%,var(--container-lg)))] lg:[html_:where(&>*)]:max-w-3xl","children":[["$","div",null,{"className":"absolute inset-0 -z-10 mx-0 max-w-none overflow-hidden","children":["$","div",null,{"className":"absolute top-0 left-1/2 -ml-152 h-100 w-325 dark:mask-[linear-gradient(white,transparent)]","children":[["$","div",null,{"className":"absolute inset-0 bg-linear-to-r from-[#36b49f] to-[#DBFF75] mask-[radial-gradient(farthest-side_at_top,white,transparent)] opacity-40 dark:from-[#36b49f]/30 dark:to-[#DBFF75]/30 dark:opacity-100","children":["$","svg",null,{"aria-hidden":"true","className":"absolute inset-x-0 inset-y-[-50%] h-[200%] w-full skew-y-[-18deg] fill-black/40 stroke-black/50 mix-blend-overlay dark:fill-white/2.5 dark:stroke-white/5","children":[["$","defs",null,{"children":["$","pattern",null,{"id":"_S_1_","width":72,"height":56,"patternUnits":"userSpaceOnUse","x":-12,"y":4,"children":["$","path",null,{"d":"M.5 56V.5H72","fill":"none"}]}]}],["$","rect",null,{"width":"100%","height":"100%","strokeWidth":0,"fill":"url(#_S_1_)"}],["$","svg",null,{"x":-12,"y":4,"className":"overflow-visible","children":[["$","rect","4-3",{"strokeWidth":"0","width":73,"height":57,"x":288,"y":168}],["$","rect","2-1",{"strokeWidth":"0","width":73,"height":57,"x":144,"y":56}],["$","rect","7-3",{"strokeWidth":"0","width":73,"height":57,"x":504,"y":168}],["$","rect","10-6",{"strokeWidth":"0","width":73,"height":57,"x":720,"y":336}]]}]]}]}],["$","svg",null,{"viewBox":"0 0 1113 440","aria-hidden":"true","className":"absolute top-0 left-1/2 -ml-76 w-278.25 fill-white blur-[26px] dark:hidden","children":["$","path",null,{"d":"M.016 439.5s-9.5-300 434-300S882.516 20 882.516 20V0h230.004v439.5H.016Z"}]}]]}]}],"\n",["$","$L5",null,{"level":2,"id":"shared-packages","children":"Shared Packages"}],"\n",["$","p",null,{"children":"Shared packages provide the common foundation that other modules in Ergosfare build upon. They encapsulate cross-cutting concerns and reusable abstractions, ensuring consistency across commands, queries, and events."}],"\n",["$","h3",null,{"children":"Ergosfare.Context"}],"\n",["$","p",null,{"children":"Provides the execution context infrastructure that flows through every part of the Ergosfare pipeline."}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"language":"txt","children":["Defines the ",["$","$L6",null,{"children":"IExecutionContext"}]," contract, which is passed into every handler and interceptor."]}],"\n",["$","li",null,{"children":"Exposes methods and properties for setting and retrieving contextual data that can be shared across pipeline stages. For example, a pre-interceptor can attach a ticketId that the actual handler later consumes."}],"\n",["$","li",null,{"children":"Includes a CancellationToken property, allowing cooperative cancellation of long-running operations in handlers or interceptors."}],"\n",["$","li",null,{"children":"Provides the Abort() method, which throws an ExecutionAborted exception to immediately stop pipeline execution when necessary."}],"\n",["$","li",null,{"children":["hips with the AmbientExecutionContext static helper, which holds a reference to the current active execution context.","\n","$L7","\n"]}],"\n"]}],"\n","$L8","\n","$L9","\n","$La","\n","$Lb","\n","$Lc","\n","$Ld","\n","$Le","\n","$Lf","\n","$L10","\n","$L11","\n","$L12","\n","$L13","\n","$L14","\n","$L15","\n","$L16","\n","$L17","\n","$L18","\n","$L19","\n","$L1a","\n","$L1b","\n","$L1c","\n","$L1d","\n","$L1e","\n","$L1f","\n","$L20","\n","$L21","\n","$L22","\n","$L23","\n","$L24"]}],"$L25"]}],null,"$L26"]}],{},null,false]},null,false]},null,false]},null,false],"$L27",false]],"m":"$undefined","G":["$28",[]],"s":false,"S":true}
29:I[1571,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","289","static/chunks/app/core-concepts/modules-and-extensions/page-df88ac62c96e222b.js"],"Pre"]
2b:I[6874,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","289","static/chunks/app/core-concepts/modules-and-extensions/page-df88ac62c96e222b.js"],""]
2c:I[5225,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","289","static/chunks/app/core-concepts/modules-and-extensions/page-df88ac62c96e222b.js"],"Feedback"]
2d:I[9665,[],"OutletBoundary"]
2f:I[4911,[],"AsyncMetadataOutlet"]
31:I[9665,[],"ViewportBoundary"]
33:I[9665,[],"MetadataBoundary"]
34:"$Sreact.suspense"
2a:T15d4,<span><span style="color: var(--shiki-token-comment)">  // Get the current execution context</span></span>
<span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> current </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">AmbientExecutionContext</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">Current</span><span style="color: var(--shiki-color-text)">;</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// Create a new scoped execution context</span></span>
<span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">using</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> scope </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">AmbientExecutionContext</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">CreateScope</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">DefaultExecutionContext</span><span style="color: var(--shiki-color-text)">()))</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    var scoped </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">AmbientExecutionContext</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">Current</span><span style="color: var(--shiki-color-text)">;</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">    // Set data in the new context</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">scoped</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">Set</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;ticketId&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Guid</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">NewGuid</span><span style="color: var(--shiki-color-text)">());</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">    // Retrieve the data later in the pipeline</span></span>
<span><span style="color: var(--shiki-color-text)">    var ticketId </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">scoped</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">Get</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Guid</span><span style="color: var(--shiki-color-text)">&gt;(</span><span style="color: var(--shiki-token-string-expression)">&quot;ticketId&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">Console</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">WriteLine</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">$&quot;Scoped ticket: {ticketId}&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// After the scope ends, the old context is restored</span></span>
<span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> restored </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">AmbientExecutionContext</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">Current</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-token-constant)">Console</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">WriteLine</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">ReferenceEquals</span><span style="color: var(--shiki-color-text)">(current</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> restored)); </span><span style="color: var(--shiki-token-comment)">// True</span></span>
<span></span>7:["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Supports creating scoped contexts via AmbientExecutionContext.CreateScope(...), allowing temporary contexts to be established for a block of code while automatically restoring the previous one when the scope ends."}],"\n",["$","$L29",null,{"language":"cs","code":"  // Get the current execution context\r\nvar current = AmbientExecutionContext.Current;\r\n\r\n// Create a new scoped execution context\r\nawait using (var scope = AmbientExecutionContext.CreateScope(new DefaultExecutionContext()))\r\n{\r\n    var scoped = AmbientExecutionContext.Current;\r\n\r\n    // Set data in the new context\r\n    scoped.Set(\"ticketId\", Guid.NewGuid());\r\n\r\n    // Retrieve the data later in the pipeline\r\n    var ticketId = scoped.Get<Guid>(\"ticketId\");\r\n\r\n    Console.WriteLine($\"Scoped ticket: {ticketId}\");\r\n}\r\n\r\n// After the scope ends, the old context is restored\r\nvar restored = AmbientExecutionContext.Current;\r\nConsole.WriteLine(ReferenceEquals(current, restored)); // True\n","children":["$","$L6",null,{"className":"language-cs","children":"$2a"}]}],"\n"]}],"\n"]}]
8:["$","p",null,{"children":"Together, this package makes execution context a first-class citizen in Ergosfare, enabling:"}]
9:["$","ul",null,{"children":["\n",["$","li",null,{"children":"Clean data propagation across handlers and interceptors."}],"\n",["$","li",null,{"children":"Scoped resource and request management."}],"\n",["$","li",null,{"children":"Early termination or cooperative cancellation of pipelines."}],"\n"]}]
a:["$","h3",null,{"children":"Ergosfare.Contracts"}]
b:["$","p",null,{"children":"Defines the core contracts and handler interfaces used across the entire framework."}]
c:["$","ul",null,{"children":["\n",["$","li",null,{"language":"txt","children":["Contains only interfaces and base abstractions such as ",["$","$L6",null,{"children":"ICommandHandler<TRequest>"}],", ",["$","$L6",null,{"children":"IAsyncQueryHandler<TRequest, TResult>"}],", and ",["$","$L6",null,{"children":"IEventHandler<TRequest>"}],"."]}],"\n",["$","li",null,{"children":"Acts as the common dependency for all modules (Commands, Queries, Events), ensuring that message and handler definitions stay consistent."}],"\n",["$","li",null,{"children":"Allows developers to define commands, queries, and events — and their handlers — without referencing the full module."}],"\n",["$","li",null,{"children":"Modules like Commands.Abstractions or Queries.Abstractions rely on these shared contracts instead of redefining their own handler types."}],"\n",["$","li",null,{"children":"The actual modules (Commands, Events, etc.) are only required at registration time, when wiring up handlers and module behavior."}],"\n"]}]
d:["$","$L5",null,{"level":2,"id":"core-module","children":"Core Module"}]
e:["$","p",null,{"children":"The Core Module is the foundation of Ergosfare. It brings together the shared packages (Ergosfare.Context, Ergosfare.Contracts) and provides the runtime infrastructure that powers the entire pipeline. Every other module builds on top of this core."}]
f:["$","h3",null,{"children":"Key responsibilities of core module"}]
10:["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Pipeline Execution → Orchestrates how commands, queries, and events flow through their respective pipelines. Each message passes through interceptors, middleware, and finally the appropriate handler."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Handler Resolution → Uses dependency injection to locate and invoke the correct handler for a given message type."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Interception Support → Provides hooks for pre- and post-processing (logging, validation, metrics, authorization, etc.) via interceptor interfaces."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Execution Context Integration → Ensures that every handler and interceptor receives the active IExecutionContext, enabling shared state, scoped resources, cancellation, and pipeline aborts."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Error & Exception Handling → Defines strategies for handling exceptions in a consistent, extensible way across the framework."}],"\n"]}],"\n"]}]
11:["$","p",null,{"children":"In short, the Core Module acts as the engine of Ergosfare — coordinating how messages are processed, how cross-cutting concerns are applied, and how execution context flows through the system. Without it, higher-level modules like Commands, Queries, or Events cannot function."}]
12:["$","$L5",null,{"level":2,"id":"command-module","children":"Command Module"}]
13:["$","p",null,{"children":"The Command Module is responsible for handling intent-driven operations within Ergosfare. Commands represent actions that change the state of the system, such as creating an order, updating a customer profile, or processing a payment."}]
14:["$","h3",null,{"children":"Key responsibilities of the Command Module:"}]
15:["$","ul",null,{"children":["\n",["$","li",null,{"children":"Message Handling → Orchestrates command processing through the pipeline, ensuring that each command reaches the correct handler."}],"\n",["$","li",null,{"children":"Decoupled Architecture → Commands and their handlers are defined via interfaces in Ergosfare.Contracts, enabling developers to implement functionality without tightly coupling to the module itself."}],"\n",["$","li",null,{"children":"Module Registration → The Command Module is brought into the system during registration, at which point all command handlers are wired into the dependency injection container and the pipeline."}],"\n"]}]
16:["$","p",null,{"children":"In short, the Command Module provides a structured, reliable mechanism for processing state-changing operations in an event-driven, decoupled way. It forms the foundation for building actionable business logic in Ergosfare while keeping handlers isolated, testable, and reusable."}]
17:["$","$L5",null,{"level":2,"id":"query-module","children":"Query Module"}]
18:["$","p",null,{"children":"The Query Module is responsible for handling read-only operations within Ergosfare. Queries represent questions about the system’s state, such as retrieving customer information, listing orders, or fetching inventory levels."}]
19:["$","h3",null,{"children":"Key responsibilities of the Query Module:"}]
1a:["$","ul",null,{"children":["\n",["$","li",null,{"children":"Message Handling → Routes queries through the pipeline to the appropriate query handler, ensuring consistent and predictable data retrieval."}],"\n",["$","li",null,{"children":"Integration with Core Module → Uses the Core Module’s pipeline, execution context (IExecutionContext), and interceptors to handle cross-cutting concerns like caching, logging, or authorization."}],"\n",["$","li",null,{"language":"txt","children":["Decoupled Architecture → Query handlers implement interfaces defined in Ergosfare.Contracts (e.g., ",["$","$L6",null,{"children":"IAsyncQueryHandler<TQuery, TResult>"}],"), allowing developers to define queries without directly referencing the module."]}],"\n",["$","li",null,{"children":"Module Registration → The Query Module is registered with the system, wiring up all query handlers for runtime resolution."}],"\n",["$","li",null,{"children":"Extensibility → Supports custom interceptors, decorators, or query-specific middleware for additional behaviors without changing the core pipeline."}],"\n"]}]
1b:["$","p",null,{"children":"The Query Module ensures that data retrieval is separated from state-changing operations, maintaining a clean, testable, and maintainable architecture. It enables developers to build robust, scalable, and predictable read paths in their applications."}]
1c:["$","hr",null,{}]
1d:["$","$L5",null,{"level":2,"id":"event-module","children":"Event Module"}]
1e:["$","p",null,{"children":"The Event Module handles domain events and notifications within Ergosfare. Events represent things that have already happened in the system, such as OrderPlaced, CustomerUpdated, or PaymentProcessed.\r\nevent module description here"}]
1f:["$","h3",null,{"children":"Key responsibilities of the Event Module:"}]
20:["$","ul",null,{"children":["\n",["$","li",null,{"children":"Message Handling → Delivers events to all registered event handlers, allowing multiple components to react to the same event independently."}],"\n",["$","li",null,{"children":"Integration with Core Module → Utilizes the Core Module’s pipeline, execution context (IExecutionContext), and interceptors to support cross-cutting concerns like logging, auditing, or metrics."}],"\n",["$","li",null,{"language":"txt","children":["Decoupled Architecture → Event handlers implement interfaces defined in Ergosfare.Contracts (e.g., ",["$","$L6",null,{"children":"IEventHandler<TEvent>"}],"), so developers can respond to events without depending on the event publisher directly."]}],"\n",["$","li",null,{"children":"Module Registration → Event handlers are registered with the system at runtime, enabling automatic resolution and invocation whenever events are published."}],"\n",["$","li",null,{"children":"Extensibility → Supports custom interceptors, decorators, or event-specific middleware to extend event processing without modifying the core pipeline."}],"\n"]}]
21:["$","p",null,{"children":"The Event Module promotes a reactive, decoupled architecture, enabling multiple parts of the system to respond to changes independently. It ensures that side-effects, notifications, and asynchronous workflows remain organized, maintainable, and testable."}]
22:["$","$L5",null,{"level":2,"id":"handls-on-examples","children":"Hands-On Examples"}]
23:["$","p",null,{"children":"You’ve explored the core concepts of Ergosfare — from shared packages and execution context to the Command, Query, and Event modules. Now it’s time to put that knowledge into practice."}]
24:["$","div",null,{"className":"not-prose mt-6 mb-16 flex gap-3","children":[["$","$L2b",null,{"className":"inline-flex gap-0.5 justify-center overflow-hidden text-sm font-medium transition rounded-full bg-zinc-900 py-1 px-3 text-white hover:bg-zinc-700 dark:bg-emerald-400/10 dark:text-emerald-400 dark:ring-1 dark:ring-inset dark:ring-emerald-400/20 dark:hover:bg-emerald-400/10 dark:hover:text-emerald-300 dark:hover:ring-emerald-300","href":"/built-with-ergosfare","children":[false,"$undefined",["$","svg",null,{"viewBox":"0 0 20 20","fill":"none","aria-hidden":"true","className":"mt-0.5 h-5 w-5 -mr-1","children":["$","path",null,{"stroke":"currentColor","strokeLinecap":"round","strokeLinejoin":"round","d":"m11.5 6.5 3 3.5m0 0-3 3.5m3-3.5h-9"}]}]]}],"Building with Ergosfare"]}]
25:["$","footer",null,{"className":"mx-auto mt-16 w-full max-w-2xl lg:max-w-5xl","children":["$","$L2c",null,{}]}]
26:["$","$L2d",null,{"children":["$L2e",["$","$L2f",null,{"promise":"$@30"}]]}]
27:["$","$1","h",{"children":[null,[["$","$L31",null,{"children":"$L32"}],null],["$","$L33",null,{"children":["$","div",null,{"hidden":true,"children":["$","$34",null,{"fallback":null,"children":"$L35"}]}]}]]}]
32:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
2e:null
36:I[8175,[],"IconMark"]
30:{"metadata":[["$","title","0",{"children":"Configure Ergosfare - Protocol API Reference"}],["$","meta","1",{"name":"description","content":"Learn more about how the system is structured and the main building blocks."}],["$","link","2",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","$L36","3",{}]],"error":null,"digest":"$undefined"}
35:"$30:metadata"
37:I[881,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","745","static/chunks/745-6a389add5fbaeca1.js","700","static/chunks/700-25c42e0f330635cb.js","316","static/chunks/316-633894f3d37d156e.js","177","static/chunks/app/layout-05050350ec61d2aa.js"],"Providers"]
38:I[896,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","745","static/chunks/745-6a389add5fbaeca1.js","700","static/chunks/700-25c42e0f330635cb.js","316","static/chunks/316-633894f3d37d156e.js","177","static/chunks/app/layout-05050350ec61d2aa.js"],"Layout"]
2:["$","html",null,{"lang":"en","className":"h-full","suppressHydrationWarning":true,"children":["$","body",null,{"className":"flex min-h-full bg-white antialiased dark:bg-zinc-900","children":["$","$L37",null,{"children":["$","div",null,{"className":"w-full","children":["$","$L38",null,{"allSections":{"/":[{"title":"Why Ergosfare?","id":"Why Ergosfare?"},{"title":"Key Characteristics","id":"Key Characteristics"},{"title":"Getting started","id":"Getting started"}],"/quickstart":[{"title":"Create a .NET 9+ project","id":"create-a-net-9-project"},{"title":"Add Ergosfare to your project","id":"add-ergosfare-to-your-project"},{"title":"Configure Ergosfare in Your Application","id":"configure-ergosfare-in-your-application"},{"title":"Explore the Core Concepts?","id":"explore-the-core-concepts"}],"/groups":[{"title":"The group model","id":"the-group-model"},{"title":"List all groups","id":"list-all-groups","tag":"GET","label":"/v1/groups"},{"title":"Create a group","id":"create-a-group","tag":"POST","label":"/v1/groups"},{"title":"Retrieve a group","id":"retrieve-a-group","tag":"GET","label":"/v1/groups/:id"},{"title":"Update a group","id":"update-a-group","tag":"PUT","label":"/v1/groups/:id"},{"title":"Delete a group","id":"delete-a-group","tag":"DELETE","label":"/v1/groups/:id"}],"/building-with-ergosfare/commands-and-command-handlers":[{"title":"What is a Command","id":"what-is-a-Command"},{"title":"How to Create a Command","id":"how-to-create-a-command"},{"title":"What is a Command Handler","id":"what-is-a-command-handler"},{"title":"How to Create a Command Handler","id":"how-to-create-a-command-handler"},{"title":"Registering Command Handlers","id":"registering-command-handlers"},{"title":"Dispatching a Command","id":"dispatching-a-command"}],"/core-concepts/configuration":[{"title":"Basic configuration","id":"basic-configuration"},{"title":"IModule Builder Methods ","id":"imodule-builder-methods"}],"/building-with-ergosfare/queries-and-query-handlers":[{"title":"What is a Query","id":"what-is-a-query"},{"title":"How to Create a Query","id":"how-to-create-a-query"},{"title":"What is a Query Handler","id":"what-is-a-query-handler"},{"title":"How to Create a Query Handler","id":"how-to-create-a-query-handler"},{"title":"Registering Query Handlers","id":"registering-query-handlers"},{"title":"Dispatching a Query","id":"dispatching-a-query"}],"/core-concepts/interceptors":[],"/core-concepts/modules-and-extensions":[{"title":"Shared packages","id":"shared-packages"},{"title":"Core Module","id":"core-module"},{"title":"Command Module","id":"command-module"},{"title":"Query Module","id":"query-module"},{"title":"Event Module","id":"event-module"},{"title":"Hands-On Examples","id":"handls-on-examples"}],"/building-with-ergosfare/events-and-event-handlers":[{"title":"What is an Event","id":"what-is-an-event","links":[{"title":"Key Characteristics of Events ","id":"key-characteristics"}]},{"title":"How to Create an Event","id":"how-to-create-an-event"},{"title":"What is an Event Handler","id":"what-is-an-event-handler","links":[{"title":"Key Characteristics of Event Handlers ","id":"key-characteristics-of-event-handlers"}]},{"title":"How to Create an Event Handler","id":"how-to-create-an-event-handler"},{"title":"Registering Event Handlers","id":"registering-event-handlers"},{"title":"Dispatching an Event","id":"dispatching-an-event"}],"/interceptors/post-interceptors":[{"title":"Post-Interceptors in Ergosfare","id":"what-is-a-post-interceptor"},{"title":"Core Concepts","id":"core-concepts"},{"title":"Module-Specific Post-Interceptor Interfaces","id":"module-specific-post-interceptor-interfaces"},{"title":"Examples","id":"examples"},{"title":"Registering Post-Interceptors","id":"registering-post-interceptors"}],"/interceptors/pre-interceptors":[{"title":"Pre-Interceptors in Ergosfare","id":"what-is-a-pre-interceptor"},{"title":"Core Concepts","id":"core-concepts"},{"title":"Module-Specific Pre-Interceptor Interfaces","id":"module-specific-pre-interceptor-interfaces"},{"title":"Examples","id":"examples"},{"title":"Registering Pre-Interceptors","id":"registering-pre-interceptors"}],"/interceptors/what-is-an-interceptor":[{"title":"What is an Interceptor","id":"what-is-an-interceptor"},{"title":"Key Characteristics of Interceptors","id":"key-characteristics-of-interceptors"},{"title":"Types of Interceptors","id":"types-of-interceptors"},{"title":"How Interceptors Work","id":"how-interceptors-work"},{"title":"Example: Pre-Execution Interceptor","id":"example-pre-interceptor"},{"title":"Example: Exception Interceptor","id":"example-exception-interceptor"},{"title":"Usage Scenarios","id":"interceptor-usage-scenarios"}],"/interceptors/exception-interceptors":[{"title":"Exception Interceptors in Ergosfare","id":"what-is-an-exception-interceptor"},{"title":"Core Concepts","id":"core-concepts"},{"title":"Module-Specific Exception Interceptor Interfaces","id":"module-specific-exception-interceptor-interfaces"},{"title":"Examples","id":"examples"},{"title":"Registering Exception Interceptors","id":"registering-exception-interceptors"}],"/core-concepts/polymorphism":[{"title":"Polymorphism in Ergosfare ","id":"polymorphism"},{"title":"Generic type support","id":"generic-type-support"}]},"children":"$L39"}]}]}]}]}]
39:["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","div",null,{"className":"absolute inset-0 -z-10 mx-0 max-w-none overflow-hidden","children":["$","div",null,{"className":"absolute top-0 left-1/2 -ml-152 h-100 w-325 dark:mask-[linear-gradient(white,transparent)]","children":[["$","div",null,{"className":"absolute inset-0 bg-linear-to-r from-[#36b49f] to-[#DBFF75] mask-[radial-gradient(farthest-side_at_top,white,transparent)] opacity-40 dark:from-[#36b49f]/30 dark:to-[#DBFF75]/30 dark:opacity-100","children":["$","svg",null,{"aria-hidden":"true","className":"absolute inset-x-0 inset-y-[-50%] h-[200%] w-full skew-y-[-18deg] fill-black/40 stroke-black/50 mix-blend-overlay dark:fill-white/2.5 dark:stroke-white/5","children":[["$","defs",null,{"children":["$","pattern",null,{"id":"_S_2_","width":72,"height":56,"patternUnits":"userSpaceOnUse","x":-12,"y":4,"children":["$","path",null,{"d":"M.5 56V.5H72","fill":"none"}]}]}],["$","rect",null,{"width":"100%","height":"100%","strokeWidth":0,"fill":"url(#_S_2_)"}],["$","svg",null,{"x":-12,"y":4,"className":"overflow-visible","children":[["$","rect","4-3",{"strokeWidth":"0","width":73,"height":57,"x":288,"y":168}],["$","rect","2-1",{"strokeWidth":"0","width":73,"height":57,"x":144,"y":56}],["$","rect","7-3",{"strokeWidth":"0","width":73,"height":57,"x":504,"y":168}],["$","rect","10-6",{"strokeWidth":"0","width":73,"height":57,"x":720,"y":336}]]}]]}]}],["$","svg",null,{"viewBox":"0 0 1113 440","aria-hidden":"true","className":"absolute top-0 left-1/2 -ml-76 w-278.25 fill-white blur-[26px] dark:hidden","children":["$","path",null,{"d":"M.016 439.5s-9.5-300 434-300S882.516 20 882.516 20V0h230.004v439.5H.016Z"}]}]]}]}],["$","div",null,{"className":"mx-auto flex h-full max-w-xl flex-col items-center justify-center py-16 text-center","children":[["$","p",null,{"className":"text-sm font-semibold text-zinc-900 dark:text-white","children":"404"}],["$","h1",null,{"className":"mt-2 text-2xl font-bold text-zinc-900 dark:text-white","children":"Page not found"}],["$","p",null,{"className":"mt-2 text-base text-zinc-600 dark:text-zinc-400","children":"Sorry, we couldn’t find the page you’re looking for."}],["$","$L2b",null,{"className":"inline-flex gap-0.5 justify-center overflow-hidden text-sm font-medium transition rounded-full bg-zinc-900 py-1 px-3 text-white hover:bg-zinc-700 dark:bg-emerald-400/10 dark:text-emerald-400 dark:ring-1 dark:ring-inset dark:ring-emerald-400/20 dark:hover:bg-emerald-400/10 dark:hover:text-emerald-300 dark:hover:ring-emerald-300 mt-8","href":"/","children":[false,"Back to docs",["$","svg",null,{"viewBox":"0 0 20 20","fill":"none","aria-hidden":"true","className":"mt-0.5 h-5 w-5 -mr-1","children":["$","path",null,{"stroke":"currentColor","strokeLinecap":"round","strokeLinejoin":"round","d":"m11.5 6.5 3 3.5m0 0-3 3.5m3-3.5h-9"}]}]]}]]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]
