1:"$Sreact.fragment"
3:I[7555,[],""]
4:I[1295,[],""]
5:I[4873,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","246","static/chunks/app/quickstart/page-df88ac62c96e222b.js"],"Heading"]
23:I[8393,[],""]
:HL["/_next/static/css/f12d518a328ac330.css","style"]
0:{"P":null,"b":"QgSi4ZllsLhrKSn2T6dDN","p":"","c":["","quickstart"],"i":false,"f":[[["",{"children":["quickstart",{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f12d518a328ac330.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],"$L2"]}],{"children":["quickstart",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[["$","article",null,{"className":"flex h-full flex-col pt-16 pb-10","children":[["$","div",null,{"className":"flex-auto prose dark:prose-invert [html_:where(&>*)]:mx-auto [html_:where(&>*)]:max-w-2xl lg:[html_:where(&>*)]:mx-[calc(50%-min(50%,var(--container-lg)))] lg:[html_:where(&>*)]:max-w-3xl","children":[["$","div",null,{"className":"absolute inset-0 -z-10 mx-0 max-w-none overflow-hidden","children":["$","div",null,{"className":"absolute top-0 left-1/2 -ml-152 h-100 w-325 dark:mask-[linear-gradient(white,transparent)]","children":[["$","div",null,{"className":"absolute inset-0 bg-linear-to-r from-[#36b49f] to-[#DBFF75] mask-[radial-gradient(farthest-side_at_top,white,transparent)] opacity-40 dark:from-[#36b49f]/30 dark:to-[#DBFF75]/30 dark:opacity-100","children":["$","svg",null,{"aria-hidden":"true","className":"absolute inset-x-0 inset-y-[-50%] h-[200%] w-full skew-y-[-18deg] fill-black/40 stroke-black/50 mix-blend-overlay dark:fill-white/2.5 dark:stroke-white/5","children":[["$","defs",null,{"children":["$","pattern",null,{"id":"_S_1_","width":72,"height":56,"patternUnits":"userSpaceOnUse","x":-12,"y":4,"children":["$","path",null,{"d":"M.5 56V.5H72","fill":"none"}]}]}],["$","rect",null,{"width":"100%","height":"100%","strokeWidth":0,"fill":"url(#_S_1_)"}],["$","svg",null,{"x":-12,"y":4,"className":"overflow-visible","children":[["$","rect","4-3",{"strokeWidth":"0","width":73,"height":57,"x":288,"y":168}],["$","rect","2-1",{"strokeWidth":"0","width":73,"height":57,"x":144,"y":56}],["$","rect","7-3",{"strokeWidth":"0","width":73,"height":57,"x":504,"y":168}],["$","rect","10-6",{"strokeWidth":"0","width":73,"height":57,"x":720,"y":336}]]}]]}]}],["$","svg",null,{"viewBox":"0 0 1113 440","aria-hidden":"true","className":"absolute top-0 left-1/2 -ml-76 w-278.25 fill-white blur-[26px] dark:hidden","children":["$","path",null,{"d":"M.016 439.5s-9.5-300 434-300S882.516 20 882.516 20V0h230.004v439.5H.016Z"}]}]]}]}],"\n",["$","h1",null,{"children":"Quickstart"}],"\n",["$","p",null,{"children":"This guide will help you set up your first Ergosfare project and start using the framework’s core features. You’ll learn how to create a new project, configure essential modules, and handle your first commands, queries, and events. By the end, you’ll have a working foundation to build on and know where to go next for advanced features.","className":"lead"}],"\n",["$","div",null,{"className":"my-6 flex gap-2.5 rounded-2xl border border-emerald-500/20 bg-emerald-50/50 p-4 text-sm/6 text-emerald-900 dark:border-emerald-500/30 dark:bg-emerald-500/5 dark:text-emerald-200 dark:[--tw-prose-links-hover:var(--color-emerald-300)] dark:[--tw-prose-links:var(--color-white)]","children":[["$","svg",null,{"viewBox":"0 0 16 16","aria-hidden":"true","className":"mt-1 h-4 w-4 flex-none fill-emerald-500 stroke-white dark:fill-emerald-200/20 dark:stroke-emerald-200","children":[["$","circle",null,{"cx":"8","cy":"8","r":"8","strokeWidth":"0"}],["$","path",null,{"fill":"none","strokeLinecap":"round","strokeLinejoin":"round","strokeWidth":"1.5","d":"M6.75 7.75h1.5v3.5"}],["$","circle",null,{"cx":"8","cy":"4","r":".5","fill":"none"}]]}],["$","div",null,{"className":"[&>:first-child]:mt-0 [&>:last-child]:mb-0","children":[["$","h5",null,{"children":"Before you can start using Ergosfare, make sure your environment meets the following requirements:"}],["$","ul",null,{"children":["\n",["$","li",null,{"children":"At least C# 13"}],"\n",["$","li",null,{"children":".NET 9"}],"\n"]}]]}]]}],"\n",["$","$L5",null,{"level":2,"id":"create-a-net-9-project","children":"Create a .NET 9+ project"}],"\n",["$","p",null,{"children":"Before you can start building your web application, you need to create an ASP.NET Core project and integrate Ergosfare. Ergosfare provides a modular framework for handling commands, queries, and events, along with a C# SDK to simplify development."}],"\n","$L6","\n","$L7","\n","$L8","\n","$L9","\n","$La","\n","$Lb","\n","$Lc","\n","$Ld","\n","$Le","\n","$Lf","\n","$L10","\n","$L11","\n","$L12","\n","$L13","\n","$L14","\n","$L15","\n","$L16","\n","$L17","\n","$L18","\n","$L19","\n","$L1a","\n","$L1b","\n","$L1c","\n","$L1d","\n","$L1e","\n","$L1f"]}],"$L20"]}],null,"$L21"]}],{},null,false]},null,false]},null,false],"$L22",false]],"m":"$undefined","G":["$23",[]],"s":false,"S":true}
24:I[1571,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","246","static/chunks/app/quickstart/page-df88ac62c96e222b.js"],"Pre"]
25:I[1571,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","246","static/chunks/app/quickstart/page-df88ac62c96e222b.js"],"Code"]
26:I[1571,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","246","static/chunks/app/quickstart/page-df88ac62c96e222b.js"],"CodeGroup"]
2b:I[6874,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","246","static/chunks/app/quickstart/page-df88ac62c96e222b.js"],""]
2c:I[5225,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","246","static/chunks/app/quickstart/page-df88ac62c96e222b.js"],"Feedback"]
2d:I[9665,[],"OutletBoundary"]
2f:I[4911,[],"AsyncMetadataOutlet"]
31:I[9665,[],"ViewportBoundary"]
33:I[9665,[],"MetadataBoundary"]
34:"$Sreact.suspense"
6:["$","$L24",null,{"language":"bash","code":"\ndotnet new webapi -n MyErgosfareApp && cd MyErgosfareApp\n","children":["$","$L25",null,{"className":"language-bash","children":"<span></span>\n<span><span style=\"color: var(--shiki-token-function)\">dotnet</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">new</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">webapi</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">-n</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">MyErgosfareApp</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-punctuation)\">&amp;&amp;</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-function)\">cd</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">MyErgosfareApp</span></span>\n<span></span>"}]}]
7:["$","$L5",null,{"level":2,"id":"add-ergosfare-to-your-project","children":"Add Ergosfare to your project"}]
8:["$","p",null,{"children":"To use Ergosfare in your application, you need to add the SDK to your project. This allows you to access its core features, including commands, queries, events, and built-in modules for dependency injection and messaging. You can install it via the .NET CLI or the NuGet Package Manager."}]
9:["$","$L26",null,{"children":[["$","$L24",null,{"language":"bash","code":"dotnet add package Ergosfare \n","children":["$","$L25",null,{"className":"language-bash","children":"<span><span style=\"color: var(--shiki-token-function)\">dotnet</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">add</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">package</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">Ergosfare</span><span style=\"color: var(--shiki-color-text)\"> </span></span>\n<span></span>"}],"title":"dotnet cli"}],["$","$L24",null,{"language":"bash","code":"Install-Package Ergosfare\n","children":["$","$L25",null,{"className":"language-bash","children":"<span><span style=\"color: var(--shiki-token-function)\">Install-Package</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-string)\">Ergosfare</span></span>\n<span></span>"}],"title":"nuget console (Visual Studio)"}]]}]
a:["$","$L5",null,{"level":2,"id":"configure-ergosfare-in-your-application","children":"Configure Ergosfare in Your Application"}]
b:["$","p",null,{"children":"Once the Ergosfare SDK is installed, you need to register it with the ASP.NET Core dependency injection container. This allows your application to access commands, queries, events, and other framework features throughout your project."}]
27:Tcf9,<span></span>
<span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> builder </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">WebApplication</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">CreateBuilder</span><span style="color: var(--shiki-color-text)">(args);</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">// Register Ergosfare services</span></span>
<span><span style="color: var(--shiki-token-constant)">builder</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">Services</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">AddErgosfare</span><span style="color: var(--shiki-color-text)">(options </span><span style="color: var(--shiki-token-keyword)">=&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-token-comment)">    // Configure modules, handlers, or custom options here</span></span>
<span><span style="color: var(--shiki-color-text)">    options</span></span>
<span><span style="color: var(--shiki-color-text)">      .</span><span style="color: var(--shiki-token-function)">AddCommandModule</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">..</span><span style="color: var(--shiki-color-text)">.)</span></span>
<span><span style="color: var(--shiki-color-text)">      .</span><span style="color: var(--shiki-token-function)">AddQueryModule</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">..</span><span style="color: var(--shiki-color-text)">.)</span></span>
<span><span style="color: var(--shiki-color-text)">      .</span><span style="color: var(--shiki-token-function)">AddEventModule</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">..</span><span style="color: var(--shiki-color-text)">.)</span></span>
<span><span style="color: var(--shiki-color-text)">});</span></span>
<span></span>
<span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> app </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">builder</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">Build</span><span style="color: var(--shiki-color-text)">();</span></span>
<span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">MapControllers</span><span style="color: var(--shiki-color-text)">();</span></span>
<span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">Run</span><span style="color: var(--shiki-color-text)">();</span></span>
<span></span>
<span></span>c:["$","$L24",null,{"language":"cs","code":"\nvar builder = WebApplication.CreateBuilder(args);\n\n// Register Ergosfare services\nbuilder.Services.AddErgosfare(options =>\n{\n    // Configure modules, handlers, or custom options here\n    options\n      .AddCommandModule(...)\n      .AddQueryModule(...)\n      .AddEventModule(...)\n});\n\nvar app = builder.Build();\napp.MapControllers();\napp.Run();\n\n","children":["$","$L25",null,{"className":"language-cs","children":"$27"}],"title":"program.cs"}]
d:["$","div",null,{"className":"my-6 flex gap-2.5 rounded-2xl border border-emerald-500/20 bg-emerald-50/50 p-4 text-sm/6 text-emerald-900 dark:border-emerald-500/30 dark:bg-emerald-500/5 dark:text-emerald-200 dark:[--tw-prose-links-hover:var(--color-emerald-300)] dark:[--tw-prose-links:var(--color-white)]","children":[["$","svg",null,{"viewBox":"0 0 16 16","aria-hidden":"true","className":"mt-1 h-4 w-4 flex-none fill-emerald-500 stroke-white dark:fill-emerald-200/20 dark:stroke-emerald-200","children":[["$","circle",null,{"cx":"8","cy":"8","r":"8","strokeWidth":"0"}],["$","path",null,{"fill":"none","strokeLinecap":"round","strokeLinejoin":"round","strokeWidth":"1.5","d":"M6.75 7.75h1.5v3.5"}],["$","circle",null,{"cx":"8","cy":"4","r":".5","fill":"none"}]]}],["$","div",null,{"className":"[&>:first-child]:mt-0 [&>:last-child]:mb-0","children":["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"The AddErgosfare extension automatically registers the core services and modules needed for commands, events, and queries."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"You can further customize the options to enable event interception, logging, or other extensions."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Once registered, you can inject the necessary Ergosfare services into your controllers or other services using constructor injection."}],"\n"]}],"\n"]}]}]]}]
e:["$","h3",null,{"children":"Define a Command"}]
f:["$","p",null,{"children":"A command represents an action or request in your system. Here, CreateOrderCommand contains the necessary data to create a new order."}]
10:["$","$L24",null,{"language":"cs","code":"public record CreateOrderCommand(string ProductId, int Quantity) : ICommand;\n","children":["$","$L25",null,{"className":"language-cs","children":"<span><span style=\"color: var(--shiki-token-keyword)\">public</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-keyword)\">record</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-function)\">CreateOrderCommand</span><span style=\"color: var(--shiki-color-text)\">(</span><span style=\"color: var(--shiki-token-keyword)\">string</span><span style=\"color: var(--shiki-color-text)\"> ProductId</span><span style=\"color: var(--shiki-token-punctuation)\">,</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-keyword)\">int</span><span style=\"color: var(--shiki-color-text)\"> Quantity) </span><span style=\"color: var(--shiki-token-punctuation)\">:</span><span style=\"color: var(--shiki-color-text)\"> </span><span style=\"color: var(--shiki-token-function)\">ICommand</span><span style=\"color: var(--shiki-color-text)\">;</span></span>\n<span></span>"}],"title":"CreateOrderCommand.cs"}]
11:["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Commands are simple DTOs that carry data."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"They do not contain business logic—handlers do."}],"\n"]}],"\n"]}]
12:["$","h3",null,{"children":"Implement a Command Handler"}]
13:["$","p",null,{"children":"The handler contains the business logic for processing the command."}]
28:Te06,<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CreateOrderHandler</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ICommandHandler</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">CreateOrderCommand</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Task</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Handle</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">CreateOrderCommand</span><span style="color: var(--shiki-color-text)"> command</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">IExcetionContext</span><span style="color: var(--shiki-color-text)"> context</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">CancellationToken</span><span style="color: var(--shiki-color-text)"> ct)</span></span>
<span><span style="color: var(--shiki-color-text)">    {</span></span>
<span><span style="color: var(--shiki-token-comment)">        // Your business logic here</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">Console</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">WriteLine</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">$&quot;Order created: {</span><span style="color: var(--shiki-token-constant)">command</span><span style="color: var(--shiki-token-string-expression)">.</span><span style="color: var(--shiki-token-constant)">ProductId</span><span style="color: var(--shiki-token-string-expression)">}, Quantity: {</span><span style="color: var(--shiki-token-constant)">command</span><span style="color: var(--shiki-token-string-expression)">.</span><span style="color: var(--shiki-token-constant)">Quantity</span><span style="color: var(--shiki-token-string-expression)">}&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Task</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">CompletedTask</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span></span>14:["$","$L24",null,{"language":"cs","code":"public class CreateOrderHandler : ICommandHandler<CreateOrderCommand>\n{\n    public Task Handle(CreateOrderCommand command, IExcetionContext context,  CancellationToken ct)\n    {\n        // Your business logic here\n        Console.WriteLine($\"Order created: {command.ProductId}, Quantity: {command.Quantity}\");\n        return Task.CompletedTask;\n    }\n}\n\n","children":["$","$L25",null,{"className":"language-cs","children":"$28"}],"title":"CreateOrderHandler.cs"}]
15:["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"language":"txt","children":["Implements  ",["$","$L25",null,{"children":"ICommandHandler<TCommand>"}]," to handle a specific command."]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Can perform database operations, validation, logging, or any other business logic."}],"\n"]}],"\n"]}]
16:["$","h3",null,{"children":"Register the Handler with Ergosfare"}]
17:["$","p",null,{"children":"Add the command handler to the dependency injection container so Ergosfare can resolve it when commands are dispatched."}]
29:T95a,<span><span style="color: var(--shiki-token-constant)">builder</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">Services</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">AddErgosfare</span><span style="color: var(--shiki-color-text)">(options </span><span style="color: var(--shiki-token-keyword)">=&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">AddCommandModule</span><span style="color: var(--shiki-color-text)">(module </span><span style="color: var(--shiki-token-keyword)">=&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">    {</span></span>
<span><span style="color: var(--shiki-token-comment)">        // Register a single command manually</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">Register</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">CreateOrderCommand</span><span style="color: var(--shiki-color-text)">&gt;();</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">        // Or automatically register all command handlers in the current assembly</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">RegisterFromAssembly</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">Assembly</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">GetExecutingAssembly</span><span style="color: var(--shiki-color-text)">());</span></span>
<span><span style="color: var(--shiki-color-text)">    });</span></span>
<span><span style="color: var(--shiki-color-text)">});</span></span>
<span></span>18:["$","$L24",null,{"language":"cs","code":"builder.Services.AddErgosfare(options =>\n{\n    options.AddCommandModule(module =>\n    {\n        // Register a single command manually\n        module.Register<CreateOrderCommand>();\n\n        // Or automatically register all command handlers in the current assembly\n        module.RegisterFromAssembly(Assembly.GetExecutingAssembly());\n    });\n});\n","children":["$","$L25",null,{"className":"language-cs","children":"$29"}],"title":"Program.cs"}]
19:["$","p",null,{"language":"txt","children":["Both ",["$","$L25",null,{"children":"Register<TCommand>()"}]," and ",["$","$L25",null,{"children":"RegisterFromAssembly(...)"}]," not only tell Ergosfare about the command types, but also ensure their handlers are registered in the ",["$","strong",null,{"children":"ASP.NET Core service container"}],". This means you can immediately inject and use them without additional configuration"]}]
1a:["$","h3",null,{"children":"Sending commands"}]
2a:T12f3,<span></span>
<span><span style="color: var(--shiki-color-text)">[</span><span style="color: var(--shiki-token-function)">ApiController</span><span style="color: var(--shiki-color-text)">]</span></span>
<span><span style="color: var(--shiki-color-text)">[</span><span style="color: var(--shiki-token-function)">Route</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;api/[controller]&quot;</span><span style="color: var(--shiki-color-text)">)]</span></span>
<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">OrdersController</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ControllerBase</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">private</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">readonly</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ICommandMediator</span><span style="color: var(--shiki-color-text)"> _mediator;</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">OrdersController</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">ICommandMediator</span><span style="color: var(--shiki-color-text)"> mediator)</span></span>
<span><span style="color: var(--shiki-color-text)">    {</span></span>
<span><span style="color: var(--shiki-color-text)">        _mediator </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> mediator;</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span></span>
<span><span style="color: var(--shiki-color-text)">    [</span><span style="color: var(--shiki-token-function)">HttpPost</span><span style="color: var(--shiki-color-text)">]</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Task</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">IActionResult</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-function)">CreateOrder</span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-function)">FromBody</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-function)">CreateOrderCommand</span><span style="color: var(--shiki-color-text)"> command)</span></span>
<span><span style="color: var(--shiki-color-text)">    {</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_mediator</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">Send</span><span style="color: var(--shiki-color-text)">(command);</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Ok</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> { message </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Order created successfully!&quot;</span><span style="color: var(--shiki-color-text)"> });</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span></span>1b:["$","$L24",null,{"language":"cs","code":"\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class OrdersController : ControllerBase\n{\n    private readonly ICommandMediator _mediator;\n\n    public OrdersController(ICommandMediator mediator)\n    {\n        _mediator = mediator;\n    }\n\n    [HttpPost]\n    public async Task<IActionResult> CreateOrder([FromBody] CreateOrderCommand command)\n    {\n        await _mediator.Send(command);\n        return Ok(new { message = \"Order created successfully!\" });\n    }\n}\n\n","children":["$","$L25",null,{"className":"language-cs","children":"$2a"}],"title":"OrderController.cs"}]
1c:["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"ICommandMediator handles dispatching commands to the appropriate handler."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"API endpoints remain thin and focused on request/response logic."}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":"Business logic stays in the command handler, keeping your code modular and testable."}],"\n"]}],"\n"]}]
1d:["$","$L5",null,{"level":2,"id":"explore-the-core-concepts","children":"Explore the Core Concepts?"}]
1e:["$","p",null,{"children":"Great, you're now set up with an API client and have made your first request to the API. Here are a few links that might be handy as you venture further into the Protocol API:"}]
1f:["$","ul",null,{"children":["\n",["$","li",null,{"children":["$","$L2b",null,{"href":"/core-concepts#configure","children":"Configuring Ergosfare"}]}],"\n",["$","li",null,{"children":["$","$L2b",null,{"href":"/conversations","children":"Check out the Conversations endpoint"}]}],"\n",["$","li",null,{"children":["$","$L2b",null,{"href":"/errors","children":"Learn about the different error messages in Protocol"}]}],"\n"]}]
20:["$","footer",null,{"className":"mx-auto mt-16 w-full max-w-2xl lg:max-w-5xl","children":["$","$L2c",null,{}]}]
21:["$","$L2d",null,{"children":["$L2e",["$","$L2f",null,{"promise":"$@30"}]]}]
22:["$","$1","h",{"children":[null,[["$","$L31",null,{"children":"$L32"}],null],["$","$L33",null,{"children":["$","div",null,{"hidden":true,"children":["$","$34",null,{"fallback":null,"children":"$L35"}]}]}]]}]
32:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
2e:null
36:I[8175,[],"IconMark"]
30:{"metadata":[["$","title","0",{"children":"Quickstart - Protocol API Reference"}],["$","meta","1",{"name":"description","content":"his guide will help you set up your first Ergosfare project and start using the framework’s core features."}],["$","link","2",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","$L36","3",{}]],"error":null,"digest":"$undefined"}
35:"$30:metadata"
37:I[881,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","745","static/chunks/745-6a389add5fbaeca1.js","700","static/chunks/700-25c42e0f330635cb.js","316","static/chunks/316-633894f3d37d156e.js","177","static/chunks/app/layout-05050350ec61d2aa.js"],"Providers"]
38:I[896,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","745","static/chunks/745-6a389add5fbaeca1.js","700","static/chunks/700-25c42e0f330635cb.js","316","static/chunks/316-633894f3d37d156e.js","177","static/chunks/app/layout-05050350ec61d2aa.js"],"Layout"]
2:["$","html",null,{"lang":"en","className":"h-full","suppressHydrationWarning":true,"children":["$","body",null,{"className":"flex min-h-full bg-white antialiased dark:bg-zinc-900","children":["$","$L37",null,{"children":["$","div",null,{"className":"w-full","children":["$","$L38",null,{"allSections":{"/":[{"title":"Why Ergosfare?","id":"Why Ergosfare?"},{"title":"Key Characteristics","id":"Key Characteristics"},{"title":"Getting started","id":"Getting started"}],"/groups":[{"title":"The group model","id":"the-group-model"},{"title":"List all groups","id":"list-all-groups","tag":"GET","label":"/v1/groups"},{"title":"Create a group","id":"create-a-group","tag":"POST","label":"/v1/groups"},{"title":"Retrieve a group","id":"retrieve-a-group","tag":"GET","label":"/v1/groups/:id"},{"title":"Update a group","id":"update-a-group","tag":"PUT","label":"/v1/groups/:id"},{"title":"Delete a group","id":"delete-a-group","tag":"DELETE","label":"/v1/groups/:id"}],"/quickstart":[{"title":"Create a .NET 9+ project","id":"create-a-net-9-project"},{"title":"Add Ergosfare to your project","id":"add-ergosfare-to-your-project"},{"title":"Configure Ergosfare in Your Application","id":"configure-ergosfare-in-your-application"},{"title":"Explore the Core Concepts?","id":"explore-the-core-concepts"}],"/building-with-ergosfare/commands-and-command-handlers":[{"title":"What is a Command","id":"what-is-a-Command"},{"title":"How to Create a Command","id":"how-to-create-a-command"},{"title":"What is a Command Handler","id":"what-is-a-command-handler"},{"title":"How to Create a Command Handler","id":"how-to-create-a-command-handler"},{"title":"Registering Command Handlers","id":"registering-command-handlers"},{"title":"Dispatching a Command","id":"dispatching-a-command"}],"/building-with-ergosfare/events-and-event-handlers":[{"title":"What is an Event","id":"what-is-an-event","links":[{"title":"Key Characteristics of Events ","id":"key-characteristics"}]},{"title":"How to Create an Event","id":"how-to-create-an-event"},{"title":"What is an Event Handler","id":"what-is-an-event-handler","links":[{"title":"Key Characteristics of Event Handlers ","id":"key-characteristics-of-event-handlers"}]},{"title":"How to Create an Event Handler","id":"how-to-create-an-event-handler"},{"title":"Registering Event Handlers","id":"registering-event-handlers"},{"title":"Dispatching an Event","id":"dispatching-an-event"}],"/building-with-ergosfare/queries-and-query-handlers":[{"title":"What is a Query","id":"what-is-a-query"},{"title":"How to Create a Query","id":"how-to-create-a-query"},{"title":"What is a Query Handler","id":"what-is-a-query-handler"},{"title":"How to Create a Query Handler","id":"how-to-create-a-query-handler"},{"title":"Registering Query Handlers","id":"registering-query-handlers"},{"title":"Dispatching a Query","id":"dispatching-a-query"}],"/core-concepts/configuration":[{"title":"Basic configuration","id":"basic-configuration"},{"title":"IModule Builder Methods ","id":"imodule-builder-methods"}],"/core-concepts/interceptors":[],"/core-concepts/modules-and-extensions":[{"title":"Shared packages","id":"shared-packages"},{"title":"Core Module","id":"core-module"},{"title":"Command Module","id":"command-module"},{"title":"Query Module","id":"query-module"},{"title":"Event Module","id":"event-module"},{"title":"Hands-On Examples","id":"handls-on-examples"}],"/core-concepts/polymorphism":[{"title":"Polymorphism in Ergosfare ","id":"polymorphism"},{"title":"Generic type support","id":"generic-type-support"}],"/interceptors/exception-interceptors":[{"title":"Exception Interceptors in Ergosfare","id":"what-is-an-exception-interceptor"},{"title":"Core Concepts","id":"core-concepts"},{"title":"Module-Specific Exception Interceptor Interfaces","id":"module-specific-exception-interceptor-interfaces"},{"title":"Examples","id":"examples"},{"title":"Registering Exception Interceptors","id":"registering-exception-interceptors"}],"/interceptors/post-interceptors":[{"title":"Post-Interceptors in Ergosfare","id":"what-is-a-post-interceptor"},{"title":"Core Concepts","id":"core-concepts"},{"title":"Module-Specific Post-Interceptor Interfaces","id":"module-specific-post-interceptor-interfaces"},{"title":"Examples","id":"examples"},{"title":"Registering Post-Interceptors","id":"registering-post-interceptors"}],"/interceptors/pre-interceptors":[{"title":"Pre-Interceptors in Ergosfare","id":"what-is-a-pre-interceptor"},{"title":"Core Concepts","id":"core-concepts"},{"title":"Module-Specific Pre-Interceptor Interfaces","id":"module-specific-pre-interceptor-interfaces"},{"title":"Examples","id":"examples"},{"title":"Registering Pre-Interceptors","id":"registering-pre-interceptors"}],"/interceptors/what-is-an-interceptor":[{"title":"What is an Interceptor","id":"what-is-an-interceptor"},{"title":"Key Characteristics of Interceptors","id":"key-characteristics-of-interceptors"},{"title":"Types of Interceptors","id":"types-of-interceptors"},{"title":"How Interceptors Work","id":"how-interceptors-work"},{"title":"Example: Pre-Execution Interceptor","id":"example-pre-interceptor"},{"title":"Example: Exception Interceptor","id":"example-exception-interceptor"},{"title":"Usage Scenarios","id":"interceptor-usage-scenarios"}]},"children":"$L39"}]}]}]}]}]
39:["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","div",null,{"className":"absolute inset-0 -z-10 mx-0 max-w-none overflow-hidden","children":["$","div",null,{"className":"absolute top-0 left-1/2 -ml-152 h-100 w-325 dark:mask-[linear-gradient(white,transparent)]","children":[["$","div",null,{"className":"absolute inset-0 bg-linear-to-r from-[#36b49f] to-[#DBFF75] mask-[radial-gradient(farthest-side_at_top,white,transparent)] opacity-40 dark:from-[#36b49f]/30 dark:to-[#DBFF75]/30 dark:opacity-100","children":["$","svg",null,{"aria-hidden":"true","className":"absolute inset-x-0 inset-y-[-50%] h-[200%] w-full skew-y-[-18deg] fill-black/40 stroke-black/50 mix-blend-overlay dark:fill-white/2.5 dark:stroke-white/5","children":[["$","defs",null,{"children":["$","pattern",null,{"id":"_S_2_","width":72,"height":56,"patternUnits":"userSpaceOnUse","x":-12,"y":4,"children":["$","path",null,{"d":"M.5 56V.5H72","fill":"none"}]}]}],["$","rect",null,{"width":"100%","height":"100%","strokeWidth":0,"fill":"url(#_S_2_)"}],["$","svg",null,{"x":-12,"y":4,"className":"overflow-visible","children":[["$","rect","4-3",{"strokeWidth":"0","width":73,"height":57,"x":288,"y":168}],["$","rect","2-1",{"strokeWidth":"0","width":73,"height":57,"x":144,"y":56}],["$","rect","7-3",{"strokeWidth":"0","width":73,"height":57,"x":504,"y":168}],["$","rect","10-6",{"strokeWidth":"0","width":73,"height":57,"x":720,"y":336}]]}]]}]}],["$","svg",null,{"viewBox":"0 0 1113 440","aria-hidden":"true","className":"absolute top-0 left-1/2 -ml-76 w-278.25 fill-white blur-[26px] dark:hidden","children":["$","path",null,{"d":"M.016 439.5s-9.5-300 434-300S882.516 20 882.516 20V0h230.004v439.5H.016Z"}]}]]}]}],["$","div",null,{"className":"mx-auto flex h-full max-w-xl flex-col items-center justify-center py-16 text-center","children":[["$","p",null,{"className":"text-sm font-semibold text-zinc-900 dark:text-white","children":"404"}],["$","h1",null,{"className":"mt-2 text-2xl font-bold text-zinc-900 dark:text-white","children":"Page not found"}],["$","p",null,{"className":"mt-2 text-base text-zinc-600 dark:text-zinc-400","children":"Sorry, we couldn’t find the page you’re looking for."}],["$","$L2b",null,{"className":"inline-flex gap-0.5 justify-center overflow-hidden text-sm font-medium transition rounded-full bg-zinc-900 py-1 px-3 text-white hover:bg-zinc-700 dark:bg-emerald-400/10 dark:text-emerald-400 dark:ring-1 dark:ring-inset dark:ring-emerald-400/20 dark:hover:bg-emerald-400/10 dark:hover:text-emerald-300 dark:hover:ring-emerald-300 mt-8","href":"/","children":[false,"Back to docs",["$","svg",null,{"viewBox":"0 0 20 20","fill":"none","aria-hidden":"true","className":"mt-0.5 h-5 w-5 -mr-1","children":["$","path",null,{"stroke":"currentColor","strokeLinecap":"round","strokeLinejoin":"round","d":"m11.5 6.5 3 3.5m0 0-3 3.5m3-3.5h-9"}]}]]}]]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]
