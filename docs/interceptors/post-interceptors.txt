1:"$Sreact.fragment"
3:I[7555,[],""]
4:I[1295,[],""]
5:I[4873,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","773","static/chunks/app/interceptors/post-interceptors/page-df88ac62c96e222b.js"],"Heading"]
6:I[1571,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","773","static/chunks/app/interceptors/post-interceptors/page-df88ac62c96e222b.js"],"Pre"]
7:I[1571,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","773","static/chunks/app/interceptors/post-interceptors/page-df88ac62c96e222b.js"],"Code"]
25:I[8393,[],""]
:HL["/_next/static/css/f12d518a328ac330.css","style"]
8:T932,<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">interface</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">IAsyncPostInterceptor</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">TMessage</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">Task</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">HandleAsync</span><span style="color: var(--shiki-color-text)">(</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">TMessage</span><span style="color: var(--shiki-color-text)"> message</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">object</span><span style="color: var(--shiki-token-punctuation)">?</span><span style="color: var(--shiki-color-text)"> result</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">IExecutionContext</span><span style="color: var(--shiki-color-text)"> context</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">CancellationToken</span><span style="color: var(--shiki-color-text)"> cancellationToken </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span></span>
<span><span style="color: var(--shiki-color-text)">    );</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>0:{"P":null,"b":"QgSi4ZllsLhrKSn2T6dDN","p":"","c":["","interceptors","post-interceptors"],"i":false,"f":[[["",{"children":["interceptors",{"children":["post-interceptors",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f12d518a328ac330.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],"$L2"]}],{"children":["interceptors",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["post-interceptors",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[["$","article",null,{"className":"flex h-full flex-col pt-16 pb-10","children":[["$","div",null,{"className":"flex-auto prose dark:prose-invert [html_:where(&>*)]:mx-auto [html_:where(&>*)]:max-w-2xl lg:[html_:where(&>*)]:mx-[calc(50%-min(50%,var(--container-lg)))] lg:[html_:where(&>*)]:max-w-3xl","children":[["$","div",null,{"className":"absolute inset-0 -z-10 mx-0 max-w-none overflow-hidden","children":["$","div",null,{"className":"absolute top-0 left-1/2 -ml-152 h-100 w-325 dark:mask-[linear-gradient(white,transparent)]","children":[["$","div",null,{"className":"absolute inset-0 bg-linear-to-r from-[#36b49f] to-[#DBFF75] mask-[radial-gradient(farthest-side_at_top,white,transparent)] opacity-40 dark:from-[#36b49f]/30 dark:to-[#DBFF75]/30 dark:opacity-100","children":["$","svg",null,{"aria-hidden":"true","className":"absolute inset-x-0 inset-y-[-50%] h-[200%] w-full skew-y-[-18deg] fill-black/40 stroke-black/50 mix-blend-overlay dark:fill-white/2.5 dark:stroke-white/5","children":[["$","defs",null,{"children":["$","pattern",null,{"id":"_S_1_","width":72,"height":56,"patternUnits":"userSpaceOnUse","x":-12,"y":4,"children":["$","path",null,{"d":"M.5 56V.5H72","fill":"none"}]}]}],["$","rect",null,{"width":"100%","height":"100%","strokeWidth":0,"fill":"url(#_S_1_)"}],["$","svg",null,{"x":-12,"y":4,"className":"overflow-visible","children":[["$","rect","4-3",{"strokeWidth":"0","width":73,"height":57,"x":288,"y":168}],["$","rect","2-1",{"strokeWidth":"0","width":73,"height":57,"x":144,"y":56}],["$","rect","7-3",{"strokeWidth":"0","width":73,"height":57,"x":504,"y":168}],["$","rect","10-6",{"strokeWidth":"0","width":73,"height":57,"x":720,"y":336}]]}]]}]}],["$","svg",null,{"viewBox":"0 0 1113 440","aria-hidden":"true","className":"absolute top-0 left-1/2 -ml-76 w-278.25 fill-white blur-[26px] dark:hidden","children":["$","path",null,{"d":"M.016 439.5s-9.5-300 434-300S882.516 20 882.516 20V0h230.004v439.5H.016Z"}]}]]}]}],"\n",["$","$L5",null,{"level":2,"id":"what-is-a-post-interceptor","children":"Post-Interceptors in Ergosfare"}],"\n",["$","p",null,{"children":["Post-interceptors allow you to observe, modify, or react ",["$","strong",null,{"children":"after"}]," a command, query, or event has been handled.",["$","br",null,{}],"\n","They are ideal for concerns such as ",["$","strong",null,{"children":"logging results, auditing, publishing domain events, caching, or transforming responses"}],".",["$","br",null,{}],"\n","Think of them as the “afterburners” of your message pipeline—kicking in right after your handlers finish execution."]}],"\n",["$","$L5",null,{"level":2,"id":"core-concepts","children":"Core Concepts"}],"\n",["$","p",null,{"children":"Ergosfare defines a core interface for post-interceptors, which is the foundation for all module-specific variants:"}],"\n",["$","$L6",null,{"language":"cs","code":"public interface IAsyncPostInterceptor<TMessage>\r\n{\r\n    Task HandleAsync(\r\n        TMessage message, \r\n        object? result,\r\n        IExecutionContext context, \r\n        CancellationToken cancellationToken = default\r\n    );\r\n}\n","children":["$","$L7",null,{"className":"language-cs","children":"$8"}],"title":"CoreModule Post-Interceptor Interface definition"}],"\n","$L9","\n","$La","\n","$Lb","\n","$Lc","\n","$Ld","\n","$Le","\n","$Lf","\n","$L10","\n","$L11","\n","$L12","\n","$L13","\n","$L14","\n","$L15","\n","$L16","\n","$L17","\n","$L18","\n","$L19","\n","$L1a","\n","$L1b","\n","$L1c","\n","$L1d","\n","$L1e","\n","$L1f","\n","$L20","\n","$L21"]}],"$L22"]}],null,"$L23"]}],{},null,false]},null,false]},null,false]},null,false],"$L24",false]],"m":"$undefined","G":["$25",[]],"s":false,"S":true}
2c:I[5225,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","773","static/chunks/app/interceptors/post-interceptors/page-df88ac62c96e222b.js"],"Feedback"]
2d:I[9665,[],"OutletBoundary"]
2f:I[4911,[],"AsyncMetadataOutlet"]
31:I[9665,[],"ViewportBoundary"]
33:I[9665,[],"MetadataBoundary"]
34:"$Sreact.suspense"
26:T108e,<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">LoggingPostInterceptor</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">TMessage</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">IAsyncPostInterceptor</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">TMessage</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Task</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">HandleAsync</span><span style="color: var(--shiki-color-text)">(</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">TMessage</span><span style="color: var(--shiki-color-text)"> message</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">object</span><span style="color: var(--shiki-token-punctuation)">?</span><span style="color: var(--shiki-color-text)"> result</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">IExecutionContext</span><span style="color: var(--shiki-color-text)"> context</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">CancellationToken</span><span style="color: var(--shiki-color-text)"> cancellationToken </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span></span>
<span><span style="color: var(--shiki-color-text)">    )</span></span>
<span><span style="color: var(--shiki-color-text)">    {</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">Console</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">WriteLine</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">$&quot;Handled message: {</span><span style="color: var(--shiki-token-keyword)">typeof</span><span style="color: var(--shiki-token-string-expression)">(</span><span style="color: var(--shiki-token-function)">TMessage</span><span style="color: var(--shiki-token-string-expression)">).</span><span style="color: var(--shiki-token-constant)">Name</span><span style="color: var(--shiki-token-string-expression)">}&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Task</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">CompletedTask</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>9:["$","$L6",null,{"language":"cs","code":"public class LoggingPostInterceptor<TMessage> : IAsyncPostInterceptor<TMessage>\r\n{\r\n    public Task HandleAsync(\r\n        TMessage message, \r\n        object? result,\r\n        IExecutionContext context, \r\n        CancellationToken cancellationToken = default\r\n    )\r\n    {\r\n        Console.WriteLine($\"Handled message: {typeof(TMessage).Name}\");\r\n        return Task.CompletedTask;\r\n    }\r\n}\n","children":["$","$L7",null,{"className":"language-cs","children":"$26"}],"title":"CoreModule Post-Interceptor Example"}]
a:["$","ul",null,{"children":["\n",["$","li",null,{"language":"txt","children":[["$","$L7",null,{"children":"TMessage"}]," represents the type of the message (Command, Query, or Event)."]}],"\n",["$","li",null,{"language":"txt","children":[["$","$L7",null,{"children":"IExecutionContext"}]," provides runtime context such as user identity, tenant, or correlation IDs."]}],"\n"]}]
b:["$","div",null,{"className":"my-6 flex gap-2.5 rounded-2xl border border-emerald-500/20 bg-emerald-50/50 p-4 text-sm/6 text-emerald-900 dark:border-emerald-500/30 dark:bg-emerald-500/5 dark:text-emerald-200 dark:[--tw-prose-links-hover:var(--color-emerald-300)] dark:[--tw-prose-links:var(--color-white)]","children":[["$","svg",null,{"viewBox":"0 0 16 16","aria-hidden":"true","className":"mt-1 h-4 w-4 flex-none fill-emerald-500 stroke-white dark:fill-emerald-200/20 dark:stroke-emerald-200","children":[["$","circle",null,{"cx":"8","cy":"8","r":"8","strokeWidth":"0"}],["$","path",null,{"fill":"none","strokeLinecap":"round","strokeLinejoin":"round","strokeWidth":"1.5","d":"M6.75 7.75h1.5v3.5"}],["$","circle",null,{"cx":"8","cy":"4","r":".5","fill":"none"}]]}],["$","div",null,{"className":"[&>:first-child]:mt-0 [&>:last-child]:mb-0","children":["$","p",null,{"children":"Core interfaces cannot be directly registered in higher-level modules. They serve as foundations for module-specific post-interceptors."}]}]]}]
c:["$","$L5",null,{"level":2,"id":"module-specific-post-interceptor-interfaces","children":"Module-Specific Post-Interceptor Interfaces"}]
d:["$","p",null,{"children":"Each module defines dedicated post-interceptor interfaces:"}]
e:["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"Module"}],["$","th",null,{"children":"Non-Generic Interface"}],["$","th",null,{"children":"Generic Interfaces"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":"Command"}],["$","td",null,{"language":"txt","children":["$","$L7",null,{"children":"ICommandPostInterceptor"}]}],["$","td",null,{"language":"txt","children":[["$","$L7",null,{"children":"ICommandPostInterceptor<TCommand>"}]," , ",["$","$L7",null,{"children":"ICommandPostInterceptor<TCommand, TResult>"}]]}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Query"}],["$","td",null,{"language":"txt","children":["$","$L7",null,{"children":"IQueryPostInterceptor"}]}],["$","td",null,{"language":"txt","children":[["$","$L7",null,{"children":"IQueryPostInterceptor<TQuery>"}]," , ",["$","$L7",null,{"children":"IQueryPostInterceptor<TQuery, TResult>"}]]}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Event"}],["$","td",null,{"language":"txt","children":["$","$L7",null,{"children":"IEventPostInterceptor"}]}],["$","td",null,{"language":"txt","children":["$","$L7",null,{"children":"IEventPostInterceptor<TEvent>"}]}]]}]]}]]}]
f:["$","h4",null,{"children":"Key Notes"}]
10:["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Non-generic interfaces"}]," run for ",["$","em",null,{"children":"all messages"}]," in a module (e.g., all commands)."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Generic single-parameter interfaces"}]," apply to a specific type of message."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"language":"txt","children":["Generic dual-parameter interfaces (",["$","$L7",null,{"children":"TMessage, TResult"}],")"]}]," allow interceptors to observe and modify the ",["$","em",null,{"children":"result"}]," of handlers (available for Commands & Queries only)."]}],"\n",["$","li",null,{"children":"Module-specific interfaces are automatically discoverable by the registration system."}],"\n"]}]
11:["$","$L5",null,{"level":2,"id":"examples","children":"Examples"}]
12:["$","h3",null,{"children":"Command Post-Interceptor (Generic)"}]
27:T10ce,<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">LoggingPostInterceptor</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">TCommand</span><span style="color: var(--shiki-color-text)">&gt; </span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ICommandPostInterceptor</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">TCommand</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Task</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">HandleAsync</span><span style="color: var(--shiki-color-text)">(</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">TCommand</span><span style="color: var(--shiki-color-text)"> command</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">object</span><span style="color: var(--shiki-token-punctuation)">?</span><span style="color: var(--shiki-color-text)"> result</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">IExecutionContext</span><span style="color: var(--shiki-color-text)"> context</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">CancellationToken</span><span style="color: var(--shiki-color-text)"> cancellationToken </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">    {</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">Console</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">WriteLine</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">$&quot;Finished handling command: {</span><span style="color: var(--shiki-token-keyword)">typeof</span><span style="color: var(--shiki-token-string-expression)">(</span><span style="color: var(--shiki-token-function)">TCommand</span><span style="color: var(--shiki-token-string-expression)">).</span><span style="color: var(--shiki-token-constant)">Name</span><span style="color: var(--shiki-token-string-expression)">}&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Task</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">CompletedTask</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>13:["$","$L6",null,{"language":"cs","code":"public class LoggingPostInterceptor<TCommand> \r\n    : ICommandPostInterceptor<TCommand>\r\n{\r\n    public Task HandleAsync(\r\n        TCommand command, \r\n        object? result,\r\n        IExecutionContext context, \r\n        CancellationToken cancellationToken = default)\r\n    {\r\n        Console.WriteLine($\"Finished handling command: {typeof(TCommand).Name}\");\r\n        return Task.CompletedTask;\r\n    }\r\n}\n","children":["$","$L7",null,{"className":"language-cs","children":"$27"}],"title":"command post-interceptor"}]
14:["$","ul",null,{"children":["\n",["$","li",null,{"language":"txt","children":["Runs after any command of type ",["$","$L7",null,{"children":"TCommand"}]," completes."]}],"\n"]}]
15:["$","h3",null,{"children":"Command Post-Interceptor with Result"}]
28:T1295,<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">AuditingPostInterceptor</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">TCommand</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TResult</span><span style="color: var(--shiki-color-text)">&gt; </span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ICommandPostInterceptor</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">TCommand</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TResult</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Task</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">HandleAsync</span><span style="color: var(--shiki-color-text)">(</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">TCommand</span><span style="color: var(--shiki-color-text)"> command</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">TResult</span><span style="color: var(--shiki-color-text)"> result</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">IExecutionContext</span><span style="color: var(--shiki-color-text)"> context</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">CancellationToken</span><span style="color: var(--shiki-color-text)"> cancellationToken </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">    {</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">Console</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">WriteLine</span><span style="color: var(--shiki-color-text)">(</span></span>
<span><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-string-expression)">$&quot;Command {</span><span style="color: var(--shiki-token-keyword)">typeof</span><span style="color: var(--shiki-token-string-expression)">(</span><span style="color: var(--shiki-token-function)">TCommand</span><span style="color: var(--shiki-token-string-expression)">).</span><span style="color: var(--shiki-token-constant)">Name</span><span style="color: var(--shiki-token-string-expression)">} produced result: {result}&quot;</span></span>
<span><span style="color: var(--shiki-color-text)">        );</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Task</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">CompletedTask</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>16:["$","$L6",null,{"language":"cs","code":"public class AuditingPostInterceptor<TCommand, TResult> \r\n    : ICommandPostInterceptor<TCommand, TResult>\r\n{\r\n    public Task HandleAsync(\r\n        TCommand command, \r\n        TResult result, \r\n        IExecutionContext context, \r\n        CancellationToken cancellationToken = default)\r\n    {\r\n        Console.WriteLine(\r\n            $\"Command {typeof(TCommand).Name} produced result: {result}\"\r\n        );\r\n        return Task.CompletedTask;\r\n    }\r\n}\n","children":["$","$L7",null,{"className":"language-cs","children":"$28"}],"title":"command post-interceptor with result"}]
17:["$","ul",null,{"children":["\n",["$","li",null,{"children":"Captures both the command and the handler’s result."}],"\n",["$","li",null,{"children":"Useful for auditing, result transformations, or caching."}],"\n"]}]
18:["$","h3",null,{"children":"Non-Generic Command Post-Interceptor"}]
29:Tf61,<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">GlobalCommandPostInterceptor</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ICommandPostInterceptor</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Task</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">HandleAsync</span><span style="color: var(--shiki-color-text)">(</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">ICommand</span><span style="color: var(--shiki-color-text)"> command</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">object</span><span style="color: var(--shiki-token-punctuation)">?</span><span style="color: var(--shiki-color-text)"> result</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">IExecutionContext</span><span style="color: var(--shiki-color-text)"> context</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">CancellationToken</span><span style="color: var(--shiki-color-text)"> cancellationToken </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">    {</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">Console</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">WriteLine</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">$&quot;A command was executed: {</span><span style="color: var(--shiki-token-constant)">command</span><span style="color: var(--shiki-token-string-expression)">.</span><span style="color: var(--shiki-token-function)">GetType</span><span style="color: var(--shiki-token-string-expression)">().</span><span style="color: var(--shiki-token-constant)">Name</span><span style="color: var(--shiki-token-string-expression)">}&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Task</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">CompletedTask</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>19:["$","$L6",null,{"language":"cs","code":"public class GlobalCommandPostInterceptor : ICommandPostInterceptor\r\n{\r\n    public Task HandleAsync(\r\n        ICommand command, \r\n        object? result,\r\n        IExecutionContext context, \r\n        CancellationToken cancellationToken = default)\r\n    {\r\n        Console.WriteLine($\"A command was executed: {command.GetType().Name}\");\r\n        return Task.CompletedTask;\r\n    }\r\n}\n","children":["$","$L7",null,{"className":"language-cs","children":"$29"}],"title":"non-generic command post-interceptor"}]
1a:["$","ul",null,{"children":["\n",["$","li",null,{"children":["Runs for ",["$","em",null,{"children":"every"}]," command regardless of type."]}],"\n",["$","li",null,{"children":"Useful for global logging, telemetry, or auditing."}],"\n"]}]
1b:["$","h3",null,{"children":"Query Post-Interceptor with Result"}]
2a:T1291,<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CachingPostInterceptor</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">TQuery</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TResult</span><span style="color: var(--shiki-color-text)">&gt; </span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">IQueryPostInterceptor</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">TQuery</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TResult</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Task</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">HandleAsync</span><span style="color: var(--shiki-color-text)">(</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">TQuery</span><span style="color: var(--shiki-color-text)"> query</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">TResult</span><span style="color: var(--shiki-color-text)"> result</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">IExecutionContext</span><span style="color: var(--shiki-color-text)"> context</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">CancellationToken</span><span style="color: var(--shiki-color-text)"> cancellationToken </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)">)</span></span>
<span><span style="color: var(--shiki-color-text)">    {</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">Console</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">WriteLine</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">$&quot;Query {</span><span style="color: var(--shiki-token-keyword)">typeof</span><span style="color: var(--shiki-token-string-expression)">(</span><span style="color: var(--shiki-token-function)">TQuery</span><span style="color: var(--shiki-token-string-expression)">).</span><span style="color: var(--shiki-token-constant)">Name</span><span style="color: var(--shiki-token-string-expression)">} returned {result}&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-token-comment)">        // Store in cache or apply transformations</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Task</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">CompletedTask</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>1c:["$","$L6",null,{"language":"cs","code":"public class CachingPostInterceptor<TQuery, TResult> \r\n    : IQueryPostInterceptor<TQuery, TResult>\r\n{\r\n    public Task HandleAsync(\r\n        TQuery query, \r\n        TResult result, \r\n        IExecutionContext context, \r\n        CancellationToken cancellationToken = default)\r\n    {\r\n        Console.WriteLine($\"Query {typeof(TQuery).Name} returned {result}\");\r\n        // Store in cache or apply transformations\r\n        return Task.CompletedTask;\r\n    }\r\n}\n","children":["$","$L7",null,{"className":"language-cs","children":"$2a"}],"title":"query post-interceptor with result"}]
1d:["$","ul",null,{"children":["\n",["$","li",null,{"children":"Runs after a query is handled."}],"\n",["$","li",null,{"children":"Can modify or cache query results."}],"\n"]}]
1e:["$","$L5",null,{"level":2,"id":"registering-post-interceptors","children":"Registering Post-Interceptors"}]
1f:["$","p",null,{"children":"Post-interceptors are registered the same way as handlers or as any other type of interceptor:"}]
2b:Td3c,<span><span style="color: var(--shiki-token-constant)">builder</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">Services</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">AddErgosfare</span><span style="color: var(--shiki-color-text)">(options </span><span style="color: var(--shiki-token-keyword)">=&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">AddCommandModule</span><span style="color: var(--shiki-color-text)">(module </span><span style="color: var(--shiki-token-keyword)">=&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">    {</span></span>
<span><span style="color: var(--shiki-token-comment)">        // Register a specific post-interceptor</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">Register</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">LoggingPostInterceptor</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">CreateStarCommand</span><span style="color: var(--shiki-color-text)">&gt;&gt;();</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">        // Register a post-interceptor with result</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">Register</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">AuditingPostInterceptor</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">CreateStarCommand</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Star</span><span style="color: var(--shiki-color-text)">&gt;&gt;();</span></span>
<span></span>
<span><span style="color: var(--shiki-token-comment)">        // Register all interceptors from assembly</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">RegisterFromAssembly</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">Assembly</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">GetExecutingAssembly</span><span style="color: var(--shiki-color-text)">());</span></span>
<span><span style="color: var(--shiki-color-text)">    });</span></span>
<span><span style="color: var(--shiki-color-text)">});</span></span>
<span></span>20:["$","$L6",null,{"language":"cs","code":"builder.Services.AddErgosfare(options =>\r\n{\r\n    options.AddCommandModule(module =>\r\n    {\r\n        // Register a specific post-interceptor\r\n        module.Register<LoggingPostInterceptor<CreateStarCommand>>();\r\n\r\n        // Register a post-interceptor with result\r\n        module.Register<AuditingPostInterceptor<CreateStarCommand, Star>>();\r\n\r\n        // Register all interceptors from assembly\r\n        module.RegisterFromAssembly(Assembly.GetExecutingAssembly());\r\n    });\r\n});\n","children":["$","$L7",null,{"className":"language-cs","children":"$2b"}],"title":"registering post-interceptors"}]
21:["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"language":"txt","children":["No special method is required; they use the same ",["$","$L7",null,{"children":"Register<T>()"}]," mechanism."]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"language":"txt","children":["If an interceptor implements ",["$","$L7",null,{"children":"ICommandPostInterceptor<T>"}]," or ",["$","$L7",null,{"children":"ICommandPostInterceptor<T, TResult>"}],", it is automatically added to the command pipeline."]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":["With Post-Interceptors, you can extend processing ",["$","strong",null,{"children":"after"}]," handlers, making them a natural fit for ",["$","strong",null,{"children":"auditing, telemetry, caching, notifications, or chaining domain side-effects"}],"."]}],"\n"]}],"\n"]}]
22:["$","footer",null,{"className":"mx-auto mt-16 w-full max-w-2xl lg:max-w-5xl","children":["$","$L2c",null,{}]}]
23:["$","$L2d",null,{"children":["$L2e",["$","$L2f",null,{"promise":"$@30"}]]}]
24:["$","$1","h",{"children":[null,[["$","$L31",null,{"children":"$L32"}],null],["$","$L33",null,{"children":["$","div",null,{"hidden":true,"children":["$","$34",null,{"fallback":null,"children":"$L35"}]}]}]]}]
32:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
2e:null
36:I[8175,[],"IconMark"]
30:{"metadata":[["$","title","0",{"children":"Post-Interceptors - Protocol API Reference"}],["$","meta","1",{"name":"description","content":"This guide will help you set up post interceptors in Ergosfare infrastructure and extend message processing with cross-cutting concerns after handlers execute."}],["$","link","2",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","$L36","3",{}]],"error":null,"digest":"$undefined"}
35:"$30:metadata"
37:I[881,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","745","static/chunks/745-6a389add5fbaeca1.js","700","static/chunks/700-25c42e0f330635cb.js","316","static/chunks/316-633894f3d37d156e.js","177","static/chunks/app/layout-05050350ec61d2aa.js"],"Providers"]
38:I[896,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","745","static/chunks/745-6a389add5fbaeca1.js","700","static/chunks/700-25c42e0f330635cb.js","316","static/chunks/316-633894f3d37d156e.js","177","static/chunks/app/layout-05050350ec61d2aa.js"],"Layout"]
2:["$","html",null,{"lang":"en","className":"h-full","suppressHydrationWarning":true,"children":["$","body",null,{"className":"flex min-h-full bg-white antialiased dark:bg-zinc-900","children":["$","$L37",null,{"children":["$","div",null,{"className":"w-full","children":["$","$L38",null,{"allSections":{"/":[{"title":"Why Ergosfare?","id":"Why Ergosfare?"},{"title":"Key Characteristics","id":"Key Characteristics"},{"title":"Getting started","id":"Getting started"}],"/groups":[{"title":"The group model","id":"the-group-model"},{"title":"List all groups","id":"list-all-groups","tag":"GET","label":"/v1/groups"},{"title":"Create a group","id":"create-a-group","tag":"POST","label":"/v1/groups"},{"title":"Retrieve a group","id":"retrieve-a-group","tag":"GET","label":"/v1/groups/:id"},{"title":"Update a group","id":"update-a-group","tag":"PUT","label":"/v1/groups/:id"},{"title":"Delete a group","id":"delete-a-group","tag":"DELETE","label":"/v1/groups/:id"}],"/quickstart":[{"title":"Create a .NET 9+ project","id":"create-a-net-9-project"},{"title":"Add Ergosfare to your project","id":"add-ergosfare-to-your-project"},{"title":"Configure Ergosfare in Your Application","id":"configure-ergosfare-in-your-application"},{"title":"Explore the Core Concepts?","id":"explore-the-core-concepts"}],"/building-with-ergosfare/commands-and-command-handlers":[{"title":"What is a Command","id":"what-is-a-Command"},{"title":"How to Create a Command","id":"how-to-create-a-command"},{"title":"What is a Command Handler","id":"what-is-a-command-handler"},{"title":"How to Create a Command Handler","id":"how-to-create-a-command-handler"},{"title":"Registering Command Handlers","id":"registering-command-handlers"},{"title":"Dispatching a Command","id":"dispatching-a-command"}],"/building-with-ergosfare/queries-and-query-handlers":[{"title":"What is a Query","id":"what-is-a-query"},{"title":"How to Create a Query","id":"how-to-create-a-query"},{"title":"What is a Query Handler","id":"what-is-a-query-handler"},{"title":"How to Create a Query Handler","id":"how-to-create-a-query-handler"},{"title":"Registering Query Handlers","id":"registering-query-handlers"},{"title":"Dispatching a Query","id":"dispatching-a-query"}],"/building-with-ergosfare/events-and-event-handlers":[{"title":"What is an Event","id":"what-is-an-event","links":[{"title":"Key Characteristics of Events ","id":"key-characteristics"}]},{"title":"How to Create an Event","id":"how-to-create-an-event"},{"title":"What is an Event Handler","id":"what-is-an-event-handler","links":[{"title":"Key Characteristics of Event Handlers ","id":"key-characteristics-of-event-handlers"}]},{"title":"How to Create an Event Handler","id":"how-to-create-an-event-handler"},{"title":"Registering Event Handlers","id":"registering-event-handlers"},{"title":"Dispatching an Event","id":"dispatching-an-event"}],"/core-concepts/modules-and-extensions":[{"title":"Shared packages","id":"shared-packages"},{"title":"Core Module","id":"core-module"},{"title":"Command Module","id":"command-module"},{"title":"Query Module","id":"query-module"},{"title":"Event Module","id":"event-module"},{"title":"Hands-On Examples","id":"handls-on-examples"}],"/interceptors/what-is-an-interceptor":[{"title":"What is an Interceptor","id":"what-is-an-interceptor"},{"title":"Key Characteristics of Interceptors","id":"key-characteristics-of-interceptors"},{"title":"Types of Interceptors","id":"types-of-interceptors"},{"title":"How Interceptors Work","id":"how-interceptors-work"},{"title":"Example: Pre-Execution Interceptor","id":"example-pre-interceptor"},{"title":"Example: Exception Interceptor","id":"example-exception-interceptor"},{"title":"Usage Scenarios","id":"interceptor-usage-scenarios"}],"/core-concepts/configuration":[{"title":"Basic configuration","id":"basic-configuration"},{"title":"IModule Builder Methods ","id":"imodule-builder-methods"}],"/interceptors/post-interceptors":[{"title":"Post-Interceptors in Ergosfare","id":"what-is-a-post-interceptor"},{"title":"Core Concepts","id":"core-concepts"},{"title":"Module-Specific Post-Interceptor Interfaces","id":"module-specific-post-interceptor-interfaces"},{"title":"Examples","id":"examples"},{"title":"Registering Post-Interceptors","id":"registering-post-interceptors"}],"/core-concepts/polymorphism":[{"title":"Polymorphism in Ergosfare ","id":"polymorphism"},{"title":"Generic type support","id":"generic-type-support"}],"/core-concepts/interceptors":[],"/interceptors/exception-interceptors":[{"title":"Exception Interceptors in Ergosfare","id":"what-is-an-exception-interceptor"},{"title":"Core Concepts","id":"core-concepts"},{"title":"Module-Specific Exception Interceptor Interfaces","id":"module-specific-exception-interceptor-interfaces"},{"title":"Examples","id":"examples"},{"title":"Registering Exception Interceptors","id":"registering-exception-interceptors"}],"/interceptors/pre-interceptors":[{"title":"Pre-Interceptors in Ergosfare","id":"what-is-a-pre-interceptor"},{"title":"Core Concepts","id":"core-concepts"},{"title":"Module-Specific Pre-Interceptor Interfaces","id":"module-specific-pre-interceptor-interfaces"},{"title":"Examples","id":"examples"},{"title":"Registering Pre-Interceptors","id":"registering-pre-interceptors"}]},"children":"$L39"}]}]}]}]}]
3a:I[6874,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","773","static/chunks/app/interceptors/post-interceptors/page-df88ac62c96e222b.js"],""]
39:["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","div",null,{"className":"absolute inset-0 -z-10 mx-0 max-w-none overflow-hidden","children":["$","div",null,{"className":"absolute top-0 left-1/2 -ml-152 h-100 w-325 dark:mask-[linear-gradient(white,transparent)]","children":[["$","div",null,{"className":"absolute inset-0 bg-linear-to-r from-[#36b49f] to-[#DBFF75] mask-[radial-gradient(farthest-side_at_top,white,transparent)] opacity-40 dark:from-[#36b49f]/30 dark:to-[#DBFF75]/30 dark:opacity-100","children":["$","svg",null,{"aria-hidden":"true","className":"absolute inset-x-0 inset-y-[-50%] h-[200%] w-full skew-y-[-18deg] fill-black/40 stroke-black/50 mix-blend-overlay dark:fill-white/2.5 dark:stroke-white/5","children":[["$","defs",null,{"children":["$","pattern",null,{"id":"_S_2_","width":72,"height":56,"patternUnits":"userSpaceOnUse","x":-12,"y":4,"children":["$","path",null,{"d":"M.5 56V.5H72","fill":"none"}]}]}],["$","rect",null,{"width":"100%","height":"100%","strokeWidth":0,"fill":"url(#_S_2_)"}],["$","svg",null,{"x":-12,"y":4,"className":"overflow-visible","children":[["$","rect","4-3",{"strokeWidth":"0","width":73,"height":57,"x":288,"y":168}],["$","rect","2-1",{"strokeWidth":"0","width":73,"height":57,"x":144,"y":56}],["$","rect","7-3",{"strokeWidth":"0","width":73,"height":57,"x":504,"y":168}],["$","rect","10-6",{"strokeWidth":"0","width":73,"height":57,"x":720,"y":336}]]}]]}]}],["$","svg",null,{"viewBox":"0 0 1113 440","aria-hidden":"true","className":"absolute top-0 left-1/2 -ml-76 w-278.25 fill-white blur-[26px] dark:hidden","children":["$","path",null,{"d":"M.016 439.5s-9.5-300 434-300S882.516 20 882.516 20V0h230.004v439.5H.016Z"}]}]]}]}],["$","div",null,{"className":"mx-auto flex h-full max-w-xl flex-col items-center justify-center py-16 text-center","children":[["$","p",null,{"className":"text-sm font-semibold text-zinc-900 dark:text-white","children":"404"}],["$","h1",null,{"className":"mt-2 text-2xl font-bold text-zinc-900 dark:text-white","children":"Page not found"}],["$","p",null,{"className":"mt-2 text-base text-zinc-600 dark:text-zinc-400","children":"Sorry, we couldn’t find the page you’re looking for."}],["$","$L3a",null,{"className":"inline-flex gap-0.5 justify-center overflow-hidden text-sm font-medium transition rounded-full bg-zinc-900 py-1 px-3 text-white hover:bg-zinc-700 dark:bg-emerald-400/10 dark:text-emerald-400 dark:ring-1 dark:ring-inset dark:ring-emerald-400/20 dark:hover:bg-emerald-400/10 dark:hover:text-emerald-300 dark:hover:ring-emerald-300 mt-8","href":"/","children":[false,"Back to docs",["$","svg",null,{"viewBox":"0 0 20 20","fill":"none","aria-hidden":"true","className":"mt-0.5 h-5 w-5 -mr-1","children":["$","path",null,{"stroke":"currentColor","strokeLinecap":"round","strokeLinejoin":"round","d":"m11.5 6.5 3 3.5m0 0-3 3.5m3-3.5h-9"}]}]]}]]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]
