1:"$Sreact.fragment"
3:I[7555,[],""]
4:I[1295,[],""]
5:I[4873,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","53","static/chunks/app/interceptors/what-is-an-interceptor/page-df88ac62c96e222b.js"],"Heading"]
1f:I[8393,[],""]
:HL["/_next/static/css/f12d518a328ac330.css","style"]
0:{"P":null,"b":"QgSi4ZllsLhrKSn2T6dDN","p":"","c":["","interceptors","what-is-an-interceptor"],"i":false,"f":[[["",{"children":["interceptors",{"children":["what-is-an-interceptor",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f12d518a328ac330.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],"$L2"]}],{"children":["interceptors",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["what-is-an-interceptor",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[["$","article",null,{"className":"flex h-full flex-col pt-16 pb-10","children":[["$","div",null,{"className":"flex-auto prose dark:prose-invert [html_:where(&>*)]:mx-auto [html_:where(&>*)]:max-w-2xl lg:[html_:where(&>*)]:mx-[calc(50%-min(50%,var(--container-lg)))] lg:[html_:where(&>*)]:max-w-3xl","children":[["$","div",null,{"className":"absolute inset-0 -z-10 mx-0 max-w-none overflow-hidden","children":["$","div",null,{"className":"absolute top-0 left-1/2 -ml-152 h-100 w-325 dark:mask-[linear-gradient(white,transparent)]","children":[["$","div",null,{"className":"absolute inset-0 bg-linear-to-r from-[#36b49f] to-[#DBFF75] mask-[radial-gradient(farthest-side_at_top,white,transparent)] opacity-40 dark:from-[#36b49f]/30 dark:to-[#DBFF75]/30 dark:opacity-100","children":["$","svg",null,{"aria-hidden":"true","className":"absolute inset-x-0 inset-y-[-50%] h-[200%] w-full skew-y-[-18deg] fill-black/40 stroke-black/50 mix-blend-overlay dark:fill-white/2.5 dark:stroke-white/5","children":[["$","defs",null,{"children":["$","pattern",null,{"id":"_S_1_","width":72,"height":56,"patternUnits":"userSpaceOnUse","x":-12,"y":4,"children":["$","path",null,{"d":"M.5 56V.5H72","fill":"none"}]}]}],["$","rect",null,{"width":"100%","height":"100%","strokeWidth":0,"fill":"url(#_S_1_)"}],["$","svg",null,{"x":-12,"y":4,"className":"overflow-visible","children":[["$","rect","4-3",{"strokeWidth":"0","width":73,"height":57,"x":288,"y":168}],["$","rect","2-1",{"strokeWidth":"0","width":73,"height":57,"x":144,"y":56}],["$","rect","7-3",{"strokeWidth":"0","width":73,"height":57,"x":504,"y":168}],["$","rect","10-6",{"strokeWidth":"0","width":73,"height":57,"x":720,"y":336}]]}]]}]}],["$","svg",null,{"viewBox":"0 0 1113 440","aria-hidden":"true","className":"absolute top-0 left-1/2 -ml-76 w-278.25 fill-white blur-[26px] dark:hidden","children":["$","path",null,{"d":"M.016 439.5s-9.5-300 434-300S882.516 20 882.516 20V0h230.004v439.5H.016Z"}]}]]}]}],"\n",["$","$L5",null,{"level":2,"id":"what-is-an-interceptor","children":"Basically an Interceptor"}],"\n",["$","p",null,{"children":["In Ergosfare, ",["$","strong",null,{"children":"interceptors"}]," are pipeline components that allow you to ",["$","strong",null,{"children":"observe, modify, or control the execution"}]," of commands, queries, and events before or after they reach their respective handlers. They act like ",["$","strong",null,{"children":"gravity fields or shields"}]," in a space system, shaping the trajectory of messages as they travel through the pipeline."]}],"\n",["$","p",null,{"children":["While handlers focus purely on ",["$","strong",null,{"children":"business logic"}],", interceptors handle ",["$","strong",null,{"children":"cross-cutting concerns"}],", enabling you to keep your core logic clean, maintainable, and reusable."]}],"\n",["$","$L5",null,{"level":2,"id":"key-characteristics-of-interceptors","children":"Key Characteristics of Interceptors"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Pipeline Integration:"}]," Interceptors sit in the execution pipeline for commands, queries, or events and are invoked automatically during dispatch."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Cross-Cutting Concerns:"}]," They are ideal for logging, validation, authorization, context propagation, and error handling."]}],"\n","$L6","\n","$L7","\n","$L8","\n","$L9","\n"]}],"\n","$La","\n","$Lb","\n","$Lc","\n","$Ld","\n","$Le","\n","$Lf","\n","$L10","\n","$L11","\n","$L12","\n","$L13","\n","$L14","\n","$L15","\n","$L16","\n","$L17","\n","$L18","\n","$L19","\n","$L1a","\n","$L1b"]}],"$L1c"]}],null,"$L1d"]}],{},null,false]},null,false]},null,false]},null,false],"$L1e",false]],"m":"$undefined","G":["$1f",[]],"s":false,"S":true}
20:I[1571,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","53","static/chunks/app/interceptors/what-is-an-interceptor/page-df88ac62c96e222b.js"],"Code"]
21:I[1571,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","53","static/chunks/app/interceptors/what-is-an-interceptor/page-df88ac62c96e222b.js"],"Pre"]
24:I[5225,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","53","static/chunks/app/interceptors/what-is-an-interceptor/page-df88ac62c96e222b.js"],"Feedback"]
25:I[9665,[],"OutletBoundary"]
27:I[4911,[],"AsyncMetadataOutlet"]
29:I[9665,[],"ViewportBoundary"]
2b:I[9665,[],"MetadataBoundary"]
2c:"$Sreact.suspense"
6:["$","li",null,{"children":[["$","strong",null,{"children":"Message Observation & Modification:"}]," Interceptors can inspect or modify messages as they pass through the pipeline."]}]
7:["$","li",null,{"children":[["$","strong",null,{"children":"Execution Control:"}]," They can abort execution early or conditionally skip downstream processing using the execution context."]}]
8:["$","li",null,{"children":[["$","strong",null,{"children":"Type-Specific or Generic:"}]," Interceptors can target specific message types or apply generically across multiple types."]}]
9:["$","li",null,{"children":[["$","strong",null,{"children":"Decoupled from Business Logic:"}]," Handlers remain focused on business logic, while interceptors manage infrastructural or cross-cutting concerns."]}]
a:["$","$L5",null,{"level":2,"id":"types-of-interceptors","children":"Types of Interceptors"}]
b:["$","p",null,{"children":["Ergosfare provides ",["$","strong",null,{"children":"flexible interception points"}],", depending on the stage of execution:"]}]
c:["$","ul",null,{"children":["\n",["$","li",null,{"children":["\n",["$","p",null,{"children":["$","strong",null,{"children":"Pre-Execution Interceptors"}]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["Run ",["$","strong",null,{"children":"before"}]," a handler executes."]}],"\n",["$","li",null,{"children":"Ideal for validation, logging input data, propagating context values, or enforcing authorization."}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":["$","strong",null,{"children":"Post-Execution Interceptors"}]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["Run ",["$","strong",null,{"children":"after"}]," a handler completes successfully."]}],"\n",["$","li",null,{"children":"Can log results, transform output, or trigger additional side effects."}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["\n",["$","p",null,{"children":["$","strong",null,{"children":"Exception Interceptors"}]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["Run when a handler or an any other interception ",["$","strong",null,{"children":"throws an exception"}],"."]}],"\n",["$","li",null,{"children":"Useful for centralized error handling, retries, or transforming exceptions into domain-specific responses."}],"\n"]}],"\n"]}],"\n"]}]
d:["$","$L5",null,{"level":2,"id":"how-interceptors-work","children":"How Interceptors Work"}]
e:["$","p",null,{"language":"txt","children":["Interceptors are invoked automatically in the ",["$","strong",null,{"children":"pipeline sequence"}]," during command, query, or event dispatch. They receive the ",["$","strong",null,{"children":"execution context"}]," (",["$","$L20",null,{"children":"IExecutionContext"}],") and the ",["$","strong",null,{"children":"message instance"}],", giving them full control over the flow:"]}]
f:["$","ul",null,{"children":["\n",["$","li",null,{"children":["Access contextual data such as ",["$","strong",null,{"children":"tenant IDs, user identity, or correlation IDs"}],"."]}],"\n",["$","li",null,{"children":"Modify message properties before the handler executes."}],"\n",["$","li",null,{"language":"txt","children":["Abort execution early with ",["$","$L20",null,{"children":"ExecutionContext.Abort()"}],"."]}],"\n",["$","li",null,{"children":"Observe results or exceptions after execution."}],"\n"]}]
10:["$","p",null,{"children":["This ensures a ",["$","strong",null,{"children":"consistent, reusable mechanism"}]," for cross-cutting concerns without polluting the domain logic in handlers."]}]
11:["$","$L5",null,{"level":2,"id":"example-pre-interceptor","children":"Example: Pre-Execution Interceptor"}]
22:Tb62,<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">LoggingInterceptor</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">IQueryPreInterceptor</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Task</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">HandleAsync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">IQuery</span><span style="color: var(--shiki-color-text)"> query</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">IExecutionContext</span><span style="color: var(--shiki-color-text)"> context)</span></span>
<span><span style="color: var(--shiki-color-text)">    {</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">Console</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">WriteLine</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">$&quot;Intercepting message: {</span><span style="color: var(--shiki-token-constant)">query</span><span style="color: var(--shiki-token-string-expression)">.</span><span style="color: var(--shiki-token-function)">GetType</span><span style="color: var(--shiki-token-string-expression)">().</span><span style="color: var(--shiki-token-constant)">Name</span><span style="color: var(--shiki-token-string-expression)">}&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Task</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">CompletedTask</span><span style="color: var(--shiki-color-text)">;</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>
<span></span>12:["$","$L21",null,{"language":"cs","code":"public class LoggingInterceptor : IQueryPreInterceptor\r\n{\r\n    public Task HandleAsync(IQuery query, IExecutionContext context)\r\n    {\r\n        Console.WriteLine($\"Intercepting message: {query.GetType().Name}\");\r\n        return Task.CompletedTask;\r\n    }\r\n}\r\n\n","children":["$","$L20",null,{"className":"language-cs","children":"$22"}],"title":"Example Logging Pre-Interceptor"}]
13:["$","p",null,{"children":["$","strong",null,{"children":"Behavior:"}]}]
14:["$","ul",null,{"children":["\n",["$","li",null,{"children":"Logs the message type before the handler executes."}],"\n",["$","li",null,{"children":"Does not modify the message but could if needed."}],"\n"]}]
15:["$","$L5",null,{"level":2,"id":"example-exception-interceptor","children":"Example: Exception Interceptor"}]
23:T101c,<span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ErrorHandlingInterceptor</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ICommandExceptionInterceptor</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">TCommand</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span><span style="color: var(--shiki-color-text)">{</span></span>
<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">public</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Task</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">HandleAsync</span><span style="color: var(--shiki-color-text)">(</span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">TCommand</span><span style="color: var(--shiki-color-text)"> message</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">object</span><span style="color: var(--shiki-token-punctuation)">?</span><span style="color: var(--shiki-color-text)"> result</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">ExceptionDispatchInfo</span><span style="color: var(--shiki-color-text)"> ExceptionDispatchInfo</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></span>
<span><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">IExecutionContext</span><span style="color: var(--shiki-color-text)"> context)</span></span>
<span><span style="color: var(--shiki-color-text)">    {</span></span>
<span><span style="color: var(--shiki-color-text)">         </span><span style="color: var(--shiki-token-constant)">Console</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">WriteLine</span><span style="color: var(--shiki-color-text)">(</span></span>
<span><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-string-expression)">$&quot;Error in handling {</span><span style="color: var(--shiki-token-keyword)">typeof</span><span style="color: var(--shiki-token-string-expression)">(</span><span style="color: var(--shiki-token-function)">TMessage</span><span style="color: var(--shiki-token-string-expression)">).</span><span style="color: var(--shiki-token-constant)">Name</span><span style="color: var(--shiki-token-string-expression)">}: {</span><span style="color: var(--shiki-token-constant)">ExceptionDispatchInfo</span><span style="color: var(--shiki-token-string-expression)">.</span><span style="color: var(--shiki-token-constant)">SourceException</span><span style="color: var(--shiki-token-string-expression)">.</span><span style="color: var(--shiki-token-constant)">Message</span><span style="color: var(--shiki-token-string-expression)">}&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span><span style="color: var(--shiki-color-text)">    }</span></span>
<span><span style="color: var(--shiki-color-text)">}</span></span>
<span></span>16:["$","$L21",null,{"language":"cs","code":"public class ErrorHandlingInterceptor : ICommandExceptionInterceptor<TCommand>\r\n{\r\n    public async Task HandleAsync(\r\n        TCommand message, \r\n        object? result, \r\n        ExceptionDispatchInfo ExceptionDispatchInfo, \r\n        IExecutionContext context)\r\n    {\r\n         Console.WriteLine(\r\n            $\"Error in handling {typeof(TMessage).Name}: {ExceptionDispatchInfo.SourceException.Message}\");\r\n    }\r\n}\n","children":["$","$L20",null,{"className":"language-cs","children":"$23"}]}]
17:["$","p",null,{"children":["$","strong",null,{"children":"Behavior:"}]}]
18:["$","ul",null,{"children":["\n",["$","li",null,{"children":"Catches exceptions thrown by the handler or downstream interceptors."}],"\n",["$","li",null,{"children":"Centralizes error logging or transformation."}],"\n"]}]
19:["$","$L5",null,{"level":2,"id":"interceptor-usage-scenarios","children":"Usage Scenarios"}]
1a:["$","p",null,{"children":["Interceptors can be used for a wide range of ",["$","strong",null,{"children":"cross-cutting behaviors"}],":"]}]
1b:["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Logging & Telemetry:"}]," Track message flow, execution duration, and metrics."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Validation & Authorization:"}]," Enforce rules before the message reaches the handler."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Context Propagation:"}]," Share tenant IDs, correlation IDs, or other scoped information."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Error Handling:"}]," Retry failed operations, log errors, or convert exceptions into domain events."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Dynamic Behavior:"}]," Modify messages, cancel execution, or trigger additional side effects conditionally."]}],"\n"]}]
1c:["$","footer",null,{"className":"mx-auto mt-16 w-full max-w-2xl lg:max-w-5xl","children":["$","$L24",null,{}]}]
1d:["$","$L25",null,{"children":["$L26",["$","$L27",null,{"promise":"$@28"}]]}]
1e:["$","$1","h",{"children":[null,[["$","$L29",null,{"children":"$L2a"}],null],["$","$L2b",null,{"children":["$","div",null,{"hidden":true,"children":["$","$2c",null,{"fallback":null,"children":"$L2d"}]}]}]]}]
2a:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
26:null
2e:I[8175,[],"IconMark"]
28:{"metadata":[["$","title","0",{"children":"Quickstart - Events - Protocol API Reference"}],["$","meta","1",{"name":"description","content":"This guide will help you set up events in Ergosfare and start building event-driven workflows."}],["$","link","2",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","$L2e","3",{}]],"error":null,"digest":"$undefined"}
2d:"$28:metadata"
2f:I[881,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","745","static/chunks/745-6a389add5fbaeca1.js","700","static/chunks/700-25c42e0f330635cb.js","316","static/chunks/316-633894f3d37d156e.js","177","static/chunks/app/layout-05050350ec61d2aa.js"],"Providers"]
30:I[896,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","745","static/chunks/745-6a389add5fbaeca1.js","700","static/chunks/700-25c42e0f330635cb.js","316","static/chunks/316-633894f3d37d156e.js","177","static/chunks/app/layout-05050350ec61d2aa.js"],"Layout"]
2:["$","html",null,{"lang":"en","className":"h-full","suppressHydrationWarning":true,"children":["$","body",null,{"className":"flex min-h-full bg-white antialiased dark:bg-zinc-900","children":["$","$L2f",null,{"children":["$","div",null,{"className":"w-full","children":["$","$L30",null,{"allSections":{"/":[{"title":"Why Ergosfare?","id":"Why Ergosfare?"},{"title":"Key Characteristics","id":"Key Characteristics"},{"title":"Getting started","id":"Getting started"}],"/quickstart":[{"title":"Create a .NET 9+ project","id":"create-a-net-9-project"},{"title":"Add Ergosfare to your project","id":"add-ergosfare-to-your-project"},{"title":"Configure Ergosfare in Your Application","id":"configure-ergosfare-in-your-application"},{"title":"Explore the Core Concepts?","id":"explore-the-core-concepts"}],"/groups":[{"title":"The group model","id":"the-group-model"},{"title":"List all groups","id":"list-all-groups","tag":"GET","label":"/v1/groups"},{"title":"Create a group","id":"create-a-group","tag":"POST","label":"/v1/groups"},{"title":"Retrieve a group","id":"retrieve-a-group","tag":"GET","label":"/v1/groups/:id"},{"title":"Update a group","id":"update-a-group","tag":"PUT","label":"/v1/groups/:id"},{"title":"Delete a group","id":"delete-a-group","tag":"DELETE","label":"/v1/groups/:id"}],"/building-with-ergosfare/queries-and-query-handlers":[{"title":"What is a Query","id":"what-is-a-query"},{"title":"How to Create a Query","id":"how-to-create-a-query"},{"title":"What is a Query Handler","id":"what-is-a-query-handler"},{"title":"How to Create a Query Handler","id":"how-to-create-a-query-handler"},{"title":"Registering Query Handlers","id":"registering-query-handlers"},{"title":"Dispatching a Query","id":"dispatching-a-query"}],"/core-concepts/configuration":[{"title":"Basic configuration","id":"basic-configuration"},{"title":"IModule Builder Methods ","id":"imodule-builder-methods"}],"/building-with-ergosfare/events-and-event-handlers":[{"title":"What is an Event","id":"what-is-an-event","links":[{"title":"Key Characteristics of Events ","id":"key-characteristics"}]},{"title":"How to Create an Event","id":"how-to-create-an-event"},{"title":"What is an Event Handler","id":"what-is-an-event-handler","links":[{"title":"Key Characteristics of Event Handlers ","id":"key-characteristics-of-event-handlers"}]},{"title":"How to Create an Event Handler","id":"how-to-create-an-event-handler"},{"title":"Registering Event Handlers","id":"registering-event-handlers"},{"title":"Dispatching an Event","id":"dispatching-an-event"}],"/core-concepts/interceptors":[],"/interceptors/exception-interceptors":[{"title":"Exception Interceptors in Ergosfare","id":"what-is-an-exception-interceptor"},{"title":"Core Concepts","id":"core-concepts"},{"title":"Module-Specific Exception Interceptor Interfaces","id":"module-specific-exception-interceptor-interfaces"},{"title":"Examples","id":"examples"},{"title":"Registering Exception Interceptors","id":"registering-exception-interceptors"}],"/interceptors/what-is-an-interceptor":[{"title":"What is an Interceptor","id":"what-is-an-interceptor"},{"title":"Key Characteristics of Interceptors","id":"key-characteristics-of-interceptors"},{"title":"Types of Interceptors","id":"types-of-interceptors"},{"title":"How Interceptors Work","id":"how-interceptors-work"},{"title":"Example: Pre-Execution Interceptor","id":"example-pre-interceptor"},{"title":"Example: Exception Interceptor","id":"example-exception-interceptor"},{"title":"Usage Scenarios","id":"interceptor-usage-scenarios"}],"/core-concepts/polymorphism":[{"title":"Polymorphism in Ergosfare ","id":"polymorphism"},{"title":"Generic type support","id":"generic-type-support"}],"/building-with-ergosfare/commands-and-command-handlers":[{"title":"What is a Command","id":"what-is-a-Command"},{"title":"How to Create a Command","id":"how-to-create-a-command"},{"title":"What is a Command Handler","id":"what-is-a-command-handler"},{"title":"How to Create a Command Handler","id":"how-to-create-a-command-handler"},{"title":"Registering Command Handlers","id":"registering-command-handlers"},{"title":"Dispatching a Command","id":"dispatching-a-command"}],"/core-concepts/modules-and-extensions":[{"title":"Shared packages","id":"shared-packages"},{"title":"Core Module","id":"core-module"},{"title":"Command Module","id":"command-module"},{"title":"Query Module","id":"query-module"},{"title":"Event Module","id":"event-module"},{"title":"Hands-On Examples","id":"handls-on-examples"}],"/interceptors/pre-interceptors":[{"title":"Pre-Interceptors in Ergosfare","id":"what-is-a-pre-interceptor"},{"title":"Core Concepts","id":"core-concepts"},{"title":"Module-Specific Pre-Interceptor Interfaces","id":"module-specific-pre-interceptor-interfaces"},{"title":"Examples","id":"examples"},{"title":"Registering Pre-Interceptors","id":"registering-pre-interceptors"}],"/interceptors/post-interceptors":[{"title":"Post-Interceptors in Ergosfare","id":"what-is-a-post-interceptor"},{"title":"Core Concepts","id":"core-concepts"},{"title":"Module-Specific Post-Interceptor Interfaces","id":"module-specific-post-interceptor-interfaces"},{"title":"Examples","id":"examples"},{"title":"Registering Post-Interceptors","id":"registering-post-interceptors"}]},"children":"$L31"}]}]}]}]}]
32:I[6874,["874","static/chunks/874-437a265a67d6cfee.js","231","static/chunks/231-1017a615ac90015c.js","316","static/chunks/316-633894f3d37d156e.js","53","static/chunks/app/interceptors/what-is-an-interceptor/page-df88ac62c96e222b.js"],""]
31:["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","div",null,{"className":"absolute inset-0 -z-10 mx-0 max-w-none overflow-hidden","children":["$","div",null,{"className":"absolute top-0 left-1/2 -ml-152 h-100 w-325 dark:mask-[linear-gradient(white,transparent)]","children":[["$","div",null,{"className":"absolute inset-0 bg-linear-to-r from-[#36b49f] to-[#DBFF75] mask-[radial-gradient(farthest-side_at_top,white,transparent)] opacity-40 dark:from-[#36b49f]/30 dark:to-[#DBFF75]/30 dark:opacity-100","children":["$","svg",null,{"aria-hidden":"true","className":"absolute inset-x-0 inset-y-[-50%] h-[200%] w-full skew-y-[-18deg] fill-black/40 stroke-black/50 mix-blend-overlay dark:fill-white/2.5 dark:stroke-white/5","children":[["$","defs",null,{"children":["$","pattern",null,{"id":"_S_2_","width":72,"height":56,"patternUnits":"userSpaceOnUse","x":-12,"y":4,"children":["$","path",null,{"d":"M.5 56V.5H72","fill":"none"}]}]}],["$","rect",null,{"width":"100%","height":"100%","strokeWidth":0,"fill":"url(#_S_2_)"}],["$","svg",null,{"x":-12,"y":4,"className":"overflow-visible","children":[["$","rect","4-3",{"strokeWidth":"0","width":73,"height":57,"x":288,"y":168}],["$","rect","2-1",{"strokeWidth":"0","width":73,"height":57,"x":144,"y":56}],["$","rect","7-3",{"strokeWidth":"0","width":73,"height":57,"x":504,"y":168}],["$","rect","10-6",{"strokeWidth":"0","width":73,"height":57,"x":720,"y":336}]]}]]}]}],["$","svg",null,{"viewBox":"0 0 1113 440","aria-hidden":"true","className":"absolute top-0 left-1/2 -ml-76 w-278.25 fill-white blur-[26px] dark:hidden","children":["$","path",null,{"d":"M.016 439.5s-9.5-300 434-300S882.516 20 882.516 20V0h230.004v439.5H.016Z"}]}]]}]}],["$","div",null,{"className":"mx-auto flex h-full max-w-xl flex-col items-center justify-center py-16 text-center","children":[["$","p",null,{"className":"text-sm font-semibold text-zinc-900 dark:text-white","children":"404"}],["$","h1",null,{"className":"mt-2 text-2xl font-bold text-zinc-900 dark:text-white","children":"Page not found"}],["$","p",null,{"className":"mt-2 text-base text-zinc-600 dark:text-zinc-400","children":"Sorry, we couldn’t find the page you’re looking for."}],["$","$L32",null,{"className":"inline-flex gap-0.5 justify-center overflow-hidden text-sm font-medium transition rounded-full bg-zinc-900 py-1 px-3 text-white hover:bg-zinc-700 dark:bg-emerald-400/10 dark:text-emerald-400 dark:ring-1 dark:ring-inset dark:ring-emerald-400/20 dark:hover:bg-emerald-400/10 dark:hover:text-emerald-300 dark:hover:ring-emerald-300 mt-8","href":"/","children":[false,"Back to docs",["$","svg",null,{"viewBox":"0 0 20 20","fill":"none","aria-hidden":"true","className":"mt-0.5 h-5 w-5 -mr-1","children":["$","path",null,{"stroke":"currentColor","strokeLinecap":"round","strokeLinejoin":"round","d":"m11.5 6.5 3 3.5m0 0-3 3.5m3-3.5h-9"}]}]]}]]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]
